Directory structure:
└── nillionnetwork-nillion-docs/
    ├── README.md
    ├── babel.config.js
    ├── CONTRIBUTING.md
    ├── docusaurus.config.js
    ├── LICENSE
    ├── package.json
    ├── sidebar-api.js
    ├── sidebar-build.js
    ├── sidebar-community.js
    ├── sidebar-learn.js
    ├── sidebars.js
    ├── vercel.json
    ├── apispec/
    │   ├── nilai-api.yaml
    │   ├── nildb-api.yaml
    │   └── nildb/
    │       ├── accounts.openapi.yaml
    │       ├── base.openapi.yaml
    │       ├── data.openapi.yaml
    │       ├── nildb-combined.yaml
    │       ├── queries.openapi.yaml
    │       ├── schemas.openapi.yaml
    │       └── system.openapi.yaml
    ├── docs/
    │   ├── _testnet_block_explorers.mdx
    │   ├── _testnet_supported_wallets.mdx
    │   ├── api/
    │   │   ├── overview.mdx
    │   │   ├── nilai/
    │   │   │   ├── chat-completion-v-1-chat-completions-post.api.mdx
    │   │   │   ├── get-attestation-v-1-attestation-report-get.api.mdx
    │   │   │   ├── get-models-v-1-models-get.api.mdx
    │   │   │   ├── get-usage-v-1-usage-get.api.mdx
    │   │   │   ├── health-check-v-1-health-get.api.mdx
    │   │   │   ├── nilai.info.mdx
    │   │   │   ├── overview.mdx
    │   │   │   └── sidebar.ts
    │   │   └── nildb/
    │   │       ├── accounts.api.mdx
    │   │       ├── add-query.api.mdx
    │   │       ├── add-schema.api.mdx
    │   │       ├── delete-all-data.api.mdx
    │   │       ├── delete-data.api.mdx
    │   │       ├── delete-query.api.mdx
    │   │       ├── delete-schema.api.mdx
    │   │       ├── execute-query.api.mdx
    │   │       ├── get-health-status.api.mdx
    │   │       ├── get-node-details.api.mdx
    │   │       ├── get-queries.api.mdx
    │   │       ├── get-schemas.api.mdx
    │   │       ├── list-new-data.api.mdx
    │   │       ├── nildb-api.info.mdx
    │   │       ├── overview.md
    │   │       ├── read-data.api.mdx
    │   │       ├── sidebar.ts
    │   │       ├── update-data.api.mdx
    │   │       └── upload-data.api.mdx
    │   ├── community/
    │   │   ├── community-and-support.md
    │   │   └── guides/
    │   │       ├── nillion-wallet.md
    │   │       ├── sending-nil.md
    │   │       ├── testnet-faucet.md
    │   │       └── testnet.md
    │   └── learn/
    │       ├── architecture.md
    │       ├── blind-modules.md
    │       ├── protocols.md
    │       ├── use-cases.md
    │       └── what-is-nillion.md
    ├── src/
    │   ├── components/
    │   │   ├── Features/
    │   │   │   └── FeatureSection/
    │   │   │       ├── index.js
    │   │   │       └── index.module.css
    │   │   ├── HomepageFeatures/
    │   │   │   ├── index.js
    │   │   │   └── styles.module.css
    │   │   ├── IframeVideo/
    │   │   │   ├── index.js
    │   │   │   └── styles.module.css
    │   │   └── LinkButton/
    │   │       ├── index.js
    │   │       └── styles.module.css
    │   ├── css/
    │   │   └── custom.css
    │   ├── pages/
    │   │   ├── index.js
    │   │   └── index.module.css
    │   ├── theme/
    │   │   └── SearchBar/
    │   │       └── index.js
    │   └── utils/
    │       ├── apiCards.js
    │       └── FeatureCards.js
    ├── static/
    │   ├── llm.txt
    │   ├── .nojekyll
    │   ├── fonts/
    │   │   └── TWKEverett-Medium-web.woff
    │   └── js/
    │       └── piwik.js
    └── .github/
        ├── ISSUE_TEMPLATE/
        │   ├── document-a-new-feature.md
        │   └── request-a-documentation-update.md
        └── workflows/
            └── sync-main-to-release.yaml

================================================
FILE: README.md
================================================
# Nillion docs

The Nillion docs are built using [Docusaurus v3](https://docusaurus.io/). Documentation content lives in the docs folder of this repo, and new sections can be added to the sidebar by including the pages in sidebar.js.

## Improving the docs

Got a suggestion for improving the docs? Let us know by [creating a Github Issue](https://github.com/NillionNetwork/nillion-docs/issues/new?assignees=&labels=documentation&projects=&template=improve-documentation.md&title=%5BDOCS%5D)

## Asking questions

Use our [Github Discussions forum](https://github.com/orgs/NillionNetwork/discussions?discussions_q=) to ask technical questions and share ideas about Nillion.

## Running the docs locally

### Installation

```
$ yarn install
```

### Local Development

```
$ yarn start
```

This command starts a local development server and opens up a browser window. Most changes are reflected live without having to restart the server.

### Build

```
$ yarn build
```

This command generates static content into the `build` directory and can be served using any static contents hosting service.

### Search

The docs use [Algolia DocSearch](https://docsearch.algolia.com/docs/what-is-docsearch) for search, with crawling once a week on Mondays on the 'nillion_docs' index.

### Deployment

The docs are deployed to [docs.nillion.com](https://docs.nillion.com/) with Vercel.



================================================
FILE: babel.config.js
================================================
module.exports = {
  presets: [require.resolve('@docusaurus/core/lib/babel/preset')],
};



================================================
FILE: CONTRIBUTING.md
================================================
# Contributing Guide

Thank you for investing your time in contributing.

This guide aims to provide an overview of the contribution workflow to help us make the contribution process effective for everyone involved.

Read the [README](README.md) to get an overview of the project.

### Project Status

The project is under active development.

You can view the open Issues, follow the development process and contribute to the project.

## Getting started

You can contribute to this repo in many ways:

- Solve open issues
- Report bugs or feature requests
- Improve the documentation

Contributions are made via Issues and Pull Requests (PRs). A few general guidelines for contributions:

- Search for existing Issues and PRs before creating your own.
- Contributions should only fix/add the functionality in the issue OR address style issues, not both.
- If you're running into an error, please give context. Explain what you're trying to do and how to reproduce the error.
- Please use the same formatting in the code repository. You can configure your IDE to do it by using the prettier / linting config files included in each package.
- If applicable, please edit the README.md file to reflect the changes.

### Issues

Issues should be used to report problems, request a new feature, or discuss potential changes before a PR is created.

#### Solve an issue

Scan through our [existing issues](https://github.com/NillionNetwork/nillion-docs/issues) to find one that interests you.

If a contributor is working on the issue, they will be assigned to the individual. If you find an issue to work on, you are welcome to assign it to yourself and open a PR with a fix for it.

#### Create a new issue

If a related issue doesn't exist, you can open a new issue.

Some tips to follow when you are creating an issue:

- Provide as much context as possible. Over-communicate to give the most details to the reader.
- Include the steps to reproduce the issue or the reason for adding the feature.
- Screenshots, videos etc., are highly appreciated.

### Pull Requests

#### Pull Request Process

We follow the ["fork-and-pull" Git workflow](https://github.com/susam/gitpr)

1. Fork the repo
2. Clone the project
3. Create a new branch with a descriptive name
4. Commit your changes to the new branch
5. Push changes to your fork
6. Open a PR in our repository by [creating a pull request from your fork](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork). Use the "main" branch as the base branch, the branch in the repository that you want to merge your changes into.
7. Tag one of the maintainers to review your PR

Here are some tips for a high-quality pull request:

- Create a title for the PR that accurately defines the work done.
- Structure the description neatly to make it easy to consume by the readers. For example, you can include bullet points and screenshots instead of having one large paragraph.
- Add the link to the issue if applicable.
- Have a good commit message that summarises the work done.

Once you submit your PR:

- We may ask questions, request additional information or ask for changes to be made before a PR can be merged. Please note that these are to make the PR clear for everyone involved and aims to create a frictionless interaction process.
- As you update your PR and apply changes, mark each conversation resolved.

Once the PR is approved, we'll "squash-and-merge" to keep the git commit history clean.



================================================
FILE: docusaurus.config.js
================================================
// @ts-check
// `@type` JSDoc annotations allow editor autocompletion and type checking
// (when paired with `@ts-check`).
// There are various equivalent ways to declare your Docusaurus config.
// See: https://docusaurus.io/docs/api/docusaurus-config

import { themes as prismThemes } from 'prism-react-renderer';
import 'dotenv/config';
// const { apiSidebar } = require('./sidebar-api');

/** @type {import('@docusaurus/types').Config} */
const config = {
  title: 'Nillion Builder Docs',
  tagline:
    'Nillion is a secure computation network that decentralizes trust for high value data',
  favicon: 'img/favicon.ico',
  staticDirectories: ['static'],
  // Set the production url of your site here
  url: 'https://docs.nillion.com',
  // Set the /<baseUrl>/ pathname under which your site is served
  // For GitHub pages deployment, it is often '/<projectName>/'
  baseUrl: '/',
  trailingSlash: false,

  onBrokenLinks: 'throw',
  onBrokenMarkdownLinks: 'throw',
  onBrokenAnchors: 'ignore',
  // Even if you don't use internationalization, you can use this field to set
  // useful metadata like html lang. For example, if your site is Chinese, you
  // may want to replace "en" with "zh-Hans".
  i18n: {
    defaultLocale: 'en',
    locales: ['en'],
  },

  markdown: {
    mermaid: true,
  },

  scripts: [
    {
      src: '/js/piwik.js',
      async: false,
    },
    {
      src: 'https://tag.safary.club/stag-0.1.11.js',
      async: true,
      'data-name': 'safary-sdk',
      'data-product-id': 'prd_rbwHhyTvxR',
      integrity: 'sha256-FcvJgRCaJFszFBKv8MGIbUcmHlVuHp7LX8zGgjfvvGs=',
      crossOrigin: 'anonymous',
    },
    {
      src: 'https://cloud.umami.is/script.js',
      defer: true,
      'data-website-id': '94defefb-94a4-4706-9ec8-7a7333f484c1',
    },
    {
      src: 'https://plausible.io/js/script.tagged-events.js',
      defer: true,
      'data-domain': 'docs.nillion.com',
    },
  ],
  headTags: [
    {
      tagName: 'meta',
      attributes: {
        name: 'google-site-verification',
        content: 'AaBcABcNNZ4eaHnfCCOfrhzAWLWI7IpKLePjkSBMGp4',
      },
    },
  ],
  presets: [
    [
      'classic',
      /** @type {import('@docusaurus/preset-classic').Options} */
      ({
        docs: {
          routeBasePath: '/',
          sidebarPath: './sidebars.js',
          docRootComponent: '@theme/DocRoot',
          docItemComponent: '@theme/ApiItem',
          // Please change this to your repo.
          // Remove this to remove the "edit this page" links.
          // editUrl:
          //   'https://github.com/NillionNetwork/nillion-docs/tree/main/',
        },
        blog: false,
        theme: {
          customCss: './src/css/custom.css',
        },
      }),
    ],
  ],
  themes: [
    'docusaurus-theme-openapi-docs',
    'docusaurus-theme-github-codeblock',
    '@docusaurus/theme-mermaid',
  ],
  themeConfig:
    /** @type {import('@docusaurus/preset-classic').ThemeConfig} */
    ({
      devServer: {
        proxy: {
          '/api': {
            target: 'https://nildb-a50d.nillion.network',
            changeOrigin: true,
            pathRewrite: {
              '^/api': '',
            },
          },
        },
      },
      colorMode: {
        defaultMode: 'dark',
        respectPrefersColorScheme: true,
      },
      image: 'img/nillion-banner.jpeg',
      navbar: {
        logo: {
          alt: 'Nillion logo',
          src: 'img/logo.svg',
        },
        items: [
          {
            type: 'doc',
            position: 'left',
            docId: 'learn/what-is-nillion',
            label: 'Learn',
          },
          {
            type: 'doc',
            position: 'left',
            docId: 'build/quickstart',
            label: 'Build',
          },
          {
            type: 'doc',
            position: 'left',
            docId: 'api/overview',
            label: 'API',
          },
          {
            type: 'doc',
            position: 'left',
            docId: 'community/community-and-support',
            label: 'Community',
          },

          {
            href: 'https://github.com/NillionNetwork',
            className: 'header-github',
            position: 'right',
          },
        ],
      },
      prism: {
        theme: prismThemes.github,
        darkTheme: prismThemes.dracula,
      },
      codeblock: {
        showGithubLink: true,
        githubLinkLabel: 'View on GitHub',
        showRunmeLink: false,
        runmeLinkLabel: 'Checkout via Runme',
      },
      algolia: {
        appId: 'I1AVSJUXEA',
        apiKey: '54efdeb0639df4a13b0e58e37360efe9', // search only - safe to share
        indexName: 'nillion_docs',
        searchPagePasitemapth: 'search',
      },
      docs: {
        sidebar: {
          hideable: true,
        },
      },
      footer: {
        links: [
          {
            title: 'Community',
            items: [
              {
                type: 'link',
                label: 'Discord',
                href: 'https://discord.com/invite/nillionnetwork',
              },
              {
                type: 'link',
                label: 'X (formerly Twitter)',
                href: 'https://x.com/nillionnetwork',
              },
            ],
          },
          {
            title: 'Builders',
            items: [
              {
                type: 'link',
                label: 'Github Discussions',
                href: 'https://github.com/orgs/NillionNetwork/discussions',
              },
              {
                type: 'link',
                label: 'Builder Bounties',
                href: 'https://github.com/NillionNetwork/builder-bounties',
              },
              {
                type: 'link',
                label: 'Report a Bug',
                href: 'https://github.com/orgs/NillionNetwork/discussions/categories/bugs',
              },
            ],
          },
          {
            title: 'More',
            items: [
              {
                type: 'link',
                label: 'Website',
                href: 'https://nillion.com',
              },
              {
                type: 'link',
                label: 'Blog',
                href: 'https://nillion.com/news',
              },
            ],
          },
        ],
        copyright: `${new Date().getFullYear()} Nillion. All Rights Reserved.`,
      },
    }),
  plugins: [
    [
      'docusaurus-pushfeedback',
      {
        project: '0zdbombk5w',
        modalTitle: 'Nillion Docs Feedback',
        messagePlaceholder:
          'Let us know how we can improve this page of the Nillion docs.',
        hideEmail: true,
        sendButtonText: 'Send to the Nillion team',
        buttonStyle: 'dark',
        hideScreenshotButton: true,
      },
    ],
    [
      'docusaurus-plugin-openapi-docs',
      {
        id: 'api',
        docsPluginId: 'classic',
        config: {
          nildbapi: {
            specPath: 'apispec/nildb/nildb-combined.yaml',
            outputDir: 'docs/api/nildb',
            sidebarOptions: { groupPathsBy: 'tag' },
          },
          nilaiapi: {
            specPath: 'apispec/nilai-api.yaml',
            outputDir: 'docs/api/nilai',
            sidebarOptions: { groupPathsBy: 'tag' },
          },
        },
      },
    ],
    [
      '@docusaurus/plugin-client-redirects',
      {
        redirects: [
          {
            to: '/build/private-llms/quickstart',
            from: '/build/secretLLM/quickstart',
          },
          {
            to: '/build/private-storage/quickstart',
            from: '/build/secret-vault-quickstart',
          },
          {
            to: '/build/private-storage/overview',
            from: [
              '/build/secret-vault',
              '/build/secretVault-secretDataAnalytics/build',
              '/build/secretVault-secretDataAnalytics/create-schema',
              '/build/secretVault-secretDataAnalytics/upload',
              '/build/secretVault-secretDataAnalytics/retrive',
              '/build/secretVault-secretDataAnalytics/create-query',
              '/build/secretVault-secretDataAnalytics/query',
            ],
          },
          {
            to: '/build/private-llms/overview',
            from: ['/build/secretLLM/overview', '/build/secretLLM/usage'],
          },
          {
            to: '/build/network-api-access',
            from: [
              '/build/permissions-and-payments/overview',
              '/build/secretVault-secretDataAnalytics/generate-tokens',
              '/build/secretVault-secretDataAnalytics/access',
              '/build/secretLLM/access',
              '/build/api-key',
            ],
          },
          {
            to: '/learn/blind-modules',
            from: '/build/blind-modules',
          },
          {
            to: '/learn/what-is-nillion',
            from: '/what-is-nillion',
          },
          {
            to: '/build/quickstart',
            from: '/quickstart',
          },
          {
            to: '/build/network-config',
            from: '/network',
          },
          {
            to: '/build/private-storage/secretvaults',
            from: '/build/secretvaults',
          },
          {
            to: '/build/private-storage/blindfold',
            from: '/build/blindfold',
          },
          {
            to: '/build/private-llms/nilRAG',
            from: '/build/nilRAG',
          },
          {
            to: '/community/community-and-support',
            from: '/community-and-support',
          },
          {
            to: '/community/guides/testnet',
            from: '/testnet-guides',
          },
          {
            to: '/community/guides/nillion-wallet',
            from: '/guide-nillion-wallet',
          },
          {
            to: '/community/guides/testnet-faucet',
            from: '/guide-testnet-faucet',
          },
          {
            to: '/community/guides/sending-nil',
            from: '/guide-sending-nil',
          },
        ],
      },
    ],
  ],
};

export default config;



================================================
FILE: LICENSE
================================================
MIT License

Copyright (c) 2024 Nillion

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: package.json
================================================
{
  "name": "nillion-docs",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "docusaurus": "docusaurus",
    "start": "docusaurus start",
    "build": "docusaurus build",
    "swizzle": "docusaurus swizzle",
    "deploy": "docusaurus deploy",
    "clear": "docusaurus clear",
    "serve": "docusaurus serve",
    "write-translations": "docusaurus write-translations",
    "write-heading-ids": "docusaurus write-heading-ids"
  },
  "dependencies": {
    "@cookbookdev/docsbot": "^4.17.4",
    "@docusaurus/core": "3.5.2",
    "@docusaurus/plugin-client-redirects": "3.5.2",
    "@docusaurus/preset-classic": "3.5.2",
    "@docusaurus/theme-mermaid": "3.5.2",
    "@docusaurus/theme-search-algolia": "3.5.2",
    "@mdx-js/react": "^3.0.0",
    "@reduxjs/toolkit": "^2.5.0",
    "ag-grid-react": "^32.0.1",
    "clsx": "^2.0.0",
    "docusaurus-plugin-openapi-docs": "4.2.0",
    "docusaurus-pushfeedback": "^1.0.1",
    "docusaurus-theme-github-codeblock": "^2.0.2",
    "docusaurus-theme-openapi-docs": "4.2.0",
    "dotenv": "^16.4.4",
    "prism-react-renderer": "^2.3.0",
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "react-redux": "^9.2.0",
    "ws": "^8.18.0"
  },
  "devDependencies": {
    "@docusaurus/module-type-aliases": "3.5.2",
    "@docusaurus/types": "3.5.2"
  },
  "browserslist": {
    "production": [
      ">0.5%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 3 chrome version",
      "last 3 firefox version",
      "last 5 safari version"
    ]
  },
  "engines": {
    "node": ">=18.0"
  },
  "resolutions": {
    "@docusaurus/core": "3.5.2",
    "@docusaurus/theme-common": "3.5.2",
    "docusaurus-theme-openapi-docs": "4.2.0"
  }
}



================================================
FILE: sidebar-api.js
================================================
module.exports = [
  {
    type: 'html',
    className: 'sidebar-title',
    value: 'API',
    defaultStyle: true,
  },
  'api/overview',
  {
    type: 'category',
    label: 'nilDB API',
    items: [
      'api/nildb/overview',
      'api/nildb/accounts',
      {
        type: 'category',
        label: 'Node',
        items: [
          'api/nildb/get-health-status', // Health
          'api/nildb/get-node-details', // Details
        ],
      },
      {
        type: 'category',
        label: 'Schemas',
        items: [
          'api/nildb/get-schemas', // List Schemas
          'api/nildb/add-schema', // Add Schema
          'api/nildb/delete-schema', // Delete Schema
        ],
      },
      {
        type: 'category',
        label: 'Data',
        items: [
          'api/nildb/upload-data', // Upload
          'api/nildb/read-data', // Read
          'api/nildb/list-new-data', // Tail
          'api/nildb/update-data', // Update
          'api/nildb/delete-data', // Detail
          'api/nildb/delete-all-data', // Flush
        ],
      },
      {
        type: 'category',
        label: 'Queries',
        items: [
          'api/nildb/get-queries', // List Query
          'api/nildb/execute-query', // Execute Query
          'api/nildb/add-query', // Add Query
          'api/nildb/delete-query', // Delete Query
        ],
      },
    ],
  },
  {
    type: 'category',
    label: 'nilAI API',
    items: [
      'api/nilai/overview',
      'api/nilai/chat-completion-v-1-chat-completions-post',
      'api/nilai/get-attestation-v-1-attestation-report-get',
      'api/nilai/get-models-v-1-models-get',
      'api/nilai/get-usage-v-1-usage-get',
      'api/nilai/health-check-v-1-health-get',
    ],
  },
];



================================================
FILE: sidebar-build.js
================================================
const buildSidebar = [
  {
    type: 'html',
    className: 'sidebar-title',
    value: 'Build',
    defaultStyle: true,
  },
  {
    type: 'doc',
    label: 'Start Building',
    id: 'build/quickstart',
  },
  'build/network-config',
  {
    type: 'doc',
    label: 'Network API Access',
    id: 'build/network-api-access',
  },
  {
    type: 'category',
    label: 'Private Storage',
    link: {
      type: 'doc',
      id: 'build/private-storage/overview',
    },

    items: [
      {
        type: 'doc',
        label: 'Quickstart',
        id: 'build/private-storage/quickstart',
      },
      {
        type: 'category',
        label: 'Secretvaults SDK',
        link: {
          type: 'doc',
          id: 'build/private-storage/secretvaults',
        },
        items: [
          {
            type: 'link',
            label: 'secretvaults-ts',
            href: 'https://github.com/NillionNetwork/secretvaults-ts',
          },
          // {
          //   type: 'link',
          //   label: 'secretvaults-py',
          //   href: 'https://github.com/NillionNetwork/secretvaults-py',
          // },
        ],
      },
      {
        type: 'category',
        label: 'Blindfold Library',
        link: {
          type: 'doc',
          id: 'build/private-storage/blindfold',
        },
        items: [
          {
            type: 'link',
            label: 'blindfold-ts',
            href: 'https://github.com/NillionNetwork/blindfold-ts',
          },
          {
            type: 'link',
            label: 'blindfold-py',
            href: 'https://github.com/NillionNetwork/blindfold-py',
          },
        ],
      },
      {
        type: 'doc',
        label: 'nilDB API',
        id: 'api/nildb/overview',
      },
    ],
  },
  {
    type: 'category',
    label: 'Private LLMs',
    link: {
      type: 'doc',
      id: 'build/private-llms/overview',
    },
    items: [
      'build/private-llms/quickstart',
      'build/private-llms/usage',
      {
        type: 'link',
        label: 'Examples',
        href: 'https://github.com/NillionNetwork/blind-module-examples/tree/main/nilai',
      },
      {
        type: 'category',
        label: 'nilRAG Library',
        link: {
          type: 'doc',
          id: 'build/private-llms/nilRAG',
        },
        items: [
          {
            type: 'link',
            label: 'nilrag-py',
            href: 'https://github.com/NillionNetwork/nilrag',
          },
          {
            type: 'link',
            label: 'Examples',
            href: 'https://github.com/NillionNetwork/nilrag/tree/main/examples',
          },
        ],
      },
      {
        type: 'doc',
        label: 'nilAI API',
        id: 'api/nilai/overview',
      },
    ],
  },
  {
    type: 'doc',
    label: 'Permissions and Payments',
    id: 'build/permissions-and-payments',
  },
  'build/ai-assisted-workflow/overview',
];

module.exports = {
  buildSidebar,
};



================================================
FILE: sidebar-community.js
================================================
const communitySidebar = [
  {
    type: 'html',
    className: 'sidebar-title',
    value: 'Community',
    defaultStyle: true,
  },
  'community/community-and-support',

  {
    type: 'category',
    label: 'nilChain Guides',
    items: [
      'community/guides/nillion-wallet',
      'community/guides/sending-nil',
      {
        type: 'category',
        label: 'Testnet Guides',
        link: {
          type: 'doc',
          id: 'community/guides/testnet',
        },
        items: ['community/guides/testnet-faucet'],
      },
    ],
  },
  {
    type: 'link',
    label: 'Tokenomics',
    href: 'https://nillion.com/news/blind-compute-needs-its-first-champion/',
  },
  {
    type: 'link',
    label: 'Nucleus Builders Program',
    href: 'https://nucleus.nillion.com/',
  },
  {
    type: 'link',
    label: 'Nillion App Gallery',
    href: 'https://mini-app.nillion.com/',
  },
  {
    type: 'link',
    label: 'Status Page',
    href: 'https://status.nillion.com/',
  },
];

module.exports = {
  communitySidebar,
};



================================================
FILE: sidebar-learn.js
================================================
const learnSidebar = [
  {
    type: 'html',
    className: 'sidebar-title',
    value: 'Learn',
    defaultStyle: true,
  },
  'learn/what-is-nillion',
  'learn/use-cases',
  'learn/architecture',
  'learn/blind-modules',
  'learn/protocols',
];

module.exports = {
  learnSidebar,
};



================================================
FILE: sidebars.js
================================================
const apiSidebar = require('./sidebar-api');
const { learnSidebar } = require('./sidebar-learn');
const { buildSidebar } = require('./sidebar-build');
const { communitySidebar } = require('./sidebar-community');

/** @type {import('@docusaurus/plugin-content-docs').SidebarsConfig} */
const sidebars = {
  nillionSidebar: [...learnSidebar, ...buildSidebar, ...communitySidebar],
  apiSidebar: apiSidebar,
};

export default sidebars;



================================================
FILE: vercel.json
================================================
{
  "cleanUrls": true
}



================================================
FILE: apispec/nilai-api.yaml
================================================
---
openapi: 3.1.0
info:
  title: NilAI
  description: |2

    An AI model serving platform powered by secure, confidential computing.

    ## Easy API Client Generation

    Want to use our API in your project? Great news! You can automatically generate a client library in just a few simple steps.

    ### For Python Developers
    ```bash
    # Install the OpenAPI generator
    pip install openapi-generator-cli

    # Generate your Python client
    openapi-generator-cli generate -i https://nilai.sandbox.nilogy.xyz/openapi.json -g python -o ./python-client
    ```

    ### For JavaScript/TypeScript Developers
    ```bash
    # Install the OpenAPI generator
    npm install @openapitools/openapi-generator-cli -g

    # Generate your TypeScript client
    openapi-generator-cli generate -i https://nilai.sandbox.nilogy.xyz/openapi.json -o ./typescript-client
    ```

    After generating, you'll have a fully functional client library that makes it easy to interact with our AI services. No more manual API request handling!
  termsOfService: https://nillion.com
  contact:
    name: Nillion AI Support
    email: jose.cabrero@nillion.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  version: 0.1.0

servers:
  - url: https://nilai-a779.nillion.network
    description: Sandbox environment

paths:
  '/v1/health':
    get:
      tags:
        - Health
      summary: Health
      description: |-
        Perform a system health check.

        - **Returns**: Current system health status and uptime

        ### Health Check Details
        - Provides a quick verification of system operational status
        - Reports current system uptime

        ### Status Indicators
        - `status`: Indicates system operational condition
          - `"ok"`: System is functioning normally
        - `uptime`: Duration the system has been running

        ### Example
        ```python
        # Retrieve system health status
        health = await health_check()
        # Expect: HealthCheckResponse(status='ok', uptime=3600)
        ```
      operationId: health_check_v1_health_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/HealthCheckResponse'
  '/v1/usage':
    get:
      tags:
        - Usage
      summary: Usage
      description: |-

        :::info
            Feel free to use the `Nillion2025` as a test Bearer Token
        :::

        Retrieve the current token usage for the authenticated user.

        - **user**: Authenticated user information (through HTTP Bearer header)
        - **Returns**: Usage statistics for the user's token consumption

        ### Example
        ```python
        # Retrieves token usage for the logged-in user
        usage = await get_usage(user)
        ```
      operationId: get_usage_v1_usage_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/CompletionUsage'
      security:
        - HTTPBearer: []
  '/v1/attestation/report':
    get:
      tags:
        - Attestation
      summary: Attestation
      description: |-

        :::info
            Feel free to use the `Nillion2025` as a test Bearer Token
        :::

        Generate a cryptographic attestation report.

        - **user**: Authenticated user information (through HTTP Bearer header)
        - **Returns**: Attestation details for service verification

        ### Attestation Details
        - `verifying_key`: Public key for cryptographic verification
        - `cpu_attestation`: CPU environment verification
        - `gpu_attestation`: GPU environment verification

        ### Security Note
        Provides cryptographic proof of the service's integrity and environment.
      operationId: get_attestation_v1_attestation_report_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/AttestationResponse'
      security:
        - HTTPBearer: []
  '/v1/models':
    get:
      tags:
        - Model
      summary: Models
      description: |-

        :::info
            Feel free to use the `Nillion2025` as a test Bearer Token
        :::

        List all available models in the system.

        - **user**: Authenticated user information (through HTTP Bearer header)
        - **Returns**: Dictionary of available models

        ### Example
        ```python
        # Retrieves list of available models
        models = await get_models(user)
        ```
      operationId: get_models_v1_models_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                items:
                  '$ref': '#/components/schemas/ModelMetadata'
                type: array
                title: Response Get Models V1 Models Get
      security:
        - HTTPBearer: []
  '/v1/chat/completions':
    post:
      tags:
        - Chat
      summary: Chat Completion
      description: |-

        :::info
            Feel free to use the `Nillion2025` as a test Bearer Token
        :::

        Generate a chat completion response from the AI model.

        - **req**: Chat completion request containing messages and model specifications
        - **user**: Authenticated user information (through HTTP Bearer header)
        - **Returns**: Full chat response with model output, usage statistics, and cryptographic signature

        ### Request Requirements
        - Must include non-empty list of messages
        - Must specify a model
        - Supports multiple message formats (system, user, assistant)

        ### Response Components
        - Model-generated text completion
        - Token usage metrics
        - Cryptographically signed response for verification

        ### Processing Steps
        1. Validate input request parameters
        2. Prepare messages for model processing
        3. Generate AI model response
        4. Track and update token usage
        5. Cryptographically sign the response

        ### Potential HTTP Errors
        - **400 Bad Request**:
          - Missing messages list
          - No model specified
        - **500 Internal Server Error**:
          - Model fails to generate a response
      operationId: chat_completion_v1_chat_completions_post
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ChatRequest'
                - example:
                    model: 'meta-llama/Llama-3.1-8B-Instruct'
                    messages:
                      [
                        {
                          role: 'system',
                          content: 'You are a helpful assistant',
                        },
                        { role: 'user', content: 'What is your name?' },
                      ]
                    temperature: 0.2
                    top_p: 0.95
                    max_tokens: 2048
                    stream: false
                    nilrag: {}
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
components:
  schemas:
    AttestationResponse:
      properties:
        verifying_key:
          type: string
          title: Verifying Key
        cpu_attestation:
          type: string
          title: Cpu Attestation
        gpu_attestation:
          type: string
          title: Gpu Attestation
      type: object
      required:
        - verifying_key
        - cpu_attestation
        - gpu_attestation
      title: AttestationResponse
    ChatCompletionAudio:
      properties:
        id:
          type: string
          title: Id
        data:
          type: string
          title: Data
        expires_at:
          type: integer
          title: Expires At
        transcript:
          type: string
          title: Transcript
      additionalProperties: true
      type: object
      required:
        - id
        - data
        - expires_at
        - transcript
      title: ChatCompletionAudio
    ChatCompletionMessageToolCall:
      properties:
        id:
          type: string
          title: Id
        function:
          '$ref': '#/components/schemas/Function'
        type:
          type: string
          const: function
          title: Type
      additionalProperties: true
      type: object
      required:
        - id
        - function
        - type
      title: ChatCompletionMessageToolCall
    ChatRequest:
      properties:
        model:
          type: string
          title: Model
        messages:
          items:
            '$ref': '#/components/schemas/Message'
          type: array
          title: Messages
        temperature:
          anyOf:
            - type: number
            - type: 'null'
          title: Temperature
          default: 0.2
        top_p:
          anyOf:
            - type: number
            - type: 'null'
          title: Top P
          default: 0.95
        max_tokens:
          anyOf:
            - type: integer
            - type: 'null'
          title: Max Tokens
          default: 2048
        stream:
          anyOf:
            - type: boolean
            - type: 'null'
          title: Stream
          default: false
        nilrag:
          anyOf:
            - type: object
            - type: 'null'
          title: Nilrag
          default: {}
      type: object
      required:
        - model
        - messages
      title: ChatRequest
    CompletionTokensDetails:
      properties:
        accepted_prediction_tokens:
          anyOf:
            - type: integer
            - type: 'null'
          title: Accepted Prediction Tokens
        audio_tokens:
          anyOf:
            - type: integer
            - type: 'null'
          title: Audio Tokens
        reasoning_tokens:
          anyOf:
            - type: integer
            - type: 'null'
          title: Reasoning Tokens
        rejected_prediction_tokens:
          anyOf:
            - type: integer
            - type: 'null'
          title: Rejected Prediction Tokens
      additionalProperties: true
      type: object
      title: CompletionTokensDetails
    CompletionUsage:
      properties:
        completion_tokens:
          type: integer
          title: Completion Tokens
        prompt_tokens:
          type: integer
          title: Prompt Tokens
        total_tokens:
          type: integer
          title: Total Tokens
        completion_tokens_details:
          anyOf:
            - '$ref': '#/components/schemas/CompletionTokensDetails'
            - type: 'null'
        prompt_tokens_details:
          anyOf:
            - '$ref': '#/components/schemas/PromptTokensDetails'
            - type: 'null'
      additionalProperties: true
      type: object
      required:
        - completion_tokens
        - prompt_tokens
        - total_tokens
      title: CompletionUsage
    Function:
      properties:
        arguments:
          type: string
          title: Arguments
        name:
          type: string
          title: Name
      additionalProperties: true
      type: object
      required:
        - arguments
        - name
      title: Function
    FunctionCall:
      properties:
        arguments:
          type: string
          title: Arguments
        name:
          type: string
          title: Name
      additionalProperties: true
      type: object
      required:
        - arguments
        - name
      title: FunctionCall
    HTTPValidationError:
      properties:
        detail:
          items:
            '$ref': '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    HealthCheckResponse:
      properties:
        status:
          type: string
          title: Status
        uptime:
          type: string
          title: Uptime
      type: object
      required:
        - status
        - uptime
      title: HealthCheckResponse
    Message:
      properties:
        content:
          anyOf:
            - type: string
            - type: 'null'
          title: Content
        refusal:
          anyOf:
            - type: string
            - type: 'null'
          title: Refusal
        role:
          type: string
          enum:
            - system
            - user
            - assistant
          title: Role
        audio:
          anyOf:
            - '$ref': '#/components/schemas/ChatCompletionAudio'
            - type: 'null'
        function_call:
          anyOf:
            - '$ref': '#/components/schemas/FunctionCall'
            - type: 'null'
        tool_calls:
          anyOf:
            - items:
                '$ref': '#/components/schemas/ChatCompletionMessageToolCall'
              type: array
            - type: 'null'
          title: Tool Calls
      additionalProperties: true
      type: object
      required:
        - role
      title: Message
    ModelMetadata:
      properties:
        id:
          type: string
          title: Id
        name:
          type: string
          title: Name
        version:
          type: string
          title: Version
        description:
          type: string
          title: Description
        author:
          type: string
          title: Author
        license:
          type: string
          title: License
        source:
          type: string
          title: Source
        supported_features:
          items:
            type: string
          type: array
          title: Supported Features
      type: object
      required:
        - name
        - version
        - description
        - author
        - license
        - source
        - supported_features
      title: ModelMetadata
    PromptTokensDetails:
      properties:
        audio_tokens:
          anyOf:
            - type: integer
            - type: 'null'
          title: Audio Tokens
        cached_tokens:
          anyOf:
            - type: integer
            - type: 'null'
          title: Cached Tokens
      additionalProperties: true
      type: object
      title: PromptTokensDetails
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError
  securitySchemes:
    HTTPBearer:
      type: http
      scheme: bearer
tags:
  - name: Attestation
    description: Retrieve cryptographic attestation information for service verification
  - name: Chat
    description: AI-powered chat completion endpoint for generating conversational responses
  - name: Health
    description: System health and status monitoring endpoint
  - name: Model
    description: Retrieve information about available AI models
  - name: Usage
    description: Track and retrieve user token consumption metrics



================================================
FILE: apispec/nildb-api.yaml
================================================
openapi: 3.0.0
info:
  title: nilDB API
  version: 0.4.0
  description: |
    Visit [docs.nillion.com](https://docs.nillion.com) and [github.com/NillionNetwork/nildb](https://github.com/NillionNetwork/nildb) to learn more.

servers:
  - url: https://nildb-demo.nillion.network

tags:
  - name: Accounts
  - name: Data
  - name: Query
  - name: Schema
  - name: System

components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        A DID-JWT using the ES256K algorithm for authenticated endpoints.
        JWT payload must include:
        - iat: Issued at timestamp
        - exp: Expiration timestamp (recommended)
        - aud: Target node decentralised identifier (DID)
        - iss: Client's decentralised identifier (DID)
  schemas:
    Error:
      type: object
      required:
        - ts
        - errors
      properties:
        ts:
          type: string
          format: date-time
          description: The time of the error according to the node.
        errors:
          description: List of error messages
          type: array
          items:
            anyOf:
              - type: string
              - type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string

    UUID:
      description: A universally unique identifier for the item.
      type: string
      format: uuid

    Filter:
      type: object
      description: An object representing filter criteria for queries.
      additionalProperties:
        type: object
        description: A flexible object allowing any key-value pairs, where values can be of any type.

    DocumentBase:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/UUID'
        _created:
          type: string
          format: date-time
          description: The creation timestamp.
        _updated:
          type: string
          format: date-time
          description: The last update timestamp.
      required:
        - _id
        - _created
        - _updated

    Account:
      type: object
      required:
        - _id
        - _type
        - _created
        - _updated
        - publicKey
        - name
        - schemas
        - queries
      properties:
        _id:
          description: The accounts decentralised identifier (DID)
          type: string
          example: 'did:nil:testnet:nillion1eunreuzltxglx9fx493l2r8ef6rdlrau4dsdnc'
        _type:
          type: string
          enum: ['admin', 'organization']
        _created:
          type: string
          format: date-time
        _updated:
          type: string
          format: date-time
        publicKey:
          type: string
        name:
          type: string
        schemas:
          description: A list of schema ids that belong to this account
          type: array
          items:
            $ref: '#/components/schemas/UUID'
        queries:
          description: A list of query ids that belong to this account
          type: array
          items:
            $ref: '#/components/schemas/UUID'

    Schema:
      allOf:
        - $ref: '#/components/schemas/DocumentBase'
        - type: object
          required:
            - name
            - owner
            - keys
            - schema
          properties:
            name:
              description: A user friendly schema name
              type: string
            owner:
              description: The decentralised identifier (DID) of the owning organization
              type: string
              example: 'did:nil:testnet:nillion1eunreuzltxglx9fx493l2r8ef6rdlrau4dsdnc'
            keys:
              description: The schema's keys which must be unique within the associated schema collection (e.g. primary keys)
              type: array
              items:
                type: string
            schema:
              description: The json schema used to validate data before insertion into the schema collection
              type: object
    Query:
      allOf:
        - $ref: '#/components/schemas/DocumentBase'
        - type: object
          required:
            - name
            - owner
            - schema
            - variables
          properties:
            name:
              description: A user friendly query name
              type: string
            owner:
              description: The decentralised identifier (DID) of the owning organization
              type: string
              example: 'did:nil:testnet:nillion1eunreuzltxglx9fx493l2r8ef6rdlrau4dsdnc'
            schema:
              description: The starting schema collection for this query's aggregation pipeline
              type: string
              format: uuid
            variables:
              description: The query's required runtime variables
              type: object
              additionalProperties:
                oneOf:
                  - $ref: '#/components/schemas/QueryVariable'
                  - $ref: '#/components/schemas/QueryArrayVariable'
            pipeline:
              description: An query's execution pipeline defined as an array of objects
              type: array
              items:
                type: object

    QueryVariable:
      type: object
      required:
        - type
        - description
      properties:
        type:
          type: string
          enum: ['string', 'number', 'boolean', 'date']
        description:
          type: string

    QueryArrayVariable:
      type: object
      required:
        - type
        - description
        - items
      properties:
        type:
          type: string
          enum: ['array']
        description:
          type: string
        items:
          type: object
          required:
            - type
          properties:
            type:
              type: string
              enum: ['string', 'number', 'boolean', 'date']

    DataDocument:
      allOf:
        - $ref: '#/components/schemas/DocumentBase'
        - type: object
          additionalProperties: true
          description: The document's additional properties. Schema dependent.

paths:
  /api/v1/accounts:
    get:
      summary: Retrieve an organization's account details
      security:
        - jwt: []
      tags:
        - Accounts
      responses:
        '200':
          description: "The organization's account details"
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Account'
        '401':
          description: Missing or invalid JWT
        '400':
          description: Validation or processing errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/schemas:
    get:
      summary: List the organization's schemas
      security:
        - jwt: []
      tags:
        - Data
      responses:
        '200':
          description: "The organization's schemas"
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Schema'

        '400':
          description: Validation or processing errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Missing or invalid JWT

    post:
      summary: Add a new schema
      security:
        - jwt: []
      tags:
        - Data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - _id
                - name
                - keys
                - schema
              properties:
                _id:
                  $ref: '#/components/schemas/UUID'
                name:
                  type: string
                  minLength: 1
                keys:
                  type: array
                  items:
                    type: string
                schema:
                  type: object
                  additionalProperties: true
      responses:
        '200':
          description: Schema created successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/UUID'
        '400':
          description: Validation or processing errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Missing or invalid JWT

    delete:
      summary: Delete a schema
      security:
        - jwt: []
      tags:
        - Data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: Schema deleted successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/UUID'
        '400':
          description: Validation or processing errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Missing or invalid JWT

  /api/v1/queries:
    get:
      summary: "List the organization's queries"
      security:
        - jwt: []
      tags:
        - Query
      responses:
        '200':
          description: "The account's queries"
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Query'
        '400':
          description: Validation or processing errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Missing or invalid JWT

    post:
      summary: Add a new query
      security:
        - jwt: []
      tags:
        - Query
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - _id
                - name
                - schema
                - variables
                - pipeline
              properties:
                _id:
                  $ref: '#/components/schemas/UUID'
                name:
                  type: string
                schema:
                  $ref: '#/components/schemas/UUID'
                variables:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/QueryVariable'
                pipeline:
                  type: array
                  items:
                    type: object
                    additionalProperties: true
      responses:
        '200':
          description: Query created successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/UUID'
        '400':
          description: Validation or processing errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Missing or invalid JWT

    delete:
      summary: Delete a query
      security:
        - jwt: []
      tags:
        - Query
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: Query deleted successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: boolean
        '400':
          description: Validation or processing errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Missing or invalid JWT
        '403':
          description: Insufficient permissions or query ownership

  /api/v1/data/create:
    post:
      summary: Upload data to the specified schema collection
      security:
        - jwt: []
      tags:
        - Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - schema
                - data
              properties:
                schema:
                  description: The schema's uuid used to validate data
                  type: string
                  format: uuid
                data:
                  type: array
                  items:
                    type: object
                    additionalProperties:
                      description: An object whose shape matches the targeted schema. `_id` and schema `keys` are required.
                      type: object
      responses:
        '200':
          description: The outcome of the data upload operation. The operation can be partially successful.
          content:
            application/json:
              schema:
                type: object
                required:
                  - created
                  - errors
                properties:
                  created:
                    description: The uuids from successfully created documents
                    type: array
                    items:
                      $ref: '#/components/schemas/UUID'
                  errors:
                    type: array
                    items:
                      type: object
                      required:
                        - error
                        - document
                      properties:
                        error:
                          type: string
                        document:
                          type: object

        '400':
          description: Validation or processing errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Missing or invalid JWT

  /api/v1/data/read:
    post:
      summary: Retrieve data from the specified schema collection that matches the provided filter
      security:
        - jwt: []
      tags:
        - Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - schema
                - filter
              properties:
                schema:
                  $ref: '#/components/schemas/UUID'
                filter:
                  $ref: '#/components/schemas/Filter'
      responses:
        '200':
          description: Data documents that match the provided filter. Pagination is not supported.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataDocument'
        '400':
          description: Validation or processing errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Missing or invalid JWT

  /api/v1/data/update:
    post:
      summary: Update documents within a schema collection that match the given filter
      security:
        - jwt: []
      tags:
        - Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - schema
                - filter
                - update
              properties:
                schema:
                  $ref: '#/components/schemas/UUID'
                filter:
                  $ref: '#/components/schemas/Filter'
                update:
                  additionalProperties:
                    type: object
                    description: A flexible object allowing any key-value pairs, where values can be of any type.
      responses:
        '200':
          description: The result of the update operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: object
                    required:
                      - matched
                      - updated
                    properties:
                      matched:
                        type: number
                      updated:
                        type: number
        '400':
          description: Validation or processing errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Missing or invalid JWT

  /api/v1/data/tail:
    post:
      summary: Retrieve recently added documents from a schema collection
      security:
        - jwt: []
      tags:
        - Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - schema
              properties:
                schema:
                  $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: The last 25 latest documents added to the schema collection
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataDocument'
        '400':
          description: Validation or processing errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Missing or invalid JWT

  /api/v1/data/delete:
    post:
      summary: Delete data records that match a given filter
      security:
        - jwt: []
      tags:
        - Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                schema:
                  $ref: '#/components/schemas/UUID'
                filter:
                  $ref: '#/components/schemas/Filter'
      responses:
        '200':
          description: The number of documents removed
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: number
        '400':
          description: Validation or processing errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Missing or invalid JWT

  /api/v1/data/flush:
    post:
      summary: Remove all documents in a schema collection
      security:
        - jwt: []
      tags:
        - Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  properties:
                    schema:
                      $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: The total documents removed
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: number
        '400':
          description: Validation or processing errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Missing or invalid JWT

  /health:
    get:
      summary: Returns 200 OK if the service is healthy
      operationId: getHealthStatus
      tags:
        - System
      responses:
        '200':
          description: Service is healthy
          content:
            text/plain:
              schema:
                type: string
                example: 'OK'

  /about:
    get:
      summary: Returns information about the node including its DID, public key and build details
      operationId: getNodeDetails
      tags:
        - System
      responses:
        '200':
          description: Successful response with node details
          content:
            application/json:
              schema:
                type: object
                required:
                  - started
                  - build
                  - did
                  - publicKey
                  - url
                properties:
                  started:
                    type: string
                    format: date-time
                    description: Timestamp when the node was started
                    example: '2024-12-16T09:38:04.095Z'
                  build:
                    type: object
                    required:
                      - time
                      - commit
                      - version
                    properties:
                      time:
                        type: string
                        format: date-time
                        description: Build timestamp
                        example: '2024-12-24T23:59:59Z'
                      commit:
                        type: string
                        description: Git commit hash or identifier
                        example: c0401ee26ece3f7155fd788848baf122cdd702ed
                      version:
                        type: string
                        description: Node's api version
                        example: 0.2.2
                  did:
                    type: string
                    description: Decentralized Identifier (DID) of the node
                    example: 'did:nil:testnet:nillion1eunreuzltxglx9fx493l2r8ef6rdlrau4dsdnc'
                  publicKey:
                    type: string
                    description: Public key of the node
                    example: 02d1f198df9a64ffa27c293861bace8c80bd6b1e150e008267f7f94eae9e6c380c
                  url:
                    type: string
                    format: uri
                    description: URL where the node can be reached
                    example: 'https://nildb-demo.nillion.network'



================================================
FILE: apispec/nildb/accounts.openapi.yaml
================================================
# components:
#   schemas:
#     Account:
#       type: object
#       required:
#         - _id
#         - _type
#         - _created
#         - _updated
#         - publicKey
#         - name
#         - schemas
#         - queries
#       properties:
#         _id:
#           description: The accounts decentralised identifier (DID)
#           type: string
#           example: 'did:nil:testnet:nillion1eunreuzltxglx9fx493l2r8ef6rdlrau4dsdnc'
#         _type:
#           type: string
#           enum: ['admin', 'organization']
#         _created:
#           type: string
#           format: date-time
#         _updated:
#           type: string
#           format: date-time
#         publicKey:
#           type: string
#         name:
#           type: string
#         schemas:
#           description: A list of schema ids that belong to this account
#           type: array
#           items:
#             $ref: './base.openapi.yaml#/components/schemas/UUID'
#         queries:
#           description: A list of query ids that belong to this account
#           type: array
#           items:
#             $ref: './base.openapi.yaml#/components/schemas/UUID'

# paths:
#   /api/v1/accounts:
#     get:
#       summary: Get account information
#       description: Retrieve an organization's account details
#       tags:
#         - Accounts
#       security:
#         - jwt: []
#       responses:
#         '200':
#           description: "The organization's account details"
#           content:
#             application/json:
#               schema:
#                 type: object
#                 required:
#                   - data
#                 properties:
#                   data:
#                     $ref: '#/components/schemas/Account'
#         '400':
#           $ref: './base.openapi.yaml#/components/responses/400'
#         '401':
#           $ref: './base.openapi.yaml#/components/responses/401'
#         '500':
#           $ref: './base.openapi.yaml#/components/responses/500'

openapi: 3.0.0
info:
  title: nilDB API - Accounts
  version: 0.5.0
  description: Account management for nilDB API
servers:
  - url: https://nildb-demo.nillion.network/api/v1/
tags:
  - name: Accounts
    description: Account operations

components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        A DID-JWT using the ES256K algorithm for authenticated endpoints.
  schemas:
    UUID:
      description: A universally unique identifier
      type: string
      format: uuid
    Account:
      type: object
      required:
        - _id
        - _type
        - _created
        - _updated
        - publicKey
        - name
        - schemas
        - queries
      properties:
        _id:
          description: The accounts decentralised identifier (DID)
          type: string
          example: 'did:nil:testnet:nillion1eunreuzltxglx9fx493l2r8ef6rdlrau4dsdnc'
        _type:
          type: string
          enum: ['admin', 'organization']
        _created:
          type: string
          format: date-time
        _updated:
          type: string
          format: date-time
        publicKey:
          type: string
        name:
          type: string
        schemas:
          description: A list of schema ids that belong to this account
          type: array
          items:
            $ref: '#/components/schemas/UUID'
        queries:
          description: A list of query ids that belong to this account
          type: array
          items:
            $ref: '#/components/schemas/UUID'
  responses:
    '400':
      description: Validation or processing errors
      content:
        application/json:
          schema:
            type: object
            properties:
              ts:
                type: string
                format: date-time
              errors:
                type: array
                items:
                  oneOf:
                    - type: string
                    - type: object
                      properties:
                        code:
                          type: string
                        message:
                          type: string
    '401':
      description: Missing or invalid JWT
    '500':
      description: Internal server error

paths:
  /api/v1/accounts:
    get:
      summary: Get account information
      description: Retrieve an organization's account details
      tags:
        - Accounts
      security:
        - jwt: []
      responses:
        '200':
          description: "The organization's account details"
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'



================================================
FILE: apispec/nildb/base.openapi.yaml
================================================
openapi: 3.0.0
info:
  title: nilDB API
  version: 0.5.0
  description: |
    Visit [docs.nillion.com](https://docs.nillion.com) and [github.com/NillionNetwork/nildb](https://github.com/NillionNetwork/nildb) to learn more.

servers:
  - url: /

tags:
  - name: Accounts
    description: Account details
  - name: Data
    description: Create, read, update and delete data for specified schemas
  - name: Query
    description: Manage and execute queries
  - name: Schema
    description: Manage your schemas
  - name: Node
    description: Node information
  - name: Beta
    description: Features under incubation

components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        A DID-JWT using the ES256K algorithm for authenticated endpoints.
        JWT payload must include:
        - iat: Issued at timestamp
        - exp: Expiration timestamp (recommended)
        - aud: Target node decentralised identifier (DID)
        - iss: Client's decentralised identifier (DID)
  schemas:
    UUID:
      description: A universally unique identifier for the item.
      type: string
      format: uuid
    Filter:
      type: object
      minProperties: 1
      additionalProperties: true
      description: MongoDB-style query filter
    DocumentBase:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/UUID'
        _created:
          type: string
          format: date-time
          description: The creation timestamp.
        _updated:
          type: string
          format: date-time
          description: The last update timestamp.
      required:
        - _id
        - _created
        - _updated
    Schema:
      allOf:
        - $ref: '#/components/schemas/DocumentBase'
        - type: object
          required:
            - name
            - owner
            - schema
          properties:
            name:
              description: A user friendly schema name
              type: string
            owner:
              description: The decentralised identifier (DID) of the owning organization
              type: string
              example: 'did:nil:testnet:nillion1eunreuzltxglx9fx493l2r8ef6rdlrau4dsdnc'
            schema:
              description: The json schema used to validate data before insertion into the schema collection
              type: object

    DataDocument:
      allOf:
        - $ref: '#/components/schemas/DocumentBase'
        - type: object
          additionalProperties: true
          description: The document's additional properties. Schema dependent.

    Error:
      type: object
      required:
        - ts
        - errors
      properties:
        ts:
          type: string
          format: date-time
          description: The error's timestamp.
        errors:
          description: A list of error messages
          type: array
          items:
            anyOf:
              - type: string
              - type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
  responses:
    201:
      description: Resource created
    204:
      description: Resource deleted
    400:
      description: Validation or processing errors
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    401:
      description: Missing or invalid JWT
    404:
      description: Resource not found
    500:
      description: Internal server error

paths:
  # Account endpoints
  /api/v1/accounts:
    $ref: './accounts.openapi.yaml#/paths/~1api~1v1~1accounts'

  # # Schema endpoints
  # /api/v1/schemas:
  #   $ref: './schemas.openapi.yaml#/paths/~1api~1v1~1schemas'

  # # Query endpoints
  # /api/v1/queries:
  #   $ref: './queries.openapi.yaml#/paths/~1api~1v1~1queries'
  # /api/v1/queries/execute:
  #   $ref: './queries.openapi.yaml#/paths/~1api~1v1~1queries~1execute'

  # # Data endpoints
  # /api/v1/data/create:
  #   $ref: './data.openapi.yaml#/paths/~1api~1v1~1data~1create'
  # /api/v1/data/read:
  #   $ref: './data.openapi.yaml#/paths/~1api~1v1~1data~1read'
  # /api/v1/data/update:
  #   $ref: './data.openapi.yaml#/paths/~1api~1v1~1data~1update'
  # /api/v1/data/tail:
  #   $ref: './data.openapi.yaml#/paths/~1api~1v1~1data~1tail'
  # /api/v1/data/delete:
  #   $ref: './data.openapi.yaml#/paths/~1api~1v1~1data~1delete'
  # /api/v1/data/flush:
  #   $ref: './data.openapi.yaml#/paths/~1api~1v1~1data~1flush'

  # # System endpoints
  # /health:
  #   $ref: './system.openapi.yaml#/paths/~1health'
  # /about:
  #   $ref: './system.openapi.yaml#/paths/~1about'



================================================
FILE: apispec/nildb/data.openapi.yaml
================================================
paths:
  /api/v1/data/create:
    post:
      summary: Upload data
      description: Upload data to the specified schema collection
      security:
        - jwt: []
      tags:
        - Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - schema
                - data
              properties:
                schema:
                  description: The schema's uuid used to validate data
                  type: string
                  format: uuid
                data:
                  type: array
                  items:
                    type: object
                    additionalProperties:
                      description: An object whose shape matches the targeted schema.
                      type: object
      responses:
        '200':
          description: The outcome of the data upload operation. The operation can be partially successful.
          content:
            application/json:
              schema:
                type: object
                required:
                  - created
                  - errors
                properties:
                  created:
                    description: The uuids from successfully created documents
                    type: array
                    items:
                      $ref: '../docs/base.openapi.yaml#/components/schemas/UUID'
                  errors:
                    type: array
                    items:
                      type: object
                      required:
                        - error
                        - document
                      properties:
                        error:
                          type: string
                        document:
                          type: object
        '400':
          $ref: '../docs/base.openapi.yaml#/components/responses/400'
        '401':
          $ref: '../docs/base.openapi.yaml#/components/responses/401'
        '500':
          $ref: '../docs/base.openapi.yaml#/components/responses/500'
  /api/v1/data/read:
    post:
      summary: Read data
      description: Retrieve data from the specified schema collection that matches the provided filter
      security:
        - jwt: []
      tags:
        - Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - schema
                - filter
              properties:
                schema:
                  $ref: '../docs/base.openapi.yaml#/components/schemas/UUID'
                filter:
                  $ref: '../docs/base.openapi.yaml#/components/schemas/Filter'
      responses:
        '200':
          description: Data documents that match the provided filter. Pagination is not supported.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '../docs/base.openapi.yaml#/components/schemas/DataDocument'
        '400':
          $ref: '../docs/base.openapi.yaml#/components/responses/400'
        '401':
          $ref: '../docs/base.openapi.yaml#/components/responses/401'
        '500':
          $ref: '../docs/base.openapi.yaml#/components/responses/500'
  /api/v1/data/update:
    post:
      summary: Update data
      description: Update documents within a schema collection that match the given filter
      security:
        - jwt: []
      tags:
        - Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - schema
                - filter
                - update
              properties:
                schema:
                  $ref: '../docs/base.openapi.yaml#/components/schemas/UUID'
                filter:
                  $ref: '../docs/base.openapi.yaml#/components/schemas/Filter'
                update:
                  additionalProperties:
                    type: object
                    description: A flexible object allowing any key-value pairs, where values can be of any type.
      responses:
        '200':
          description: The result of the update operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: object
                    required:
                      - matchedCount
                      - modifiedCount
                    properties:
                      matched:
                        type: number
                      updated:
                        type: number
        '400':
          $ref: '../docs/base.openapi.yaml#/components/responses/400'
        '401':
          $ref: '../docs/base.openapi.yaml#/components/responses/401'
        '500':
          $ref: '../docs/base.openapi.yaml#/components/responses/500'
  /api/v1/data/tail:
    post:
      summary: List new data
      description: List recently added documents from a schema collection
      security:
        - jwt: []
      tags:
        - Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - schema
              properties:
                schema:
                  $ref: '../docs/base.openapi.yaml#/components/schemas/UUID'
      responses:
        '200':
          description: The last 25 latest documents added to the schema collection
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '../docs/base.openapi.yaml#/components/schemas/DataDocument'
        '400':
          $ref: '../docs/base.openapi.yaml#/components/responses/400'
        '401':
          $ref: '../docs/base.openapi.yaml#/components/responses/401'
        '500':
          $ref: '../docs/base.openapi.yaml#/components/responses/500'
  /api/v1/data/delete:
    post:
      summary: Delete data
      description: Delete data records that match a given filter
      security:
        - jwt: []
      tags:
        - Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                schema:
                  $ref: '../docs/base.openapi.yaml#/components/schemas/UUID'
                filter:
                  $ref: '../docs/base.openapi.yaml#/components/schemas/Filter'
      responses:
        '200':
          description: The result of the delete operations
          content:
            application/json:
              schema:
                type: object
                properties:
                  acknowledged:
                    type: boolean
                  deletedCount:
                    type: number
        '400':
          $ref: '../docs/base.openapi.yaml#/components/responses/400'
        '401':
          $ref: '../docs/base.openapi.yaml#/components/responses/401'
        '500':
          $ref: '../docs/base.openapi.yaml#/components/responses/500'
  /api/v1/data/flush:
    post:
      summary: Delete all data
      description: Remove all documents in a schema collection
      security:
        - jwt: []
      tags:
        - Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  properties:
                    schema:
                      $ref: '../docs/base.openapi.yaml#/components/schemas/UUID'
      responses:
        '200':
          description: The total documents removed
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: object
                    properties:
                      deletedCount:
                        type: number
        '400':
          $ref: '../docs/base.openapi.yaml#/components/responses/400'
        '401':
          $ref: '../docs/base.openapi.yaml#/components/responses/401'
        '500':
          $ref: '../docs/base.openapi.yaml#/components/responses/500'



================================================
FILE: apispec/nildb/nildb-combined.yaml
================================================
openapi: 3.0.0
info:
  title: nilDB API
  version: 0.4.0
  description: |
    Visit [docs.nillion.com](https://docs.nillion.com) and [github.com/NillionNetwork/nildb](https://github.com/NillionNetwork/nildb) to learn more.

servers:
  - url: https://nildb-demo.nillion.network

tags:
  - name: Accounts
    description: Account details
  - name: Data
    description: Create, read, update and delete data for specified schemas
  - name: Query
    description: Manage and execute queries
  - name: Schema
    description: Manage your schemas
  - name: Node
    description: Node information

components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        A DID-JWT using the ES256K algorithm for authenticated endpoints.
        JWT payload must include:
        - iat: Issued at timestamp
        - exp: Expiration timestamp (recommended)
        - aud: Target node decentralised identifier (DID)
        - iss: Client's decentralised identifier (DID)
  schemas:
    UUID:
      description: A universally unique identifier for the item.
      type: string
      format: uuid
    Filter:
      type: object
      minProperties: 1
      additionalProperties: true
      description: MongoDB-style query filter
    DocumentBase:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/UUID'
        _created:
          type: string
          format: date-time
          description: The creation timestamp.
        _updated:
          type: string
          format: date-time
          description: The last update timestamp.
      required:
        - _id
        - _created
        - _updated
    Schema:
      allOf:
        - $ref: '#/components/schemas/DocumentBase'
        - type: object
          required:
            - name
            - owner
            - schema
          properties:
            name:
              description: A user friendly schema name
              type: string
            owner:
              description: The decentralised identifier (DID) of the owning organization
              type: string
              example: did:nil:testnet:nillion1eunreuzltxglx9fx493l2r8ef6rdlrau4dsdnc
            schema:
              description: The json schema used to validate data before insertion into the schema collection
              type: object
    DataDocument:
      allOf:
        - $ref: '#/components/schemas/DocumentBase'
        - type: object
          additionalProperties: true
          description: The document's additional properties. Schema dependent.
    Error:
      type: object
      required:
        - ts
        - errors
      properties:
        ts:
          type: string
          format: date-time
          description: The error's timestamp.
        errors:
          description: A list of error messages
          type: array
          items:
            anyOf:
              - type: string
              - type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
    Account:
      type: object
      required:
        - _id
        - _type
        - _created
        - _updated
        - publicKey
        - name
        - schemas
        - queries
      properties:
        _id:
          description: The accounts decentralised identifier (DID)
          type: string
          example: 'did:nil:testnet:nillion1eunreuzltxglx9fx493l2r8ef6rdlrau4dsdnc'
        _type:
          type: string
          enum: ['admin', 'organization']
        _created:
          type: string
          format: date-time
        _updated:
          type: string
          format: date-time
        publicKey:
          type: string
        name:
          type: string
        schemas:
          description: A list of schema ids that belong to this account
          type: array
          items:
            $ref: '#/components/schemas/UUID'
        queries:
          description: A list of query ids that belong to this account
          type: array
          items:
            $ref: '#/components/schemas/UUID'
    AboutNode:
      type: object
      required:
        - started
        - build
        - did
        - publicKey
        - url
      properties:
        started:
          type: string
          format: date-time
          description: Timestamp when the node was started
          example: '2024-12-16T09:38:04.095Z'
        build:
          type: object
          required:
            - time
            - commit
            - version
          properties:
            time:
              type: string
              format: date-time
              description: Build timestamp
              example: '2024-12-24T23:59:59Z'
            commit:
              type: string
              description: Git commit hash or identifier
              example: c0401ee26ece3f7155fd788848baf122cdd702ed
            version:
              type: string
              description: Node's api version
              example: 0.4.0
        did:
          type: string
          description: Decentralized Identifier (DID) of the node
          example: 'did:nil:testnet:nillion1eunreuzltxglx9fx493l2r8ef6rdlrau4dsdnc'
        publicKey:
          type: string
          description: Public key of the node
          example: 02d1f198df9a64ffa27c293861bace8c80bd6b1e150e008267f7f94eae9e6c380c
        url:
          type: string
          format: uri
          description: URL where the node can be reached
          example: 'https://nildb-demo.nillion.network'
    Query:
      allOf:
        - $ref: '#/components/schemas/DocumentBase'
        - type: object
          required:
            - name
            - owner
            - schema
            - variables
          properties:
            name:
              description: A user friendly query name
              type: string
            owner:
              description: The decentralised identifier (DID) of the owning organization
              type: string
              example: 'did:nil:testnet:nillion1eunreuzltxglx9fx493l2r8ef6rdlrau4dsdnc'
            schema:
              description: The starting schema collection for this query's aggregation pipeline
              type: string
              format: uuid
            variables:
              description: The query's required runtime variables
              type: object
              additionalProperties:
                oneOf:
                  - $ref: '#/components/schemas/QueryVariable'
                  - $ref: '#/components/schemas/QueryArrayVariable'
            pipeline:
              description: An query's execution pipline defined as an array of objects
              type: array
              items:
                type: object
    QueryVariable:
      type: object
      required:
        - type
        - description
      properties:
        type:
          type: string
          enum: ['string', 'number', 'boolean', 'date']
        description:
          type: string
    QueryArrayVariable:
      type: object
      required:
        - type
        - description
        - items
      properties:
        type:
          type: string
          enum: ['array']
        description:
          type: string
        items:
          type: object
          required:
            - type
          properties:
            type:
              type: string
              enum: ['string', 'number', 'boolean', 'date']
  responses:
    '201':
      description: Resource created
    '204':
      description: Resource deleted
    '400':
      description: Validation or processing errors
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '401':
      description: Missing or invalid JWT
    '404':
      description: Resource not found
    '500':
      description: Internal server error

paths:
  /api/v1/accounts:
    get:
      summary: Accounts
      description: Retrieve an organization's account details
      tags:
        - Accounts
      security:
        - jwt: []
      responses:
        '200':
          description: "The organization's account details"
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'

  /health:
    get:
      summary: Health
      description: Returns 200 OK if the service is healthy
      operationId: getHealthStatus
      tags:
        - Node
      responses:
        '200':
          description: Service is healthy
  /about:
    get:
      summary: Node Details
      description: Returns information about the node including its DID, public key and build details
      operationId: getNodeDetails
      tags:
        - Node
      responses:
        '200':
          description: Details about the node
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AboutNode'
  /api/v1/data/create:
    post:
      summary: Upload data
      description: Upload data to the specified schema collection
      security:
        - jwt: []
      tags:
        - Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - schema
                - data
              properties:
                schema:
                  description: The schema's uuid used to validate data
                  type: string
                  format: uuid
                data:
                  type: array
                  items:
                    type: object
                    additionalProperties:
                      description: An object whose shape matches the targeted schema.
                      type: object
      responses:
        '200':
          description: The outcome of the data upload operation. The operation can be partially successful.
          content:
            application/json:
              schema:
                type: object
                required:
                  - created
                  - errors
                properties:
                  created:
                    description: The uuids from successfully created documents
                    type: array
                    items:
                      $ref: '#/components/schemas/UUID'
                  errors:
                    type: array
                    items:
                      type: object
                      required:
                        - error
                        - document
                      properties:
                        error:
                          type: string
                        document:
                          type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/read:
    post:
      summary: Read data
      description: Retrieve data from the specified schema collection that matches the provided filter
      security:
        - jwt: []
      tags:
        - Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - schema
                - filter
              properties:
                schema:
                  $ref: '#/components/schemas/UUID'
                filter:
                  $ref: '#/components/schemas/Filter'
      responses:
        '200':
          description: Data documents that match the provided filter. Pagination is not supported.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataDocument'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/update:
    post:
      summary: Update data
      description: Update documents within a schema collection that match the given filter
      security:
        - jwt: []
      tags:
        - Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - schema
                - filter
                - update
              properties:
                schema:
                  $ref: '#/components/schemas/UUID'
                filter:
                  $ref: '#/components/schemas/Filter'
                update:
                  additionalProperties:
                    type: object
                    description: A flexible object allowing any key-value pairs, where values can be of any type.
      responses:
        '200':
          description: The result of the update operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: object
                    required:
                      - matchedCount
                      - modifiedCount
                    properties:
                      matched:
                        type: number
                      updated:
                        type: number
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/tail:
    post:
      summary: List new data
      description: List recently added documents from a schema collection
      security:
        - jwt: []
      tags:
        - Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - schema
              properties:
                schema:
                  $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: The last 25 latest documents added to the schema collection
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataDocument'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/delete:
    post:
      summary: Delete data
      description: Delete data records that match a given filter
      security:
        - jwt: []
      tags:
        - Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                schema:
                  $ref: '#/components/schemas/UUID'
                filter:
                  $ref: '#/components/schemas/Filter'
      responses:
        '200':
          description: The result of the delete operations
          content:
            application/json:
              schema:
                type: object
                properties:
                  acknowledged:
                    type: boolean
                  deletedCount:
                    type: number
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/flush:
    post:
      summary: Delete all data
      description: Remove all documents in a schema collection
      security:
        - jwt: []
      tags:
        - Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  properties:
                    schema:
                      $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: The total documents removed
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: object
                    properties:
                      deletedCount:
                        type: number
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/schemas:
    get:
      summary: Get schemas
      description: List accounts' schemas
      security:
        - jwt: []
      tags:
        - Schema
      responses:
        '200':
          description: The organization's schemas
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Schema'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Add schema
      description: Add a new schema
      security:
        - jwt: []
      tags:
        - Schema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - _id
                - name
                - schema
              properties:
                _id:
                  $ref: '#/components/schemas/UUID'
                name:
                  type: string
                  minLength: 1
                schema:
                  type: object
                  additionalProperties: true
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'

    delete:
      summary: Delete schema
      description: Delete a schema
      security:
        - jwt: []
      tags:
        - Schema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  $ref: '#/components/schemas/UUID'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/queries:
    get:
      summary: Get queries
      description: List account queries
      security:
        - jwt: []
      tags:
        - Query
      responses:
        '200':
          description: "The account's queries"
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Query'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Add query
      description: Add a new query
      security:
        - jwt: []
      tags:
        - Query
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - _id
                - name
                - schema
                - variables
                - pipeline
              properties:
                _id:
                  $ref: '#/components/schemas/UUID'
                name:
                  type: string
                schema:
                  $ref: '#/components/schemas/UUID'
                variables:
                  type: object
                  additionalProperties:
                    oneOf:
                      - $ref: '#/components/schemas/QueryVariable'
                      - $ref: '#/components/schemas/QueryArrayVariable'
                pipeline:
                  type: array
                  items:
                    type: object
                    additionalProperties: true
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '.#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete query
      description: Delete a query
      security:
        - jwt: []
      tags:
        - Query
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  $ref: '#/components/schemas/UUID'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/queries/execute:
    post:
      summary: Execute query
      description: Execute a query with variables
      security:
        - jwt: []
      tags:
        - Query
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - variables
              properties:
                id:
                  $ref: '#/components/schemas/UUID'
                variables:
                  type: object
                  additionalProperties: true
      responses:
        '200':
          description: Query executed successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      additionalProperties: true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'



================================================
FILE: apispec/nildb/queries.openapi.yaml
================================================
components:
  schemas:
    Query:
      allOf:
        - $ref: './base.openapi.yaml#/components/schemas/DocumentBase'
        - type: object
          required:
            - name
            - owner
            - schema
            - variables
          properties:
            name:
              description: A user friendly query name
              type: string
            owner:
              description: The decentralised identifier (DID) of the owning organization
              type: string
              example: 'did:nil:testnet:nillion1eunreuzltxglx9fx493l2r8ef6rdlrau4dsdnc'
            schema:
              description: The starting schema collection for this query's aggregation pipeline
              type: string
              format: uuid
            variables:
              description: The query's required runtime variables
              type: object
              additionalProperties:
                oneOf:
                  - $ref: '#/components/schemas/QueryVariable'
                  - $ref: '#/components/schemas/QueryArrayVariable'
            pipeline:
              description: An query's execution pipline defined as an array of objects
              type: array
              items:
                type: object

    QueryVariable:
      type: object
      required:
        - type
        - description
      properties:
        type:
          type: string
          enum: ['string', 'number', 'boolean', 'date']
        description:
          type: string

    QueryArrayVariable:
      type: object
      required:
        - type
        - description
        - items
      properties:
        type:
          type: string
          enum: ['array']
        description:
          type: string
        items:
          type: object
          required:
            - type
          properties:
            type:
              type: string
              enum: ['string', 'number', 'boolean', 'date']

paths:
  /api/v1/queries:
    get:
      summary: Get queries
      description: List account queries
      security:
        - jwt: []
      tags:
        - Query
      responses:
        '200':
          description: "The account's queries"
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Query'
        '400':
          $ref: './base.openapi.yaml#/components/responses/400'
        '401':
          $ref: './base.openapi.yaml#/components/responses/401'
        '500':
          $ref: './base.openapi.yaml#/components/responses/500'
    post:
      summary: Add query
      description: Add a new query
      security:
        - jwt: []
      tags:
        - Query
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - _id
                - name
                - schema
                - variables
                - pipeline
              properties:
                _id:
                  $ref: './base.openapi.yaml#/components/schemas/UUID'
                name:
                  type: string
                schema:
                  $ref: './base.openapi.yaml#/components/schemas/UUID'
                variables:
                  type: object
                  additionalProperties:
                    oneOf:
                      - $ref: '#/components/schemas/QueryVariable'
                      - $ref: '#/components/schemas/QueryArrayVariable'
                pipeline:
                  type: array
                  items:
                    type: object
                    additionalProperties: true
      responses:
        '201':
          $ref: './base.openapi.yaml#/components/responses/201'
        '400':
          $ref: './base.openapi.yaml#/components/responses/400'
        '401':
          $ref: '../base.openapi.yaml#/components/responses/401'
        '500':
          $ref: './base.openapi.yaml#/components/responses/500'
    delete:
      summary: Delete query
      description: Delete a query
      security:
        - jwt: []
      tags:
        - Query
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  $ref: './base.openapi.yaml#/components/schemas/UUID'
      responses:
        '204':
          $ref: './base.openapi.yaml#/components/responses/204'
        '400':
          $ref: './base.openapi.yaml#/components/responses/400'
        '401':
          $ref: './base.openapi.yaml#/components/responses/401'
        '500':
          $ref: './base.openapi.yaml#/components/responses/500'

  /api/v1/queries/execute:
    post:
      summary: Execute query
      description: Execute a query with variables
      security:
        - jwt: []
      tags:
        - Query
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - variables
              properties:
                id:
                  $ref: './base.openapi.yaml#/components/schemas/UUID'
                variables:
                  type: object
                  additionalProperties: true
      responses:
        '200':
          description: Query executed successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      additionalProperties: true
        '400':
          $ref: './base.openapi.yaml#/components/responses/400'
        '401':
          $ref: './base.openapi.yaml#/components/responses/401'
        '500':
          $ref: './base.openapi.yaml#/components/responses/500'



================================================
FILE: apispec/nildb/schemas.openapi.yaml
================================================
paths:
  /api/v1/schemas:
    get:
      summary: Get schemas
      description: List accounts' schemas
      security:
        - jwt: []
      tags:
        - Schema
      responses:
        '200':
          description: The organization's schemas
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: './base.openapi.yaml#/components/schemas/Schema'
        '400':
          $ref: './base.openapi.yaml#/components/responses/400'
        '401':
          $ref: './base.openapi.yaml#/components/responses/401'
        '500':
          $ref: './base.openapi.yaml#/components/responses/500'
    post:
      summary: Add schema
      description: Add a new schema
      security:
        - jwt: []
      tags:
        - Schema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - _id
                - name
                - schema
              properties:
                _id:
                  $ref: './base.openapi.yaml#/components/schemas/UUID'
                name:
                  type: string
                  minLength: 1
                schema:
                  type: object
                  additionalProperties: true
      responses:
        '201':
          $ref: './base.openapi.yaml#/components/responses/201'
        '400':
          $ref: './base.openapi.yaml#/components/responses/400'
        '401':
          $ref: './base.openapi.yaml#/components/responses/401'
        '500':
          $ref: './base.openapi.yaml#/components/responses/500'

    delete:
      summary: Delete schema
      description: Delete a schema
      security:
        - jwt: []
      tags:
        - Schema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  $ref: './base.openapi.yaml#/components/schemas/UUID'
      responses:
        '204':
          $ref: './base.openapi.yaml#/components/responses/204'
        '400':
          $ref: './base.openapi.yaml#/components/responses/400'
        '401':
          $ref: './base.openapi.yaml#/components/responses/401'
        '500':
          $ref: './base.openapi.yaml#/components/responses/500'



================================================
FILE: apispec/nildb/system.openapi.yaml
================================================
components:
  schemas:
    AboutNode:
      type: object
      required:
        - started
        - build
        - did
        - publicKey
        - url
      properties:
        started:
          type: string
          format: date-time
          description: Timestamp when the node was started
          example: '2024-12-16T09:38:04.095Z'
        build:
          type: object
          required:
            - time
            - commit
            - version
          properties:
            time:
              type: string
              format: date-time
              description: Build timestamp
              example: '2024-12-24T23:59:59Z'
            commit:
              type: string
              description: Git commit hash or identifier
              example: c0401ee26ece3f7155fd788848baf122cdd702ed
            version:
              type: string
              description: Node's api version
              example: 0.4.0
        did:
          type: string
          description: Decentralized Identifier (DID) of the node
          example: 'did:nil:testnet:nillion1eunreuzltxglx9fx493l2r8ef6rdlrau4dsdnc'
        publicKey:
          type: string
          description: Public key of the node
          example: 02d1f198df9a64ffa27c293861bace8c80bd6b1e150e008267f7f94eae9e6c380c
        url:
          type: string
          format: uri
          description: URL where the node can be reached
          example: 'https://nildb-demo.nillion.network'

paths:
  /health:
    get:
      summary: Node health check
      description: Returns 200 OK if the service is healthy
      operationId: getHealthStatus
      tags:
        - Node
      responses:
        '200':
          description: Service is healthy
  /about:
    get:
      summary: Node information
      description: Returns information about the node including its DID, public key and build details
      operationId: getNodeDetails
      tags:
        - Node
      responses:
        '200':
          description: Details about the node
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AboutNode'



================================================
FILE: docs/_testnet_block_explorers.mdx
================================================
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

<Tabs>

    <TabItem value="nilchain-mainnet" label="nilChain Mainnet" default>
    - [Mintscan](https://www.mintscan.io/nillion/)
    - [Noders](https://nillionhub.org/explorer/dashboard)
    - [explorers.guru](https://nillion.explorers.guru/)
    - [ping.pub](https://explorer.kjnodes.com/nillion)
    </TabItem>

    <TabItem value="nilchain-testnet" label="nilChain Testnet">
    - [explorers.guru](https://testnet.nillion.explorers.guru/)
    - [ping.pub](https://testnet.ping.pub/nillion/)
    </TabItem>

</Tabs>



================================================
FILE: docs/_testnet_supported_wallets.mdx
================================================
- [Keplr](https://www.keplr.app/)
- [Leap](https://www.leapwallet.io/)



================================================
FILE: docs/api/overview.mdx
================================================
import FeatureSection from '@site/src/components/Features/FeatureSection/index';
import { apiCards } from '@site/src/utils/apiCards';

# Overview

Each of the [Blind Modules](/learn/blind-modules) is accompanied by its own dedicated API. Once you obtain [Network API Access](/build/network-api-access), you can begin interacting directly via one or more of the below APIs.

<FeatureSection data={apiCards} />



================================================
FILE: docs/api/nilai/chat-completion-v-1-chat-completions-post.api.mdx
================================================
---
id: chat-completion-v-1-chat-completions-post
title: "Chat Completion"
description: ":::info"
sidebar_label: "Chat Completion"
hide_title: true
hide_table_of_contents: true
api: eJztWd1vGzcS/1fYzcO1gbSS1QRt9dIqitP6kDiG5V5xiAyb2qUkxlySJbmSdYb+986Q3A9ZspAmuIfDJQ/RZnc4n78ZzkweEkcXNhl+SMZL6pLrTpIzmxmuHVcyGSZTORwOuZyrqSTw5w1jgswNY8QpUlr4WTJye86FAPJBf/DyllBLKHHMOvKKUcMMuVJ3THo+U/j5lUlmqGNAlIFEkqlCC4bSiGFWKwlM50YVnvPojBQqZyLFk13y/Llhfz5/PiTjvZN/ligxU9JRLrlckIJZSxcMlJF5YEKsZhmf84ziGRsYgg0GOY5KkCcdfmQ5WmYIWm0KT0y+dUujysWS/HZ1dVEZtmQ0Z+a7wOiSudJIi7zelEIE42qL1twtoxaqdLp0HZAB6hHrQIAFubbjNc3MRju1MFQveUYsX0gKfBna/+zZM3IZDcVfblgBKntD3pXwkstMlDkjUskuK7TbEAGsiZrXzqhJgys2EASvFL6flFor4ywpSuE4eLY6RYIbLPnWbqxjRce7B9S1FthT6b5rtIvmjiE0StbKoYjuIgY+B3Dct6OHJB4j0SUFcwb8ga/HbW9QITbeI8CigYoyZMVMHdZKlQujMlAfkTBxTAO3k5T8iwqeI/a4hBDUqNHUUBDKDFANUjjK4A1rEIQyQux0zXUqv09JjeUKp7VeU/kiJVeGZnc+qqX2Yl1j5VS+TJ8wzyO/YRTtUQ7hSUVA4KkxykQIv+j3ySuaV9gABGKugtt5sL+2A9EQPp2r3ZRgeWD1ElidSfCEBEETZsCzQVTD1B+bUy4sloBFk82VxkknURpfQjTOcighmAk3TbhvVic3j17ZG62sg4MxIq9UvkmGDwmmM1iNj1RrEUPc+2ixND0kNluygvqvQryfQxF7SCBCINxxZvG9NxIf3EYzUMUCsuQCBDnuBL7w5iTbTlI5CYk5gNw/7DJrayM3Ud4u422nfiOhCCTb60bUOB7foplzAIH4XE6X8ThyUvhm3z4mywKLeshYeIEpCz91ziZtfsgEmNEy52pXqV0P8PyYLyHYwASATo9RvcbvQMfuNRQwe0Ndi5qDixZe0Yr8NJCRkXecM1SG2+mYiKuGaotm5TlH3FBx0bLGmZJ1KhZq9pFlFQBBXo6+A2ujOTva7mjRji9gelxDeuR9uR9F0GdeyswnAqb8MXdTsyh9hT9m7KgmAtYS6tgx4nP8/iU+aVSKwloOeBPtGqNZBy13Sglvtd01+4mE+xS4Vc7cP/0/6j0Pc89jXxGoQFAmh43RLcwj6Rejvc0YaZ+E97tQLq8goDHcFXNqDN0cLV94iIw9Cr5EYV/6WmyjSnuq7FH4WAPi/CUFvdXBMgz1cwaF6KgdLRbYNs8pNE7JsJ8OPNT1jf5szkqTi12eP73ES4re3/gewh7kXFXPY6zf0fvQbNk2/0H/xY/AH4DGaHGQ9wyCxqg8ynsSjrf4zqmwDDOLC0MXBxnH2B7jex5Ot/g+bLfb4+gIN3/rXn8E5dgsebnsniKuWw0DHHO0KwQtaO8t/t39Pj3p/viqewYJaEovrekYwJhwDzfXbd0rJP9WJcFuksK4IPS8FE3f7IXHk/F+bs79gfMDt2SjSkOwWPwcfNLGLUCtRhpCZBchGNQmpj4UrUiAB6+33o1V4+ZBNej38Wd3CJyUGba9qPxl0+V9ancWpLwYDPYZx4YcJyzfZv4Nro+qfQ4B4+JI9yZUtvP1ExqvOp+un64pb1VQ0PeQdnG013xcoJ4m9c4gdU0/BnS0K4jer9mNe4N3nzbjdXDfIWEVCc4dewxDbC3LSsPdxrsT6cKADP+8RsxCMi0VTgKxy9fULeFfvdVJDweBXmsQSJAZjh0hrUqDybh0TtthrwfYpbxLf/jhp1SGjUMqmVsrc5c8XltMYOqaqXvC5IobJQvfeF83mk4QRgEYbX3riKBI1MWTYfkLBGgsIvGymVNO/z+LRyfB9Yj3WFOlR2d7gZjKkWzGY4wtjqRaUIdbBaLVmgGQyQxGXwwN6+AOZ87zOOwiNEoHR9IwCJNTajdkdHFGxoIDTTWCx8n/D3BMtZlC05GQy+AGKAeI6J/Jr2CTI5Kt7TcEHZxRSWjpFK56whTemmqzIEbwmaFmg8w+4v6Ekjlbw7SOoScWFwxpNam/gcy92ADiJXnNVkxgEYJJ/fb2dkbtEmgI4gDk+Dn/vWYStYwilZlKzTXICSRwWFLNu/XnLijkJTXLB29dlBjUncqD5xq7upzsJFVqQ75gXqnFJr3f/KcXWaSId9KFmAUJXUXSXnjuVtLAtrb1/6QrOvEY6GEJC4+f6Qypi9oZv0SVcIywvcMmdheHvNNS47/mIfQLVo+A/se+Gc0dMxV7wHMHFfsHGLWkK8QZ5DYAr+q/Efm7wHOY0QW9g1GYO8IwCwDneEMZmrmwX/SIPwtJBvd1GtY8uMmisgSW6Npq57UEcwTo8c3UN/vMFPb9fBJO7pZcX2chD2OBAWmY9WFWSuLmF8XG/SEOy4W/ipOPyrI0ozOonOqXNieoHnCxM2wjGlYjTaHakkHax3XFTuFfr9cp9Z9TZRa9eNb23p6NT88np108Azzx2ghVp5+ehFd444D1LTF+ddwMMo8LVmvN83X3/XX3/XX3/XX3/fd237GBxDj3oM3hfjLw5ewhNr4fktUJFtOlXya2m19o0ZbYIgPJwwNckOx3I7ZbfA3WGWyv4XFFDaczbLk+4FwSEtH3kXds0+yZu356QHJR+o7/8TCF/WM4MYLpTrujtO0u/uL95AqIZ3FJj86Et4aucTKBv4eJ/y+AYBIQ+HcwgFG5KHH+GSaBp1/+lOiRZssQ2uxO9dAaz2Bea2kI7vEUPnfARZ1oikdZ4ifbvwAbNxLp
sidebar_class_name: "post api-method"
info_path: api/nilai/nilai
custom_edit_url: null
---

import MethodEndpoint from "@theme/ApiExplorer/MethodEndpoint";
import ParamsDetails from "@theme/ParamsDetails";
import RequestSchema from "@theme/RequestSchema";
import StatusCodes from "@theme/StatusCodes";
import OperationTabs from "@theme/OperationTabs";
import TabItem from "@theme/TabItem";
import Heading from "@theme/Heading";

<Heading
  as={"h1"}
  className={"openapi__heading"}
  children={"Chat Completion"}
>
</Heading>

<MethodEndpoint
  method={"post"}
  path={"/v1/chat/completions"}
  context={"endpoint"}
>
  
</MethodEndpoint>




:::info
    Feel free to use the `Nillion2025` as a test Bearer Token
:::

Generate a chat completion response from the AI model.

- **req**: Chat completion request containing messages and model specifications
- **user**: Authenticated user information (through HTTP Bearer header)
- **Returns**: Full chat response with model output, usage statistics, and cryptographic signature

### Request Requirements
- Must include non-empty list of messages
- Must specify a model
- Supports multiple message formats (system, user, assistant)

### Response Components
- Model-generated text completion
- Token usage metrics
- Cryptographically signed response for verification

### Processing Steps
1. Validate input request parameters
2. Prepare messages for model processing
3. Generate AI model response
4. Track and update token usage
5. Cryptographically sign the response

### Potential HTTP Errors
- **400 Bad Request**:
  - Missing messages list
  - No model specified
- **500 Internal Server Error**:
  - Model fails to generate a response

<Heading
  id={"request"}
  as={"h2"}
  className={"openapi-tabs__heading"}
  children={"Request"}
>
</Heading>

<ParamsDetails
  parameters={undefined}
>
  
</ParamsDetails>

<RequestSchema
  title={"Body"}
  body={{"content":{"application/json":{"schema":{"allOf":[{"properties":{"model":{"type":"string","title":"Model"},"messages":{"items":{"properties":{"content":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Content"},"refusal":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Refusal"},"role":{"type":"string","enum":["system","user","assistant"],"title":"Role"},"audio":{"anyOf":[{"properties":{"id":{"type":"string","title":"Id"},"data":{"type":"string","title":"Data"},"expires_at":{"type":"integer","title":"Expires At"},"transcript":{"type":"string","title":"Transcript"}},"additionalProperties":true,"type":"object","required":["id","data","expires_at","transcript"],"title":"ChatCompletionAudio"},{"type":"null"}]},"function_call":{"anyOf":[{"properties":{"arguments":{"type":"string","title":"Arguments"},"name":{"type":"string","title":"Name"}},"additionalProperties":true,"type":"object","required":["arguments","name"],"title":"FunctionCall"},{"type":"null"}]},"tool_calls":{"anyOf":[{"items":{"properties":{"id":{"type":"string","title":"Id"},"function":{"properties":{"arguments":{"type":"string","title":"Arguments"},"name":{"type":"string","title":"Name"}},"additionalProperties":true,"type":"object","required":["arguments","name"],"title":"Function"},"type":{"type":"string","const":"function","title":"Type"}},"additionalProperties":true,"type":"object","required":["id","function","type"],"title":"ChatCompletionMessageToolCall"},"type":"array"},{"type":"null"}],"title":"Tool Calls"}},"additionalProperties":true,"type":"object","required":["role"],"title":"Message"},"type":"array","title":"Messages"},"temperature":{"anyOf":[{"type":"number"},{"type":"null"}],"title":"Temperature","default":0.2},"top_p":{"anyOf":[{"type":"number"},{"type":"null"}],"title":"Top P","default":0.95},"max_tokens":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Max Tokens","default":2048},"stream":{"anyOf":[{"type":"boolean"},{"type":"null"}],"title":"Stream","default":false},"nilrag":{"anyOf":[{"type":"object"},{"type":"null"}],"title":"Nilrag","default":{}}},"type":"object","required":["model","messages"],"title":"ChatRequest"},{"example":{"model":"meta-llama/Llama-3.1-8B-Instruct","messages":[{"role":"system","content":"You are a helpful assistant"},{"role":"user","content":"What is your name?"}],"temperature":0.2,"top_p":0.95,"max_tokens":2048,"stream":false,"nilrag":{}}}]}}}}}
>
  
</RequestSchema>

<StatusCodes
  id={undefined}
  label={undefined}
  responses={{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"properties":{"detail":{"items":{"properties":{"loc":{"items":{"anyOf":[{"type":"string"},{"type":"integer"}]},"type":"array","title":"Location"},"msg":{"type":"string","title":"Message"},"type":{"type":"string","title":"Error Type"}},"type":"object","required":["loc","msg","type"],"title":"ValidationError"},"type":"array","title":"Detail"}},"type":"object","title":"HTTPValidationError"}}}}}}
>
  
</StatusCodes>


      


================================================
FILE: docs/api/nilai/get-attestation-v-1-attestation-report-get.api.mdx
================================================
---
id: get-attestation-v-1-attestation-report-get
title: "Attestation"
description: ":::info"
sidebar_label: "Attestation"
hide_title: true
hide_table_of_contents: true
api: eJztVm1v2zYQ/itX9UO3wJaSAEMxf1m9LM28DW1QpxuGuYhpmbaYyCRHUnY1I/99z0l0IiVFUQzYtwYBLEr38tzx7rnbJ0GsfTL6KxmHIH0QQRmdfBgkS+lzp2xzHCUzPRqNlF6ZmSb8vZaypJWTkoKhyuOnkDR/o8oS4qfHp9/NSXgSxBbpRymcdHRlbqVu7MzwcyG1dCJICOWutsGsnbCFykk8wCAnrXEhZfkhHR3BkTs6GtG4gjsdVA79Jbt3xNDcptX6JhTOVOuCfr66ujx4L6RYSvdta+idDJXTvrHVcbeUQajSE0wRjG5VLmkrnVqxJwgwjufPn/d0fmp12O68ka2VXl/fyno+ostqUSIiHBqT/Tj7hqGd2+q6Ezz0zy7fk9Rb5YzeIN6nKusnKhefVWnhT2VeORVqemOCnOlLZ7YKt/0In3XGrAj/fLUxGy88Eh3kutEWetl1lSaDxFi+U7iaLFEzaxm66K63J71je7nXkIKmk94a7SUqcZ+cHh/zT78Cp1WeS+9XVUnvojD0cgM8OrC4sLaMkWY3nnX2ic8LuRH8hHAALqjWQ++m+EWorYQTHxxewm5QoeQXvx8E6VcI3sFhP+Wf0z2zVbdUWHv95doXj7WhHmXN4kbmbdb+rpSTS27ffkhPgT51/uHBWcfRfXLv+G+Q+Fgt8LFPuKPahsLxwx0sbGQoTLxt+LAiFDhk25Os4ypr7zphaw5AfWOsciVEixCsH2WZVqVQQ/Hy5fepbnkk1TLsjLtNHpPRFKW3MB+71ZcwlgPUKd96e9FdwPe5ZpeMpRHDedEKcLTMI41kTAwobTx5AmCmx5rGE9qYJXiwaQ5UiC1FYBYia3YSt0KLmhpIckCo0xWaDKQlShw2tgpQSduWpHPhaxpfTuisVNy1kRxjz/4h8CryrKlcI6g01fyMsuZa+IEunBSBtNz5Z/SnqSgXmkQVDHNiLsqypnWHcVs3pVo44Wo2dlOBqAWt5I682tgSLR+k9emBM16Dvy5rXDUz3laW3Ewgvfl8vhC+gAxNNC67LBu6eGulZpTRpXEzbZWFn1YEylpYNbz/PASgxhPdj4UmuuixhTvTn9R7iGuoqFdMqW/rhOvJrOv0Y/1PFk2kTBA0xJ21HoaG0qx9Hh68IbZu9L+IrZg2NZBdoYzax/+YDG0398l4FSEFY0qffTrE4fpT2enA+N8yxHnhrmmr/3FuxquA0RrNo54HDOwFgirElusMZI3CW1U651rmyu8XXihQsxtxi+GjAknuAtQ5jxgn8kA7FYq24ieHCeRTTC30nZPQ0xVMcmqZB3nTKBBOCRzPZsx3sLLxb1fTVrNPNQ2/oA/jCIE37notNrHp+Tu7nVY2MhfmiGK+ujFeprlYgDHMq64lsAfmj2TqfDA1tgIsQ6fpMUz0CW+326Wi+Zwat86irs9+m5ydv5meD1kHNpkuW9Y5Tk/aV9b4gOi7bnpE3yOr/cOM/LrFfd3ivmCLi1MyyI8hw0xTzebS1O4+zndsGycQ7K8XccZjDheoTxba78GH8r0r7+74NXrU8RqBx61wSix4wmKLgEJzrc1S0OxjyRi7nuWu24qyYjBPlrve7nFxfsVwKsZ2P+XjVB8cHth6/CR03bENmI1EU9qAOoggAp/hCGvQv4X3tco=
sidebar_class_name: "get api-method"
info_path: api/nilai/nilai
custom_edit_url: null
---

import MethodEndpoint from "@theme/ApiExplorer/MethodEndpoint";
import ParamsDetails from "@theme/ParamsDetails";
import RequestSchema from "@theme/RequestSchema";
import StatusCodes from "@theme/StatusCodes";
import OperationTabs from "@theme/OperationTabs";
import TabItem from "@theme/TabItem";
import Heading from "@theme/Heading";

<Heading
  as={"h1"}
  className={"openapi__heading"}
  children={"Attestation"}
>
</Heading>

<MethodEndpoint
  method={"get"}
  path={"/v1/attestation/report"}
  context={"endpoint"}
>
  
</MethodEndpoint>




:::info
    Feel free to use the `Nillion2025` as a test Bearer Token
:::

Generate a cryptographic attestation report.

- **user**: Authenticated user information (through HTTP Bearer header)
- **Returns**: Attestation details for service verification

### Attestation Details
- `verifying_key`: Public key for cryptographic verification
- `cpu_attestation`: CPU environment verification
- `gpu_attestation`: GPU environment verification

### Security Note
Provides cryptographic proof of the service's integrity and environment.

<ParamsDetails
  parameters={undefined}
>
  
</ParamsDetails>

<RequestSchema
  title={"Body"}
  body={undefined}
>
  
</RequestSchema>

<StatusCodes
  id={undefined}
  label={undefined}
  responses={{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"properties":{"verifying_key":{"type":"string","title":"Verifying Key"},"cpu_attestation":{"type":"string","title":"Cpu Attestation"},"gpu_attestation":{"type":"string","title":"Gpu Attestation"}},"type":"object","required":["verifying_key","cpu_attestation","gpu_attestation"],"title":"AttestationResponse"}}}}}}
>
  
</StatusCodes>


      


================================================
FILE: docs/api/nilai/get-models-v-1-models-get.api.mdx
================================================
---
id: get-models-v-1-models-get
title: "Models"
description: ":::info"
sidebar_label: "Models"
hide_title: true
hide_table_of_contents: true
api: eJztVlFv2zYQ/itX9WFtYMtJgKGYgWH1mjRzkaTFnHUY6qKhZdpiIpMaSdnRDP/3fUdKie2meRjQt+UhlqiPd98d777jOvFi7pL+p+TCTGWRfO4kU+kyq0qvjE76yVj3+32lZ2asCX9vpSxoZqUkb6hy+MklXV+qogD8+PD4x2sSjgR56Tz9KoWVlq7MrdTBzhg/5wpfRFGQWApViEkhacGuHSkdrLnaeblIGdulgwM4sQcHfRpU+Ki9yoSXU3ZtiWnZhWCm9MLn1lTznH67uvrQes6lmEr7Mhr6XfrKase2TlTGm4Stycy+IsKenz9/Tqd3YlEWcqyvr6/L2ueG1wlmrJJL6ajgSB7d3wT0M4mVUJ7m0n+JSy+Y98tgMekkppQ2sB9OkekH1JflUfuERQCtdKXRTuKg1snx4SH/7B7TqMoy6dysKkAwgrEvM9ojZwwXZVlw7gDv3Tjes05clsuF4CeFjAfjpWVSXkVXasr/fV1KuHCIW89h1Stf8AJYbzqJFgv5FOqSvwO3lNap6Pdb0I8NZLNXhN/ecbIFwy6BGjH2qQ2DiAAW2ZCcpSfA5w0EaGcqmz0JHkUEY6uyNBZV+mUmBWquyWWb4l0DwDcLwlpRbxtszaDpGjObB7SZ3Mgs1sbflbJyyj0czuIh1btpvE/PQ+z3cT1K+vMDlyAOF9KLqfDiCc5t7dGZ9HQRu+DjUfuERYSw4SiczCqrfA3W64RbNnYsXj9v4HchwbRpCpgvhc/x0lse9WJfMGFpOc5goLIFPufel67f62l0o+qKV69+SnUUplRLvzL2NtlXt5HQ04m5I6mXyhq94GZh/y29EXdIPL9tkveHyC6ZS4DhfRIBHCGLU0C2faCKwfArAmM90DQYRuUgjglFQWUhPEsblWYlcbY0qSlQkh1CT8/UlJVQFHhZlJXHljSKFp0KV9Pgw5DeFAoYpFw3GsOAPwWWGuHGwQcgVLfmZ3Q+V9QvdGZRAKTlyj2jv0xFmdCEyjEstBmEu4aeBaMSOp9FN4WaWFZTGLupWN9pJlfkFOsnQc5Ll7aq+tZY+hDUlE4gowXrjQuKOBEuZ4Udaud5QPAweF9KzSwbl8aOdalK+IkQbNaiVN37z10QCp7ayGWMrvEY6Y71o/se4uoq2imm1MU64Xoy8zq9q//pNSZSFlPq4syih66htBefu603xLYd/TsMjFGogd4Vyig+/sdk6HJxn4zXDSVvTOF6j4fYnT+WnS0a3y1DnBfumlj9+7kZzDzmdWMe9dxhYj8gqFwsuc4w2FB4s0rHwV3sF57PUbMLcYuxjIEruQtQ5wrjz4rM00r5PFb8MDYZhmVKlwZ9ZzG2ha5gklPLaspXlxzhFODxbMzCCSsL9342ijt3pSboC/qwGbfwxl0fp2LSXIzYbSPngGHmKtarG+NkmokJFMO83ra0O50aU4NSQGXoOD2EiV3BW61WqQifU2PnvWav650P35xejk67vGd7AieH6VFcKo3ziH7LzUWrr3sT+P4q8f+N8DveCJux4uWd72EIqHCrCYe9bobgp2R5BGAzBjGqchwhL6/XkAz5hy02G15GGVuernhcCquYTBiu2BBSEObmray5snB1LLkwl6KowlTfvyvujOSz06vmLrE1CJvB12kf2Hp7R9D1lm3QDIhQAqDaaUh4focj3A7+BY11aLQ=
sidebar_class_name: "get api-method"
info_path: api/nilai/nilai
custom_edit_url: null
---

import MethodEndpoint from "@theme/ApiExplorer/MethodEndpoint";
import ParamsDetails from "@theme/ParamsDetails";
import RequestSchema from "@theme/RequestSchema";
import StatusCodes from "@theme/StatusCodes";
import OperationTabs from "@theme/OperationTabs";
import TabItem from "@theme/TabItem";
import Heading from "@theme/Heading";

<Heading
  as={"h1"}
  className={"openapi__heading"}
  children={"Models"}
>
</Heading>

<MethodEndpoint
  method={"get"}
  path={"/v1/models"}
  context={"endpoint"}
>
  
</MethodEndpoint>




:::info
    Feel free to use the `Nillion2025` as a test Bearer Token
:::

List all available models in the system.

- **user**: Authenticated user information (through HTTP Bearer header)
- **Returns**: Dictionary of available models

### Example
```python
# Retrieves list of available models
models = await get_models(user)
```

<ParamsDetails
  parameters={undefined}
>
  
</ParamsDetails>

<RequestSchema
  title={"Body"}
  body={undefined}
>
  
</RequestSchema>

<StatusCodes
  id={undefined}
  label={undefined}
  responses={{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"items":{"properties":{"id":{"type":"string","title":"Id"},"name":{"type":"string","title":"Name"},"version":{"type":"string","title":"Version"},"description":{"type":"string","title":"Description"},"author":{"type":"string","title":"Author"},"license":{"type":"string","title":"License"},"source":{"type":"string","title":"Source"},"supported_features":{"items":{"type":"string"},"type":"array","title":"Supported Features"}},"type":"object","required":["name","version","description","author","license","source","supported_features"],"title":"ModelMetadata"},"type":"array","title":"Response Get Models V1 Models Get"}}}}}}
>
  
</StatusCodes>


      


================================================
FILE: docs/api/nilai/get-usage-v-1-usage-get.api.mdx
================================================
---
id: get-usage-v-1-usage-get
title: "Usage"
description: ":::info"
sidebar_label: "Usage"
hide_title: true
hide_table_of_contents: true
api: eJztV21vIjcQ/iu+zYe7i2A3iVSdilT1aC53paoSFIiqKkSJ2R1YJ8bes72QLeK/d8ZeyEKQmjY9qR+aD2Hxzjzz6nmGZeT41Ead6+jK8ilEN60oA5saUTihVdSJRqrT6Qg10SPF8O8zgGQTA8CcZqXFjxzY3bmQEsVPjk6+u2PcMs4cWMd+Am7AsKF+AOVxRvhxCc4ImAfNtDQGlEMwFEE8dIFNtPHveIn/lRMpd5CRLROTfpsdHtKXw8MO6z4TYeSqmXHynr1zudHlNGc/D4f9tTc58AzM+wCEzpRGWcLy8TPrUNUiot34QbBvbe1iqpUtZz455MzBwQE7e+SzQsJI3d3dFZXL6c0BW4dp98Ym9XQKWVsojz5S4e0PjC+4cGwK7tafvKO37z1y1Ip0AcYH1suwMBuh2/lx/YBHKGbAFuglYFWX0cnREX1s13RQpilYOykluhmEUQ9Dc5hMEudFISmpKJ7cW9JZRjbNYcbpqTDkiRPBQqopehK99ZH6Q1cVgIYEIk7BILgTTtLJ6UY6tIWNVi0CxJS+RL3vJRuqTjsuX6I5JMGG4jO3bzNwXEiPwlV1McFLsRsrx7wV2Gq3hYFMpDtBP2nteLFqbY5UKWW0unnyq1tDsv4GsuElLzOhX22CQBqgBjjWVKjpa4Ev10Bb4PeQ/rspuqwh96WIcpRlgs647DeK5UwJrTWkHhPC3jYMQJ/q2j93Y7c9X9Qm36JqKccLmL0W9dSjvDZ94Rr+Zer+JrqBr6XAEhMbPZ8qu2Ni5+7f7Ctu4LQV/bUiC8g2wlU+ZcQIgRDw6w1laAY4uuvBSsa4y/FLMj9O/HCNCMDMwVivXxqJb3PnCttJEiUkF23+4cP3sQpUGCtwC20eol0+HXCVjfUjAzUXRqsZTVwyv/ZuQGM2tFHTx01uyST54sXw+zgIUIBEfV6yzgOycrf3zIGR6irW7bGZzpDKKSa6wIXkjoiTFXoBWAM2rph3CVrEeROREc/iBKXClA5V4sB/7IzbinX7PXYqBVH5F1A1TZHAb9yzu18VdGm8ILJeRc9YT6r8j+wLTiTHFCzsG/a7LlnKFbG/JhpPuZQVMqIHxaWApcGMFGPDTUVg9yXuGpxNYMGsoNIji0Nh4zVBf0bS7XtiZp+QkSX1ofWkOuY2J7LuKeR9KT01XxSgyMvapEZ2LkSBdoIIKiteiPbmdRsd8pbWkUOIrrYY3B2pvXpPcbUF22qm2IY+oX7S0yp+rP5IaoiYGJm1sWbBQluzOAnP7bU1jK0Z/S98zge+B5IhtlF4/IfJUMVsk4yPtUtOa2mT/SG2p/uy03Djm2WI8kK3JnT/bm66E4fbYA2P/dwix95iUDmfU5/hdoSNNylVGubXbuO5HHt2xh9ww8OVDegWYJ/TDDY8dWwhXB46vhcuGW5cMTvXeO8MoJ4qEZJSS1OPluUcw5Hox5uRotkGZmYvJoOguT1q/HzBe1jvbGiNbr3is/rS03syOyiLQhsaZri4CZpX99pCnPIxTgz9sYmE0wMXPqBF8AmqWxBZsJP4CCG2B95isYi5fx1rM01qXZv82js9Ox+ctUkHMWlchqlzFB+Ho0Jbh9E3zFzV43VrTC2f1tH/f4L8d36C1CTk4NElSBlCUUl9ayxrxryO5sfULutfkznWm06XS5wvcGXkakXH2POGmBgf59wIPibGuqZtKyTHk+wDVJsNOSJBWZL1Z79Otuj7y9kwosWZnNmwZs2SrfVDY2vCNaqBjW56Cd8w6GqrdsJn0O80qz8BAmxjOg==
sidebar_class_name: "get api-method"
info_path: api/nilai/nilai
custom_edit_url: null
---

import MethodEndpoint from "@theme/ApiExplorer/MethodEndpoint";
import ParamsDetails from "@theme/ParamsDetails";
import RequestSchema from "@theme/RequestSchema";
import StatusCodes from "@theme/StatusCodes";
import OperationTabs from "@theme/OperationTabs";
import TabItem from "@theme/TabItem";
import Heading from "@theme/Heading";

<Heading
  as={"h1"}
  className={"openapi__heading"}
  children={"Usage"}
>
</Heading>

<MethodEndpoint
  method={"get"}
  path={"/v1/usage"}
  context={"endpoint"}
>
  
</MethodEndpoint>




:::info
    Feel free to use the `Nillion2025` as a test Bearer Token
:::

Retrieve the current token usage for the authenticated user.

- **user**: Authenticated user information (through HTTP Bearer header)
- **Returns**: Usage statistics for the user's token consumption

### Example
```python
# Retrieves token usage for the logged-in user
usage = await get_usage(user)
```

<ParamsDetails
  parameters={undefined}
>
  
</ParamsDetails>

<RequestSchema
  title={"Body"}
  body={undefined}
>
  
</RequestSchema>

<StatusCodes
  id={undefined}
  label={undefined}
  responses={{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"properties":{"completion_tokens":{"type":"integer","title":"Completion Tokens"},"prompt_tokens":{"type":"integer","title":"Prompt Tokens"},"total_tokens":{"type":"integer","title":"Total Tokens"},"completion_tokens_details":{"anyOf":[{"properties":{"accepted_prediction_tokens":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Accepted Prediction Tokens"},"audio_tokens":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Audio Tokens"},"reasoning_tokens":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Reasoning Tokens"},"rejected_prediction_tokens":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Rejected Prediction Tokens"}},"additionalProperties":true,"type":"object","title":"CompletionTokensDetails"},{"type":"null"}]},"prompt_tokens_details":{"anyOf":[{"properties":{"audio_tokens":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Audio Tokens"},"cached_tokens":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Cached Tokens"}},"additionalProperties":true,"type":"object","title":"PromptTokensDetails"},{"type":"null"}]}},"additionalProperties":true,"type":"object","required":["completion_tokens","prompt_tokens","total_tokens"],"title":"CompletionUsage"}}}}}}
>
  
</StatusCodes>


      


================================================
FILE: docs/api/nilai/health-check-v-1-health-get.api.mdx
================================================
---
id: health-check-v-1-health-get
title: "Health"
description: "Perform a system health check."
sidebar_label: "Health"
hide_title: true
hide_table_of_contents: true
api: eJztVt9vIjcQ/ld8m4fcRbBLrlJPRYp6NEcTqioXhZyqKkSJWQZw8No+27tki/jfO2MvBHK0D5X6dk8Y78w3PzzfZ68Sz2cu6d4ll8Clnyf3rWQCLrfCeKFV0k2uwU61LRhnrnYeCjYPhiyfQ75IR2qk2uzk5AZ8aZU7Oemy89JaUP6VufPcl45xNWElQhdAnkdHRyzGZecExz6B50I6wry2uhKYCgb+Wgr8VoEVU5Fzyovp6QZfG7Bhj8smCHnfgNHWO5bvJ7MfehhzGqgJwWobPB8jyGN3s48pHAiVa/xK65FiDL1GiV6MEvQaRlvh2LRUOVkINWMKW8ilrEOEmAXafiojHvNz2PaLOzYGUMyWilw3yfafeWEk5v74+GhqP6fIR1intwIqONjtkWr+njG+5MI3Xx/C0b19R/79ZwO57zanEA7hBpzRysHbCHJ2rBfHraZzZz/82Om8CzkkrWTbj8EEB2UX/KE6fWj+z8CjqW1AcdRWyftOh37252xY5jk4Ny0l22SAfthmj+dH5twY2Rx/9uTIZ5U4jFZwWhlL2XgRI8TUaeVrA4jusE1qhoBeeEkb8eyTdSuJlf2b7ZdosUbjxkSPn7BtoS4cTgsTYlATdIt4/4JwoL0ItybEAvAsqX+xUYYjCbtJVp1msYG458Di8BNLV0lpJfXae+O6WaaE5KLNP3z4KcWlxNakCvxS20XymsdDpN5YPzNQlbBaFdTV9T2BI0eEr4fUyti9y9vb61+AW7A7XaGQlEsww//jaEAlCDXVwbKp9krI3uCbBEaqp1hvwAo9AaQq1kTEMJL7oC9GLwEbycY1CylBizg2RQlQXgTCFab06JJGRrA+dzXrXQ/YuRRE8QtQzTiSwR8ct7xmpQOmSxsMhWI1rXFW6Ph+ZhcWuGcKlu4N+1OXLOeK8dLrAmFyoiubRVBAFcpjGCnGltuawJ5K5/HDFJbMCSIn8g6MSzeU/VVbdh2oisJWgaQJdYE8Y+7mRL+BwqGRMvD/swFFWTYhtR0pIwzGiSborLgR7e3nNiYUIm0qh1hdEzGmO1IH/V7qagu2N0ypi3NC86Rndfpc/5U1ECmxjrXxzGKEtmZpFtftTTSsbbf633jFh2EGslsco7j8j81Qptg242OTktdauuxwie3Zoe7spPG/dYj6QqyJ0/+6N72pB7uBx3luUWLHWNScVzRnqIA4eJvLgyZ/f/D8HGe24Au8l1DSgViAcy5QJy3PPVsKFPww8YNIMlTVlF1p5J0F9FMlQlJrSboAB3iO5UjM481IkeaBLdzn6TB67ktN0BfkYaPLGI1Yr3jRkJ6+U9hhaej2RTMUZ0F69aQdpDkfo2Loj7tIqB4o6kB6+ALVMxxVhr1POySme4K3XC5THj6n2s6yxtdlvw/O+1fDfpt8EJPkMqpOJz2NW0Y7j9XvhLnc6OueTq1e7pzvb5/vb59/evs0t6KHZ5/hHSZUeErQrK6aO/wuqU7RcL59V89xAml7tULFgy9Wrte0jSy0Ne7jsuJW8DHdoXf36+A6oTsYr/0F1EQMfCIZ4lXFZUnhv3kT0Y2+fVFc9G/xfv4bT0A8xQ==
sidebar_class_name: "get api-method"
info_path: api/nilai/nilai
custom_edit_url: null
---

import MethodEndpoint from "@theme/ApiExplorer/MethodEndpoint";
import ParamsDetails from "@theme/ParamsDetails";
import RequestSchema from "@theme/RequestSchema";
import StatusCodes from "@theme/StatusCodes";
import OperationTabs from "@theme/OperationTabs";
import TabItem from "@theme/TabItem";
import Heading from "@theme/Heading";

<Heading
  as={"h1"}
  className={"openapi__heading"}
  children={"Health"}
>
</Heading>

<MethodEndpoint
  method={"get"}
  path={"/v1/health"}
  context={"endpoint"}
>
  
</MethodEndpoint>



Perform a system health check.

- **Returns**: Current system health status and uptime

### Health Check Details
- Provides a quick verification of system operational status
- Reports current system uptime

### Status Indicators
- `status`: Indicates system operational condition
  - `"ok"`: System is functioning normally
- `uptime`: Duration the system has been running

### Example
```python
# Retrieve system health status
health = await health_check()
# Expect: HealthCheckResponse(status='ok', uptime=3600)
```

<ParamsDetails
  parameters={undefined}
>
  
</ParamsDetails>

<RequestSchema
  title={"Body"}
  body={undefined}
>
  
</RequestSchema>

<StatusCodes
  id={undefined}
  label={undefined}
  responses={{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"properties":{"status":{"type":"string","title":"Status"},"uptime":{"type":"string","title":"Uptime"}},"type":"object","required":["status","uptime"],"title":"HealthCheckResponse"}}}}}}
>
  
</StatusCodes>


      


================================================
FILE: docs/api/nilai/nilai.info.mdx
================================================
---
id: nilai
title: "NilAI"
description: "An AI model serving platform powered by secure, confidential computing."
sidebar_label: Introduction
sidebar_position: 0
hide_title: true
custom_edit_url: null
---

import ApiLogo from "@theme/ApiLogo";
import Heading from "@theme/Heading";
import SchemaTabs from "@theme/SchemaTabs";
import TabItem from "@theme/TabItem";
import Export from "@theme/ApiExplorer/Export";

<span
  className={"theme-doc-version-badge badge badge--secondary"}
  children={"Version: 0.1.0"}
>
</span>

<Heading
  as={"h1"}
  className={"openapi__heading"}
  children={"NilAI"}
>
</Heading>




An AI model serving platform powered by secure, confidential computing.

## Easy API Client Generation

Want to use our API in your project? Great news! You can automatically generate a client library in just a few simple steps.

### For Python Developers
```bash
# Install the OpenAPI generator
pip install openapi-generator-cli

# Generate your Python client
openapi-generator-cli generate -i https://nilai.sandbox.nilogy.xyz/openapi.json -g python -o ./python-client
```

### For JavaScript/TypeScript Developers
```bash
# Install the OpenAPI generator
npm install @openapitools/openapi-generator-cli -g

# Generate your TypeScript client
openapi-generator-cli generate -i https://nilai.sandbox.nilogy.xyz/openapi.json -o ./typescript-client
```

After generating, you'll have a fully functional client library that makes it easy to interact with our AI services. No more manual API request handling!


<div
  style={{"marginBottom":"2rem"}}
>
  <Heading
    id={"authentication"}
    as={"h2"}
    className={"openapi-tabs__heading"}
    children={"Authentication"}
  >
  </Heading><SchemaTabs
    className={"openapi-tabs__security-schemes"}
  >
    <TabItem
      label={"HTTP: Bearer Auth"}
      value={"HTTPBearer"}
    >
      
      
      
      
      <div>
        <table>
          <tbody>
            <tr>
              <th>
                Security Scheme Type:
              </th><td>
                http
              </td>
            </tr><tr>
              <th>
                HTTP Authorization Scheme:
              </th><td>
                bearer
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </TabItem>
  </SchemaTabs>
</div><div
  style={{"display":"flex","flexDirection":"column","marginBottom":"var(--ifm-paragraph-margin-bottom)"}}
>
  <h3
    style={{"marginBottom":"0.25rem"}}
  >
    Contact
  </h3><span>
    Nillion AI Support: [jose.cabrero@nillion.com](mailto:jose.cabrero@nillion.com)
  </span>
</div><div
  style={{"marginBottom":"var(--ifm-paragraph-margin-bottom)"}}
>
  <h3
    style={{"marginBottom":"0.25rem"}}
  >
    Terms of Service
  </h3><a
    href={"https://nillion.com"}
  >
    https://nillion.com
  </a>
</div><div
  style={{"marginBottom":"var(--ifm-paragraph-margin-bottom)"}}
>
  <h3
    style={{"marginBottom":"0.25rem"}}
  >
    License
  </h3><a
    href={"https://www.apache.org/licenses/LICENSE-2.0"}
  >
    Apache 2.0
  </a>
</div>
      


================================================
FILE: docs/api/nilai/overview.mdx
================================================
# Overview

Each [nilAI node](/build/network-config#nilai-nodes) API provides the following endpoints for interfacing with [Private LLMs](/build/private-llms/overview):

| Name | Endpoint | Description |
|----------|----------|-------------|
| Chat | [`/v1/chat/completions`](/api/nilai/chat-completion-v-1-chat-completions-post) | Generate AI responses |
| Models | [`/v1/models`](/api/nilai/get-models-v-1-models-get) | List available models |
| Attestation | [`/v1/attestation/report`](/api/nilai/get-attestation-v-1-attestation-report-get) | Get cryptographic proof of environment |
| Usage | [`/v1/usage`](/api/nilai/get-usage-v-1-usage-get) | Track your token usage |
| Health | [`/v1/health`](/api/nilai/health-check-v-1-health-get) | Check service status |


================================================
FILE: docs/api/nilai/sidebar.ts
================================================
import type { SidebarsConfig } from "@docusaurus/plugin-content-docs";

const sidebar: SidebarsConfig = {
  apisidebar: [
    {
      type: "doc",
      id: "api/nilai/nilai",
    },
    {
      type: "category",
      label: "Attestation",
      items: [
        {
          type: "doc",
          id: "api/nilai/get-attestation-v-1-attestation-report-get",
          label: "Attestation",
          className: "api-method get",
        },
      ],
    },
    {
      type: "category",
      label: "Chat",
      items: [
        {
          type: "doc",
          id: "api/nilai/chat-completion-v-1-chat-completions-post",
          label: "Chat Completion",
          className: "api-method post",
        },
      ],
    },
    {
      type: "category",
      label: "Health",
      items: [
        {
          type: "doc",
          id: "api/nilai/health-check-v-1-health-get",
          label: "Health",
          className: "api-method get",
        },
      ],
    },
    {
      type: "category",
      label: "Model",
      items: [
        {
          type: "doc",
          id: "api/nilai/get-models-v-1-models-get",
          label: "Models",
          className: "api-method get",
        },
      ],
    },
    {
      type: "category",
      label: "Usage",
      items: [
        {
          type: "doc",
          id: "api/nilai/get-usage-v-1-usage-get",
          label: "Usage",
          className: "api-method get",
        },
      ],
    },
  ],
};

export default sidebar.apisidebar;



================================================
FILE: docs/api/nildb/accounts.api.mdx
================================================
---
id: accounts
title: 'Accounts'
description: "Retrieve an organization's account details"
sidebar_label: 'Accounts'
hide_title: true
hide_table_of_contents: true
api: eJzVVt1vGzcM/1cEvTQBEjvJ0mK9t2zJhqxYN6xJ+5AYBX2ibSU66aqP1K5x/3tJ3fkjthF3wF72YkukKJK/H0ndXCoMpdd11M7KQv6D0Wt8QgFWOD8Gq78Bq14FAWXpko1CYQRtgjySEcZBFnfyotUEOTiSAcvkdZyRfC4fvkb6HzQk9xhqZwOSwVyenZzw33PXNxPc77J0NqKNbA11bXSZj/YfAl8xl6GcYAW8irMa6VI3fMAySvb/JWmPiuNVEIFjrb2r0UfdBpWleyw/a0WSz/kI/ZceIWIWpVp1yzoNKa53OKO1hYoPtmFx/F8Seva35Z1v3glJh0EgEErK3IPRAZXQijZ6pNGLg8vry0Omow08EIN2THucQlUbFimtCqtNETFEi5HXhjycYrIe0zcTp2MzfTuanr/9yZz5n3H0xivjIZ2roGwpm0XKK3RWTmyqGBlQlba0X2dQDpo1kHYYj5yvIHKAdOI4agKrWcPyhy1WkG+ZNB0JuxQLWrZwvxAEchRuJNojhHYQcQJRDNE4OxbR0VYvC3QFPngPTLyOWO28OFn9hD6AMTNeUz2sU0np0cUkIvPeDkqX6aeUKzHqmAm+vb2+lE2zqq8XUuIjs/9LRs1K0k0ZFmb5+a4h8pHaQ+Xio1kiqMVKDIE8CfTe+f9sgkS+qbtyq5Vj+MHKPdrR7vlSGn18IERq4B5XaufqBVbzCUE2AcYYXqAP7OyvUZ7Om/2wnfLzvEqndvdR53WHrmkGzzi84ijlgr/T7YT+1C1dlIu2T0ym+OPTDTt5vYvua+LSWzAioKcibFHIjVBhnDjiSo4xZwJxQps+1Lr/dNpfDFWezdkyZESSN3RoEmMdin6fpqQaHiusXK8bmD0anl+df5TN2kv3gSumRSi/d0sQ+J7F8Of9EMGjJ0m7+G1REJzgZilcCBrqx6QRKePBLXT14ez1m3cCzNiR30mVewsSqajZSp6YAq2qnabEeveWjWuYGQdKVImqRNvSJIXFvT0WGmIhrkNIZERDYFltrMNpXYiraa1920hLpTjwWLqqIi+oDvkoJFWIG/AEsrBUHnseqew5hEL8ajRpXu171O5t5lLbkcu4dlVEbFz+Ii7+vibYmLsWspPeee9kC8iPOugo7pQrw5JFymFwsGB5U3NInz5K3I0J4TRkQf99q3zfct+Wxcp+z8FDnqyGCLeich57nBKVowuxgjxw2tdp9Q21kcB8NbD+5cdZW4QRp7FfG9DZby7wedcN9GjXmiE8pR9Y+4abUHSsns+HEPDWm6ZhcX44+HuOTMBrGDIZd/zGTxAUVTa30CM/wpwN1tx31MIpj6HNUcsdtOzR36+4A7iU19pno13WRxbNsLW7Kcx84sY9oqVQj7ogIu9lnkDfAdAOxsY=
sidebar_class_name: 'get api-method'
info_path: api/nildb/nildb-api
custom_edit_url: null
---

import MethodEndpoint from '@theme/ApiExplorer/MethodEndpoint';
import ParamsDetails from '@theme/ParamsDetails';
import RequestSchema from '@theme/RequestSchema';
import StatusCodes from '@theme/StatusCodes';
import OperationTabs from '@theme/OperationTabs';
import TabItem from '@theme/TabItem';
import Heading from '@theme/Heading';

<Heading
  as={'h1'}
  className={'openapi__heading'}
  children={'Accounts'}
></Heading>

<MethodEndpoint
  method={'get'}
  path={'/api/v1/accounts'}
  context={'endpoint'}
></MethodEndpoint>

:::info
You may use this test Bearer token we have created for development

```
eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpc3MiOiJkaWQ6bmlsOnRlc3RuZXQ6bmlsbGlvbjF4dnRuM2FhajQ4dGY3bm5zZW16MGQ2OGVwbjZlcHU0ZjRhNG5mYSIsImF1ZCI6ImRpZDpuaWw6dGVzdG5ldDpuaWxsaW9uMXd3c3Jqbmd4dnU5dGMzMzVsajlrM213d3JybDV3M3EyZDB1ZXR6In0.yOKg-wyJdyn9jK-KNtkjbi9PS0pF9wmgVmd7pIeNGhoTjhgZhzB62atbgzE45OGGYx0gUsw_i2k3K2AdFf_tuQ
```

:::

Retrieve an organization's account details

<ParamsDetails parameters={undefined}></ParamsDetails>

<RequestSchema title={'Body'} body={undefined}></RequestSchema>

<StatusCodes
  id={undefined}
  label={undefined}
  responses={{
    '200': {
      description: "The organization's account details",
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['data'],
            properties: {
              data: {
                type: 'object',
                required: [
                  '_id',
                  '_type',
                  '_created',
                  '_updated',
                  'publicKey',
                  'name',
                  'schemas',
                  'queries',
                ],
                properties: {
                  _id: {
                    description: 'The accounts decentralised identifier (DID)',
                    type: 'string',
                    example:
                      'did:nil:testnet:nillion1eunreuzltxglx9fx493l2r8ef6rdlrau4dsdnc',
                  },
                  _type: { type: 'string', enum: ['admin', 'organization'] },
                  _created: { type: 'string', format: 'date-time' },
                  _updated: { type: 'string', format: 'date-time' },
                  publicKey: { type: 'string' },
                  name: { type: 'string' },
                  schemas: {
                    description:
                      'A list of schema ids that belong to this account',
                    type: 'array',
                    items: {
                      description:
                        'A universally unique identifier for the item.',
                      type: 'string',
                      format: 'uuid',
                      title: 'UUID',
                    },
                  },
                  queries: {
                    description:
                      'A list of query ids that belong to this account',
                    type: 'array',
                    items: {
                      description:
                        'A universally unique identifier for the item.',
                      type: 'string',
                      format: 'uuid',
                      title: 'UUID',
                    },
                  },
                },
                title: 'Account',
              },
            },
          },
        },
      },
    },
    '400': {
      description: 'Validation or processing errors',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['ts', 'errors'],
            properties: {
              ts: {
                type: 'string',
                format: 'date-time',
                description: "The error's timestamp.",
              },
              errors: {
                description: 'A list of error messages',
                type: 'array',
                items: {
                  anyOf: [
                    { type: 'string' },
                    {
                      type: 'object',
                      properties: {
                        code: { type: 'string' },
                        message: { type: 'string' },
                      },
                    },
                  ],
                },
              },
            },
            title: 'Error',
          },
        },
      },
    },
    '401': { description: 'Missing or invalid JWT' },
    '500': { description: 'Internal server error' },
  }}
></StatusCodes>



================================================
FILE: docs/api/nildb/add-query.api.mdx
================================================
---
id: add-query
title: 'Add query'
description: 'Add a new query'
sidebar_label: 'Add'
hide_title: true
hide_table_of_contents: true
api: eJy9VttuGzcQ/RWCL7WBleSrkuybE7uAWzRxY9l9cIyCWo4k2lxyS3JtC8L+e2fI1V21E6CtH2QuOTOcy5kznHEJvnCqCsoanvMzKZlgBp7ZXzW4Kc+4h6J2Kkx5fjfjD88B/9839xkPYuxxzX+PcrjhAFV8+Gglys7ip3IgeR5cDRkvrAlgAh2JqtKqEHRl78HTvTPuiwmUglZhWgF6YocPUASerRi6438qiTtGlECeJZWMPwmnxFCDx3WlKtDKAHlUOVuBCwoP0C7p4r+NeFlt1BM4L7Se0hpjYEqio2qkwLGRdSxMcCtA2UXzrXM+OGXG+I3npcCgeF1H14IKmgRubi7PedO6ugyq1WuylXj/X4eWudqRaiGlIj+EvlpLnTXwZRQB8Fpx4lm2Fs9WEZL+Zj4yDqYuycZiA7+H4HAxtFaDMGRYBCxrs37Ddm6bZdARm7dtxBj9D/ufccqz//E4hHNi+h3Ozi94A/fx7L9IZrOVrjPyfJmzexJYNNXyshTgK+7vxhJxQZP+KEJfWeNTMEcHh9vd8BW8rV0BrHCADktK2MnBwbbgrdBKRkZh2CCYpgK8x+AZOGcdEcO/wj+BLLUmt8vhdxVj0ZCU8U5Q5SbGcj7Afo5Gf/KMBHwQZdWlWNurdrCEVj4wO0p6DHW8GEcC/Kf6CDNd7+EFBLdDXo+rsHI3h7W37upBws0Ksi7IS56qfrKr0L+pVC6MRZknKib75Y8BXXK6q9yXWEuH0GIeHJJlykJs/RLCxGKteGV9DEWECX71RKV6T4c9mmoq5ilp+piR2mmUmYRQ+bzXM0rLYUdCabu41Hhj10B4tu6R0+CbD8RrQkzKUByLiySQnfl4ou8hCJe6Ly5+ngOCAtyEwhk7vzzv4AmrYz6I6i+uj077vzKhxxbvnZRxBogaj3AoFNQWDIysrDLBd78ZUq7EVFshWVkjSpQpdC0h/2Y6TImQs0vva1QSYYk2OoOXKmcXL5VyqZEWh2zPQWHLEm8BuU+iopY5Gwg3hsAMwoNJKNAbh4XzaHllXu1hPFEFC5yzT1rhCcL8LflYS+rNr8tXxcUL+qJhMcv58Ui8Px31Tzqn7w7fdU5O+0ed4fGo6BwVH/rHo35fjER//lxY6ch5q3+v/urIXCPDu1lDDK/MyMbyt2BH0Jx/ZGdXl6SLEEuVPeiedA+26n2rvArsTtrCL8CGqb7fm4Nx82SfCSPZ3RiBUA9po/c5HX5OEE3oXeq/IbjPgmU4EpxhpXXQpcxnsXdKEXmxTR69C+cvwo2JtiDWHY/HtiMCvIRepYWK1mO3zdrOxFFZKUrUIf7MuxO7bELti6ez2VB4uHG6aWg7GcYn6LIs8UGKCiAkdhm18yOgCP+U/OoM0lhHUqkjMW6SPxFg0jgrCqjCq7L3Kwxz9eV6EGdqevCWkSa5E880NPA357iwMU+RJeLejGthxnWkTZ5sEtSpnVcoZIMyVmkbeXzFQ0xPlBjYRzCYoqwNJdB3nN7N3zjfErA=
sidebar_class_name: 'post api-method'
info_path: api/nildb/nildb-api
custom_edit_url: null
---

import MethodEndpoint from '@theme/ApiExplorer/MethodEndpoint';
import ParamsDetails from '@theme/ParamsDetails';
import RequestSchema from '@theme/RequestSchema';
import StatusCodes from '@theme/StatusCodes';
import OperationTabs from '@theme/OperationTabs';
import TabItem from '@theme/TabItem';
import Heading from '@theme/Heading';

<Heading
  as={'h1'}
  className={'openapi__heading'}
  children={'Add query'}
></Heading>

<MethodEndpoint
  method={'post'}
  path={'/api/v1/queries'}
  context={'endpoint'}
></MethodEndpoint>

:::info
You may use this test Bearer token we have created for development

```
eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpc3MiOiJkaWQ6bmlsOnRlc3RuZXQ6bmlsbGlvbjF4dnRuM2FhajQ4dGY3bm5zZW16MGQ2OGVwbjZlcHU0ZjRhNG5mYSIsImF1ZCI6ImRpZDpuaWw6dGVzdG5ldDpuaWxsaW9uMXd3c3Jqbmd4dnU5dGMzMzVsajlrM213d3JybDV3M3EyZDB1ZXR6In0.yOKg-wyJdyn9jK-KNtkjbi9PS0pF9wmgVmd7pIeNGhoTjhgZhzB62atbgzE45OGGYx0gUsw_i2k3K2AdFf_tuQ
```

:::

Add a new query

<Heading
  id={'request'}
  as={'h2'}
  className={'openapi-tabs__heading'}
  children={'Request'}
></Heading>

<ParamsDetails parameters={undefined}></ParamsDetails>

<RequestSchema
  title={'Body'}
  body={{
    required: true,
    content: {
      'application/json': {
        schema: {
          type: 'object',
          required: ['_id', 'name', 'schema', 'variables', 'pipeline'],
          properties: {
            _id: {
              description: 'A universally unique identifier for the item.',
              type: 'string',
              format: 'uuid',
              title: 'UUID',
            },
            name: { type: 'string' },
            schema: {
              description: 'A universally unique identifier for the item.',
              type: 'string',
              format: 'uuid',
              title: 'UUID',
            },
            variables: {
              type: 'object',
              additionalProperties: {
                oneOf: [
                  {
                    type: 'object',
                    required: ['type', 'description'],
                    properties: {
                      type: {
                        type: 'string',
                        enum: ['string', 'number', 'boolean', 'date'],
                      },
                      description: { type: 'string' },
                    },
                    title: 'QueryVariable',
                  },
                  {
                    type: 'object',
                    required: ['type', 'description', 'items'],
                    properties: {
                      type: { type: 'string', enum: ['array'] },
                      description: { type: 'string' },
                      items: {
                        type: 'object',
                        required: ['type'],
                        properties: {
                          type: {
                            type: 'string',
                            enum: ['string', 'number', 'boolean', 'date'],
                          },
                        },
                      },
                    },
                    title: 'QueryArrayVariable',
                  },
                ],
              },
            },
            pipeline: {
              type: 'array',
              items: { type: 'object', additionalProperties: true },
            },
          },
        },
      },
    },
  }}
></RequestSchema>

<StatusCodes
  id={undefined}
  label={undefined}
  responses={{
    '201': { description: 'Resource created' },
    '400': {
      description: 'Validation or processing errors',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['ts', 'errors'],
            properties: {
              ts: {
                type: 'string',
                format: 'date-time',
                description: "The error's timestamp.",
              },
              errors: {
                description: 'A list of error messages',
                type: 'array',
                items: {
                  anyOf: [
                    { type: 'string' },
                    {
                      type: 'object',
                      properties: {
                        code: { type: 'string' },
                        message: { type: 'string' },
                      },
                    },
                  ],
                },
              },
            },
            title: 'Error',
          },
        },
      },
    },
    '401': { description: 'Missing or invalid JWT' },
    '500': { description: 'Internal server error' },
  }}
></StatusCodes>



================================================
FILE: docs/api/nildb/add-schema.api.mdx
================================================
---
id: add-schema
title: 'Add schema'
description: 'Add a new schema'
sidebar_label: 'Add'
hide_title: true
hide_table_of_contents: true
api: eJytVUtv2zgQ/isEL5sAfiWx3V3d0iYLeB9t0DjtwTUWtDiymVCklqSSGIb+e2coWXZso700h5jivOeb+bjhEnzqVBGUNTzh11IywQy8MJ+uIBe8wz2kpVNhzZPZhj++BPydV/MOD2Lp8czva0W8cfB/CT68txKVN/FTOZA8Ca6EDk+tCWACiURRaJUKCtp/9BR5w5uAeArrAjAXu3iENPDOnqMZ/09JvDEiB0qtDV04W4ALCjw5ICX8OSiNlUY9g/NC6zWdMVmmJGakMgWOZdaxsMKrAHkPnTdZ+OCUWeI3ynOB2fOyjDkEFTQpPDxMbnjV5LTLvrXLlfkHzDKseHJRdX5QppBSUa5C3+1VQ72r4h81whfW+LrIy8HFcZGfwdvSpcBSByJgy9BqOBgcK34RWskIAMO6sX0peI8JM3DOOs9/EVyBPDUuj2AK/lS/2j5jetANKiL9NvkpwhSd/uYZKfgg8qJHtTahToCvlQ/MZrUdQxsvluB3OAvnxBo/Cf7oQJj1pywO/dsMq85xyW/rSq08MQmYXRP1hKyq5hHh7VDdUpa8Rn14Cuh/VQ0X1qLMM4HJ/vo6pSCjU3BPEEuHk8U8ONyBugu8ijmFlUWseGF9LEXQpPK+KFT/+aJfw+wjD5Cljx0pnUadVQiFT/p9o7RcdCXktodHjRF7BsKLdU+ciGJLIJEo6g5FGmmbQH6220zfCxAOHN7Uhz+3A0EFHo7CNbuZ3HRRwsrYD9rg2/vL0fhvJvTSYtxVHldblCjCXU9pLRgYWVhlgu99M2RciLW2QrK8xClRJtWlhOSb6TIlQsIm3pdoJMJu2kgGr0XCbl8L5epFaoXszEFq8xyjgDwnVVHKhE2FW0JgBseDSUgxG4fAefS8R0NnWE80QYAT9kErlOCY/0w/Ykm7+XlHwrevmIuGlhH5VSZ+H2XjYXf07uJddzgaX3YXV1navUz/GF9l47HIxHjLrnsb2a46xVAmsxG7ZlIR8Zv37Ppugoo0HzUsg96wNzgC64vyKrCZtKlvJwX7ND/bTtKh5JwJI9lsiSiWC7rof6yFH+v5qkdvZ/8TxXMWLNM4VIbl1kGP2taJg5+LSGpN5fQKtu/fmxI2O1o89VY2Ax3gNfQLLVT0H5dl0yzWDMlUUasu2sZGZlzR9qF0s1kIDw9OVxVdI5aOXl48PgunxIJ6ju8vGoCQuCS0jU+AKvxDnVh3SjmQui4jrx1yN/FXbXGdplCEH+rO9wji7tM97d+ied7zyHLciRfifPyfcDzY2Ki45PFuw7UwyzKyHq990hTRNu4xwMHG77Mu0vBehtieqDG1T2CwRZ2mlEDfPJLod9iTBmQ=
sidebar_class_name: 'post api-method'
info_path: api/nildb/nildb-api
custom_edit_url: null
---

import MethodEndpoint from '@theme/ApiExplorer/MethodEndpoint';
import ParamsDetails from '@theme/ParamsDetails';
import RequestSchema from '@theme/RequestSchema';
import StatusCodes from '@theme/StatusCodes';
import OperationTabs from '@theme/OperationTabs';
import TabItem from '@theme/TabItem';
import Heading from '@theme/Heading';

<Heading
  as={'h1'}
  className={'openapi__heading'}
  children={'Add schema'}
></Heading>

<MethodEndpoint
  method={'post'}
  path={'/api/v1/schemas'}
  context={'endpoint'}
></MethodEndpoint>

:::info
You may use this test Bearer token we have created for development

```
eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpc3MiOiJkaWQ6bmlsOnRlc3RuZXQ6bmlsbGlvbjF4dnRuM2FhajQ4dGY3bm5zZW16MGQ2OGVwbjZlcHU0ZjRhNG5mYSIsImF1ZCI6ImRpZDpuaWw6dGVzdG5ldDpuaWxsaW9uMXd3c3Jqbmd4dnU5dGMzMzVsajlrM213d3JybDV3M3EyZDB1ZXR6In0.yOKg-wyJdyn9jK-KNtkjbi9PS0pF9wmgVmd7pIeNGhoTjhgZhzB62atbgzE45OGGYx0gUsw_i2k3K2AdFf_tuQ
```

:::

Add a new schema

<Heading
  id={'request'}
  as={'h2'}
  className={'openapi-tabs__heading'}
  children={'Request'}
></Heading>

<ParamsDetails parameters={undefined}></ParamsDetails>

<RequestSchema
  title={'Body'}
  body={{
    required: true,
    content: {
      'application/json': {
        schema: {
          type: 'object',
          required: ['_id', 'name', 'schema'],
          properties: {
            _id: {
              description: 'A universally unique identifier for the item.',
              type: 'string',
              format: 'uuid',
              title: 'UUID',
            },
            name: { type: 'string', minLength: 1 },
            schema: { type: 'object', additionalProperties: true },
          },
        },
      },
    },
  }}
></RequestSchema>

<StatusCodes
  id={undefined}
  label={undefined}
  responses={{
    '201': { description: 'Resource created' },
    '400': {
      description: 'Validation or processing errors',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['ts', 'errors'],
            properties: {
              ts: {
                type: 'string',
                format: 'date-time',
                description: "The error's timestamp.",
              },
              errors: {
                description: 'A list of error messages',
                type: 'array',
                items: {
                  anyOf: [
                    { type: 'string' },
                    {
                      type: 'object',
                      properties: {
                        code: { type: 'string' },
                        message: { type: 'string' },
                      },
                    },
                  ],
                },
              },
            },
            title: 'Error',
          },
        },
      },
    },
    '401': { description: 'Missing or invalid JWT' },
    '500': { description: 'Internal server error' },
  }}
></StatusCodes>



================================================
FILE: docs/api/nildb/delete-all-data.api.mdx
================================================
---
id: delete-all-data
title: 'Delete all data'
description: 'Remove all documents in a schema collection'
sidebar_label: 'Delete all'
hide_title: true
hide_table_of_contents: true
api: eJzFVktvGzcQ/isEL7UBPfyS0urmWC6gFk2CWE4Pjg6j5axEm0tuSa5sQdB/7wx3ZcmSECNAgfpgkzvvmW8+eiUVhszrMmpn5UB+xcItUIAxQrmsKtDGILQVIEI2xwJE5ozBLGm3ZMCs8jou5eBhJR+fI/2drCctGWEW6CyHEEHS3eM/FYb40SlSXcnM2UiO+QhlaXQG7K/7GDiFlawj8SkuS6Sk3PSRQsraj/ao2LdqfJfeleijxsAW6esRy7da2whvq78WldUL9IHqX/KZ0hZaUa461+hF7ryIc/oUseiQ1yZKiF7bGd1JXgDVJatKK5braFjh/n40lOvmh8sIpbOhzuXi7OwwkTEFiS7C7hR8Gg27/d/7p9BgRHXjqjqLRttWxRT9TqFXx2r7BkarlLGgdpLjDEOg/gn03vnwX9UX2VPj8qDMGHbMD8dH6WE76gLp4+FgktNfgmCFEKEoO3L9GuoIpowOUbi8thNkE2CGYQsf8B6WdGVUJQdgl5/ztFNvM1y33htM5hQeVkbZNVGPyNbrSZrVBqu3nKXczO/8sKC/dD0uqkXbBQ9T/PH3mIP0jo17RLP0lpAc0NNq1V2Q65RTnDualSxdSKVAnNOtC6XuLs67DMVubqowT0zDxiE1pfKG1OYxlmHQ7Vpt1LStaDk6dDQUtGMxPjv/JJmKNhR1x6Cpm5SI6rUP7IcDJDndpwieQNxqDr9vMME17qPhWgxHwzZJRJVawtxwe3fR6/9JDDpzFHdeJNKAikTEIoRkVAKtKp2mne58t2xcwtI4UKKoCCjaZqZSOPhu20JDHIhRCBUZQdwCjmX4Ug7E7Uupfb1Lr0Jx4jFzBZGGQnXKqlCpgRiDn2EUlhAiFGaUjafZBfK8Q3AnVE8yoRkPxI3RJCGkv6efxsnr+XVL9LcvlIvBXVLZLK68zOHXXt6/avc+nH9oX/X6F+3pZZ61L7Lf+pd5vw859JNPbXOXZtWAkyY8/Ciuv4xoFIyHegxnnavO2cFwvumgo3ggAg2vyKC+TE42yNmXnAqwSjzMaGrVlD90P9XCTzWeaqht7d9RPCUGF4ZAZEXhPHa4Ta2E9QISj1lIgBsmMq2fXG7UXh07z+VPvs4NwCO+xG5pQKf4aXlWza49EL9qbuU5R62D1xtHmzPnrSSV1WoKAe+9Wa/5Mw3Y84NPxwV4DVMeDD37ZICgaHN4RZ+QVORNnXh7zImwuqkS3+1zOvNabXGdZVjGH+pOdojjy+c7Xspp839FkdhPenjmt4B+DyQdXGpk2vz0bSUN2FmV2FDWPhlqvKI7tLBHA7tsTPS8kyG1J2mM3RNaalGrKSXyXSZy/RfWIj2w
sidebar_class_name: 'post api-method'
info_path: api/nildb/nildb-api
custom_edit_url: null
---

import MethodEndpoint from '@theme/ApiExplorer/MethodEndpoint';
import ParamsDetails from '@theme/ParamsDetails';
import RequestSchema from '@theme/RequestSchema';
import StatusCodes from '@theme/StatusCodes';
import OperationTabs from '@theme/OperationTabs';
import TabItem from '@theme/TabItem';
import Heading from '@theme/Heading';

<Heading
  as={'h1'}
  className={'openapi__heading'}
  children={'Delete all data'}
></Heading>

<MethodEndpoint
  method={'post'}
  path={'/api/v1/data/flush'}
  context={'endpoint'}
></MethodEndpoint>

:::info
You may use this test Bearer token we have created for development

```
eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpc3MiOiJkaWQ6bmlsOnRlc3RuZXQ6bmlsbGlvbjF4dnRuM2FhajQ4dGY3bm5zZW16MGQ2OGVwbjZlcHU0ZjRhNG5mYSIsImF1ZCI6ImRpZDpuaWw6dGVzdG5ldDpuaWxsaW9uMXd3c3Jqbmd4dnU5dGMzMzVsajlrM213d3JybDV3M3EyZDB1ZXR6In0.yOKg-wyJdyn9jK-KNtkjbi9PS0pF9wmgVmd7pIeNGhoTjhgZhzB62atbgzE45OGGYx0gUsw_i2k3K2AdFf_tuQ
```

:::

Remove all documents in a schema collection

<Heading
  id={'request'}
  as={'h2'}
  className={'openapi-tabs__heading'}
  children={'Request'}
></Heading>

<ParamsDetails parameters={undefined}></ParamsDetails>

<RequestSchema
  title={'Body'}
  body={{
    content: {
      'application/json': {
        schema: {
          type: 'object',
          required: ['data'],
          properties: {
            data: {
              type: 'object',
              properties: {
                schema: {
                  description: 'A universally unique identifier for the item.',
                  type: 'string',
                  format: 'uuid',
                  title: 'UUID',
                },
              },
            },
          },
        },
      },
    },
  }}
></RequestSchema>

<StatusCodes
  id={undefined}
  label={undefined}
  responses={{
    '200': {
      description: 'The total documents removed',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['data'],
            properties: {
              data: {
                type: 'object',
                properties: { deletedCount: { type: 'number' } },
              },
            },
          },
        },
      },
    },
    '400': {
      description: 'Validation or processing errors',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['ts', 'errors'],
            properties: {
              ts: {
                type: 'string',
                format: 'date-time',
                description: "The error's timestamp.",
              },
              errors: {
                description: 'A list of error messages',
                type: 'array',
                items: {
                  anyOf: [
                    { type: 'string' },
                    {
                      type: 'object',
                      properties: {
                        code: { type: 'string' },
                        message: { type: 'string' },
                      },
                    },
                  ],
                },
              },
            },
            title: 'Error',
          },
        },
      },
    },
    '401': { description: 'Missing or invalid JWT' },
    '500': { description: 'Internal server error' },
  }}
></StatusCodes>



================================================
FILE: docs/api/nildb/delete-data.api.mdx
================================================
---
id: delete-data
title: 'Delete data'
description: 'Delete data records that match a given filter'
sidebar_label: 'Delete'
hide_title: true
hide_table_of_contents: true
api: eJytVttOIzkQ/RXLLwtSLlwzs3kDwkjsambQEGYfIA+VdnVicNu9thuIovz7VNkJNAEtWu3yENxdZdflnDrupVQYCq/rqJ2VQzlCgxGFggjCY+G8CiLOIYoKYjEXIGb6Aa0otYnoZUcGLBqv40IOb5by7jHS/8lq0pERZoHWckQHSXr2+HeDIZ46Ra5LWTgb0UZeQl0bXQDH798FTmIpQzHHCngVFzVSWm56h0WkeLV3NfqoMbz2e13FiWgs5ekDGLPgNQUXWlFEXWr0onSeqqJXEasenbqOEqLXdkbPZKd66U3TaMV2HQ07XF9fjOSK7Ln8d/KrtL1spbjfkaCU5rTAtA3RN9jZyvqrszM3Ou2GuDAoKGW/eGn0JoUv+cUq/XFfQ+1syO042Nt724sx1UlejYnClalqlTHmZFLbAx3/PwECxb11jwbVDFXLe+qcQbDcuhxcnbkmR1t72Kaatso6eq+Sn2C0SnkJwo8CFxgCASbQe+f/UxVMT+055xsZ+aT1kZPtAmNobX/LF0oPu1FXKLfBZRjSob/RQJFDiFDVPe7IOtQ7JDY6JNCSh6A9AWYYXvgK3sOCHpnGuf128b1Mo/g6w1XnI+AKp/BtZZTdOuo7ttVqkrDaMPOcs5Qb/PbfFvRVZ7ioFm0fGEzxx19jDnL8HtwXhKWnsREBPc1y7oJcpZzi3BFWsnYhlQJxTk99qHX/Yb/P4tXPPEsKxbtD6krjDfnNY6zDsN+32qhpV2HlerQ0FLVnMT46fy9ZwjbSdsWsyV1KAvfcCD6HAyQ7sxzBp1nNiy8bUnCR23Q4EaOLUZcsokk94bk8vzo4HvwpwMwcxZ1XSaagIRPpFlEZlUCraqdtDL1by5trWBgHSlQNMUXbwjQKh7e2KzTEobgIoaFNpN7PjGMbPtVDcf5U6zz+L0axw5JfVRQF1S67QqOGYgx+hlFYoghpR0HZeAIv0MktSd2hetIWAnkozowmC1H9I/+EJ8/nj5cL4vyJcjHYnlh5WMLn43Jw1D3+tP+pe3Q8OOhOD8uie1D8PjgsBwMoYSBbwszHalu6BNeaoATy6FScXF6QI1MiI7HXO+rtvcHnpw46ihvlivBMDmrNZGdDnm3LrgCrxM2MgGum/KL/LRu/ZUpltr3s/8BxV0QnSDO9FZXz2LtN4sl8ryBpmYXEudZ9vV1D65b919f6muERn2K/NqBT9DQ9y/W03ZDCam7kPsfdhE8zR7Mz58Ekn+VyCgGvvVmt+HW60/gTgfaB1zBlXOiDgTYgKAaOhvQeyUWe5dy7Y86E3U2TJG9b1lna8o6TosA6/qPvpKUdl9+veCyn6y+SKgmg9PDI1wH9DiUtXJ0vSHJI75bSgJ01SRBlPpOZxkPavu5eC0FbkEmhWxlSe5LH2N2jpRZ11qVEfpZJX38BwyZTcg==
sidebar_class_name: 'post api-method'
info_path: api/nildb/nildb-api
custom_edit_url: null
---

import MethodEndpoint from '@theme/ApiExplorer/MethodEndpoint';
import ParamsDetails from '@theme/ParamsDetails';
import RequestSchema from '@theme/RequestSchema';
import StatusCodes from '@theme/StatusCodes';
import OperationTabs from '@theme/OperationTabs';
import TabItem from '@theme/TabItem';
import Heading from '@theme/Heading';

<Heading
  as={'h1'}
  className={'openapi__heading'}
  children={'Delete data'}
></Heading>

<MethodEndpoint
  method={'post'}
  path={'/api/v1/data/delete'}
  context={'endpoint'}
></MethodEndpoint>

:::info
You may use this test Bearer token we have created for development

```
eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpc3MiOiJkaWQ6bmlsOnRlc3RuZXQ6bmlsbGlvbjF4dnRuM2FhajQ4dGY3bm5zZW16MGQ2OGVwbjZlcHU0ZjRhNG5mYSIsImF1ZCI6ImRpZDpuaWw6dGVzdG5ldDpuaWxsaW9uMXd3c3Jqbmd4dnU5dGMzMzVsajlrM213d3JybDV3M3EyZDB1ZXR6In0.yOKg-wyJdyn9jK-KNtkjbi9PS0pF9wmgVmd7pIeNGhoTjhgZhzB62atbgzE45OGGYx0gUsw_i2k3K2AdFf_tuQ
```

:::

Delete data records that match a given filter

<Heading
  id={'request'}
  as={'h2'}
  className={'openapi-tabs__heading'}
  children={'Request'}
></Heading>

<ParamsDetails parameters={undefined}></ParamsDetails>

<RequestSchema
  title={'Body'}
  body={{
    content: {
      'application/json': {
        schema: {
          type: 'object',
          properties: {
            schema: {
              description: 'A universally unique identifier for the item.',
              type: 'string',
              format: 'uuid',
              title: 'UUID',
            },
            filter: {
              type: 'object',
              minProperties: 1,
              additionalProperties: true,
              description: 'MongoDB-style query filter',
              title: 'Filter',
            },
          },
        },
      },
    },
  }}
></RequestSchema>

<StatusCodes
  id={undefined}
  label={undefined}
  responses={{
    '200': {
      description: 'The result of the delete operations',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            properties: {
              acknowledged: { type: 'boolean' },
              deletedCount: { type: 'number' },
            },
          },
        },
      },
    },
    '400': {
      description: 'Validation or processing errors',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['ts', 'errors'],
            properties: {
              ts: {
                type: 'string',
                format: 'date-time',
                description: "The error's timestamp.",
              },
              errors: {
                description: 'A list of error messages',
                type: 'array',
                items: {
                  anyOf: [
                    { type: 'string' },
                    {
                      type: 'object',
                      properties: {
                        code: { type: 'string' },
                        message: { type: 'string' },
                      },
                    },
                  ],
                },
              },
            },
            title: 'Error',
          },
        },
      },
    },
    '401': { description: 'Missing or invalid JWT' },
    '500': { description: 'Internal server error' },
  }}
></StatusCodes>



================================================
FILE: docs/api/nildb/delete-query.api.mdx
================================================
---
id: delete-query
title: 'Delete query'
description: 'Delete a query'
sidebar_label: 'Delete'
hide_title: true
hide_table_of_contents: true
api: eJytVUtzGjkQ/isqXdau4mUbSMLNCWwV+8juJjh7IByaUQ/I1kizksY2RfHft1szGDCuzWV9wBr1++uvW1upMGRel1E7K0dyjAYjChD/VOg3siUDZpXXcSNH8628f4r0f7FbtGSEVaCz/Cvp0YVHMgnxo1Oku02f2qOSo+grbMnM2Yg2sgjK0ugMOGL3PnDYrQzZGgvgU9yUSIm45T1mUbaOHM2lVhyp9K5EHzUG1qc7+j2t4lZUVj+iD2DMhs+UmtCK4utcoxe58yKu6Spi0aEYTcwQvbYr+iZ5AZSrrCpyT3IdDSvc3U3Hcpf+OLFQOhvqLK57/fM0vmBwlc9QqISqkmTV7/XOFb+B0SoBIigzqi/DECgVgd47H+T/BF9kT43LMxxjODI/R4LSw3bUBdLlafIzAjI5/SkIVggRirLDtTah3miP0SEKl9d2gmwCrDAcOgHeA7OPG5QcgN38kScOnma4a52XfFpX5hSeV0bZNVHfkO12i9ThfdsnnKWsu97vXZ0X9Luu20W1aPvIzRS//D3jIIO32j2lXnoLRgT0xNIaBblLOcW1Uwx3YgwXA3FN310odffxqstjqRNStW1ImFTekM46xjKMul2rjVq2FRauQ0dDMTsW45PzD5Indz/RX5kzNUZprl9gYD8cIMnpe4ng0dNNffh5Twku8TUZbsV4Om6TRFQJEZ6yydfrwfBXAWblKO66SOMHFYloHonIqARaVTptY+h8t2xcwsY4UKKoiCfaZqZSOPpu20JDHIlpCBUZQTzwjWX4XI7E5LnUvh6lF6G48Ji5oqAoqC5ZFSo1EjPwK4zCEkFoQjPKxlPrAnk+WhUXVE8yoRaPxCejSUJE/5F+6iZP55fDWpw8Uy4G90tL3uTwfpAP++3Bu6t37f5geN1e3uRZ+zr7MLzJh0PIYcgc0jZ3qT0NHamp44/i9s8poc8UqJHvdfqd3lk/vumgo5grl4UXMhAUi4s9WV5LLgVYJeYralS15Ivu51r4uaZQza6D/Q8UL0V0whBvrCicxw4jQ6R2IRaQNpeFxLHm3dm/OidFbA/b7/x9ajgb8Tl2SwM6+U/zsG1mZ04bUzNUV/Sznx+agzUlwdLtdgkB77zZ7fi6dkyvHFmA17BkzOnNIwMERXPAA/eApCI/1Wm1Z5wDq5sqLa/XC5qXVG1xm2VYxv/UXRxtgfHkt8lswpPXvKpFWmbSwxOvdvodSTq4BFSa5HS3lQbsqkrLTdZemY48ckdj/mqsj5crbdujHAmgpDFzD2gJpFZTTORvmXblvyqf194=
sidebar_class_name: 'delete api-method'
info_path: api/nildb/nildb-api
custom_edit_url: null
---

import MethodEndpoint from '@theme/ApiExplorer/MethodEndpoint';
import ParamsDetails from '@theme/ParamsDetails';
import RequestSchema from '@theme/RequestSchema';
import StatusCodes from '@theme/StatusCodes';
import OperationTabs from '@theme/OperationTabs';
import TabItem from '@theme/TabItem';
import Heading from '@theme/Heading';

<Heading
  as={'h1'}
  className={'openapi__heading'}
  children={'Delete query'}
></Heading>

<MethodEndpoint
  method={'delete'}
  path={'/api/v1/queries'}
  context={'endpoint'}
></MethodEndpoint>

:::info
You may use this test Bearer token we have created for development

```
eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpc3MiOiJkaWQ6bmlsOnRlc3RuZXQ6bmlsbGlvbjF4dnRuM2FhajQ4dGY3bm5zZW16MGQ2OGVwbjZlcHU0ZjRhNG5mYSIsImF1ZCI6ImRpZDpuaWw6dGVzdG5ldDpuaWxsaW9uMXd3c3Jqbmd4dnU5dGMzMzVsajlrM213d3JybDV3M3EyZDB1ZXR6In0.yOKg-wyJdyn9jK-KNtkjbi9PS0pF9wmgVmd7pIeNGhoTjhgZhzB62atbgzE45OGGYx0gUsw_i2k3K2AdFf_tuQ
```

:::

Delete a query

<Heading
  id={'request'}
  as={'h2'}
  className={'openapi-tabs__heading'}
  children={'Request'}
></Heading>

<ParamsDetails parameters={undefined}></ParamsDetails>

<RequestSchema
  title={'Body'}
  body={{
    required: true,
    content: {
      'application/json': {
        schema: {
          type: 'object',
          required: ['id'],
          properties: {
            id: {
              description: 'A universally unique identifier for the item.',
              type: 'string',
              format: 'uuid',
              title: 'UUID',
            },
          },
        },
      },
    },
  }}
></RequestSchema>

<StatusCodes
  id={undefined}
  label={undefined}
  responses={{
    '204': { description: 'Resource deleted' },
    '400': {
      description: 'Validation or processing errors',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['ts', 'errors'],
            properties: {
              ts: {
                type: 'string',
                format: 'date-time',
                description: "The error's timestamp.",
              },
              errors: {
                description: 'A list of error messages',
                type: 'array',
                items: {
                  anyOf: [
                    { type: 'string' },
                    {
                      type: 'object',
                      properties: {
                        code: { type: 'string' },
                        message: { type: 'string' },
                      },
                    },
                  ],
                },
              },
            },
            title: 'Error',
          },
        },
      },
    },
    '401': { description: 'Missing or invalid JWT' },
    '500': { description: 'Internal server error' },
  }}
></StatusCodes>



================================================
FILE: docs/api/nildb/delete-schema.api.mdx
================================================
---
id: delete-schema
title: 'Delete schema'
description: 'Delete a schema'
sidebar_label: 'Delete'
hide_title: true
hide_table_of_contents: true
api: eJytVUtzIjkM/isuXzap4pUEmN2+ZQa2in3MbM2QmQPDQbQFOHHbvbY7CUXx31dyNwFCauayHBrbkizp0yd5KxWG3OsyamdlJkdoMKIAEfI1FiBbMmBeeR03Mptt5f1TpP/5bt6SEVaB1vJLrUgnHv+tMMT3TpHyNm21RyWz6CtsydzZiDayCMrS6BzYZ/c+sOOtbBzSKm5KpFDc4h7zKFtHF82kVuyp9K5EHzUG1qcz+p7mcSsqqx/RBzBmw2sKTWhF/vVSoxdL50Vc01HEokM+Gp8hem1XtCd5ARSrrCq6nuQ6Gla4u5uM5C79OLBQOhvqKK57/fMwPmNwlc9RqISrkmTV7/XOFb+C0SoBIigyyi/HECgUgd47H+T/BF/km5orz3CM4cj8HAkKD9tRF0iHp8FPCch06S9BsEKIUJQdzrVx9UZ5jA5RuGVtJ8gmwArDoRLgPWxoywVKF4DdfFomEp5GuGudp3yaV+4UnmdG0TVe35DtdvNU4X3ZxxylrKve712dJ/S3rstFuWj7yMUUf3ybspPBW+WeUC29BSMCemJpjYLcpZji2imGOzGGk4G4pn0XSt19vOrWhQ6pM9k2JEwqb0hnHWMZsm7XaqMWbYWF69DSkM+Oxfjk/IPk1t23dGrdGqPU2C8w8D3sIMlpv0Dw6OmkXvy+pwSn+JoMt2I0GbVJIqqECHfZ+Mv1YPinALNy5HddpPaDikTUj0RkVAKtKp22MXS+WzYuYWMcKFFUxBNtc1MpzL7bttAQMzEJoSIjiAe+sQyfy0yMn0vt61Z6EYoLj7krCvKC6pJVoVKZmIJfYRSWCEIdmlM0nkoX6OajUXFB+SQTKnEmPhhNEiL6z/RTNbk7Px/G4viZYjG4H1ryZgm/DpbDfnvw7upduz8YXrcXN8u8fZ3/NrxZDoewhCFzSNulS+Vp6EhFHb0Xt/9MCH2mQI18r9Pv9M7q8VUHHcVMuTy8kIGgmF/syfJacinAKjFbUaGqBR90P9bCjzWFanYd7H+ieCmiE4Z4Y0XhPHYYGSK1C7GANLksJI41L8/Lu3OSxfYw/t54ohrWRnyO3dKATh5SR2yb7pnRzNQM1tWe1pAG4JrCYOl2u4CAd97sdnxMBfP84NHyEbyGBaNOzx4ZICjqBG65ByQV+aGOqz3lGFjdVGl8vR7RPKZqi9s8xzL+UHd+NAdG47/G0zH3XvOuFmmcSQ9PPNzpm0lauIRU6uV0tpUG7KpK403WtzIhuemOGv1VYx+PV5q3RzESQElj6h7QEkitJpnIe5mm5X/JEtiW
sidebar_class_name: 'delete api-method'
info_path: api/nildb/nildb-api
custom_edit_url: null
---

import MethodEndpoint from '@theme/ApiExplorer/MethodEndpoint';
import ParamsDetails from '@theme/ParamsDetails';
import RequestSchema from '@theme/RequestSchema';
import StatusCodes from '@theme/StatusCodes';
import OperationTabs from '@theme/OperationTabs';
import TabItem from '@theme/TabItem';
import Heading from '@theme/Heading';

<Heading
  as={'h1'}
  className={'openapi__heading'}
  children={'Delete schema'}
></Heading>

<MethodEndpoint
  method={'delete'}
  path={'/api/v1/schemas'}
  context={'endpoint'}
></MethodEndpoint>

:::info
You may use this test Bearer token we have created for development

```
eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpc3MiOiJkaWQ6bmlsOnRlc3RuZXQ6bmlsbGlvbjF4dnRuM2FhajQ4dGY3bm5zZW16MGQ2OGVwbjZlcHU0ZjRhNG5mYSIsImF1ZCI6ImRpZDpuaWw6dGVzdG5ldDpuaWxsaW9uMXd3c3Jqbmd4dnU5dGMzMzVsajlrM213d3JybDV3M3EyZDB1ZXR6In0.yOKg-wyJdyn9jK-KNtkjbi9PS0pF9wmgVmd7pIeNGhoTjhgZhzB62atbgzE45OGGYx0gUsw_i2k3K2AdFf_tuQ
```

:::

Delete a schema

<Heading
  id={'request'}
  as={'h2'}
  className={'openapi-tabs__heading'}
  children={'Request'}
></Heading>

<ParamsDetails parameters={undefined}></ParamsDetails>

<RequestSchema
  title={'Body'}
  body={{
    required: true,
    content: {
      'application/json': {
        schema: {
          type: 'object',
          required: ['id'],
          properties: {
            id: {
              description: 'A universally unique identifier for the item.',
              type: 'string',
              format: 'uuid',
              title: 'UUID',
            },
          },
        },
      },
    },
  }}
></RequestSchema>

<StatusCodes
  id={undefined}
  label={undefined}
  responses={{
    '204': { description: 'Resource deleted' },
    '400': {
      description: 'Validation or processing errors',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['ts', 'errors'],
            properties: {
              ts: {
                type: 'string',
                format: 'date-time',
                description: "The error's timestamp.",
              },
              errors: {
                description: 'A list of error messages',
                type: 'array',
                items: {
                  anyOf: [
                    { type: 'string' },
                    {
                      type: 'object',
                      properties: {
                        code: { type: 'string' },
                        message: { type: 'string' },
                      },
                    },
                  ],
                },
              },
            },
            title: 'Error',
          },
        },
      },
    },
    '401': { description: 'Missing or invalid JWT' },
    '500': { description: 'Internal server error' },
  }}
></StatusCodes>



================================================
FILE: docs/api/nildb/execute-query.api.mdx
================================================
---
id: execute-query
title: 'Execute query'
description: 'Execute a query with variables'
sidebar_label: 'Execute'
hide_title: true
hide_table_of_contents: true
api: eJytVktvGzcQ/isEL7UBPfyS0u7NiVVALZo4tZ0eHB9Gy1mJNpfcklxbgqD/3hnuypIltQaK+CCTnBnON6+Pu5QKQ+51FbWzMpOjOeZ1RAHi7xr9QrzoOBPP4DVMDAbZkYHkXseFzO6X8vEl0v+H1UNHRpgGWsuvbCbpwCPdEOJHp0h3mbbao5JZ9DV2ZO5sRBtZBFVldA6MoP8YGMZShnyGJfAqLiokYG7yiHmUna2L7qVWdLBBR14r7yr0UdOObElOv28jvBS11c/oAxiz4DXBFFoRFl1o9KJwXsQZHUUse3R96z9Er+2U9iQvgXDLuk7uo46GFe7uxldytQ3nAHhQSjMOMNdbQDkjq/TH4YXK2dCYn52c7AeQMiywKZQSoc5zDKGoKRz5g/KqIMJ+NtPpxhK8B/bIifpfwVK0F4cC/AZGqwRbUC0IA8dHyRfovfPhRwUZ+ab2yr1Y43ZE+7UneNiNukQ6fAv+llonXfpTEKwQIpRVjxujdXWgIY0OUbiisRNkE2Cahu3fMg128aVIE/gW4aqzH/LbuHKncD8yQtd6PSBbrR5SrdaNPmKUcl2/0/2A/tBNuSgWbZ+5mOK3v27ZyeBQucdUS09NIgJ6mssmC3KVMMWZo1rJyoUUCsQZ7fpQ6f7zaZ8ZisLqt6OQyIlvCCkztTekO4uxClm/b7VRk67C0vVoachzz2J8cf5JMnutWe2GO6fJVOK212TwPewgyWk/QfDo6aRZ/LpuDA50tyUuxdX4qksSUae8MLuMbs4Gw98FmKkjv7My0Q7UJCIeonamwUarKqdtDL3vlo0rWBgHSpQ1dYu2uakVZt9tV2iImRiHUJMRxE3XsQznVSZG80r7ZqBeheLIY+7KkrygOmZVqFUmbsFPMQpLbSIU5oTGUwED3bxFkUcUTzKhQmfik9EkoXZ/Tz/VlGf0z83TMJoTFoNrspbnBfw8KIYX3cGH0w/di8HwrDs5L/LuWf7L8LwYDqGAoXxLsnyrtoVL1Wp7lGp89VFcXo9ZlzqiKcRJ76J3sleebzroKO6Vy8Nrb1BmHo7WvbMrORZglbifUt3qCR/0PzfCz01HNc22sX9H8VhEJwy1kRWl89jjRHVSy5eQ6MxCarn105we5t0olhtOfP8Nb3s64jz2KwM6OUzzsmxn7J54VXPuTumnnTNmy3bSaGJmPJKkt1xOIOCdN6sVHzfg6JtgU6P0hUAGCIomhkfzCUlFfmoAd28ZDaubOpHdLqEzqTUWl/TSVfE/dR+2WOP6yw0P46T9AikT9UkPL/wQ0G8maeFSAtPEp7OlNGCndaJC2dzJDcajuUUHO+O/TcXEzVsIKT1J49Y9oaUUddpQIu9lYtZ/ABcPSn8=
sidebar_class_name: 'post api-method'
info_path: api/nildb/nildb-api
custom_edit_url: null
---

import MethodEndpoint from '@theme/ApiExplorer/MethodEndpoint';
import ParamsDetails from '@theme/ParamsDetails';
import RequestSchema from '@theme/RequestSchema';
import StatusCodes from '@theme/StatusCodes';
import OperationTabs from '@theme/OperationTabs';
import TabItem from '@theme/TabItem';
import Heading from '@theme/Heading';

<Heading
  as={'h1'}
  className={'openapi__heading'}
  children={'Execute query'}
></Heading>

<MethodEndpoint
  method={'post'}
  path={'/api/v1/queries/execute'}
  context={'endpoint'}
></MethodEndpoint>

:::info
You may use this test Bearer token we have created for development

```
eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpc3MiOiJkaWQ6bmlsOnRlc3RuZXQ6bmlsbGlvbjF4dnRuM2FhajQ4dGY3bm5zZW16MGQ2OGVwbjZlcHU0ZjRhNG5mYSIsImF1ZCI6ImRpZDpuaWw6dGVzdG5ldDpuaWxsaW9uMXd3c3Jqbmd4dnU5dGMzMzVsajlrM213d3JybDV3M3EyZDB1ZXR6In0.yOKg-wyJdyn9jK-KNtkjbi9PS0pF9wmgVmd7pIeNGhoTjhgZhzB62atbgzE45OGGYx0gUsw_i2k3K2AdFf_tuQ
```

:::

Execute a query with variables

<Heading
  id={'request'}
  as={'h2'}
  className={'openapi-tabs__heading'}
  children={'Request'}
></Heading>

<ParamsDetails parameters={undefined}></ParamsDetails>

<RequestSchema
  title={'Body'}
  body={{
    required: true,
    content: {
      'application/json': {
        schema: {
          type: 'object',
          required: ['id', 'variables'],
          properties: {
            id: {
              description: 'A universally unique identifier for the item.',
              type: 'string',
              format: 'uuid',
              title: 'UUID',
            },
            variables: { type: 'object', additionalProperties: true },
          },
        },
      },
    },
  }}
></RequestSchema>

<StatusCodes
  id={undefined}
  label={undefined}
  responses={{
    '200': {
      description: 'Query executed successfully',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['data'],
            properties: {
              data: {
                type: 'array',
                items: { type: 'object', additionalProperties: true },
              },
            },
          },
        },
      },
    },
    '400': {
      description: 'Validation or processing errors',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['ts', 'errors'],
            properties: {
              ts: {
                type: 'string',
                format: 'date-time',
                description: "The error's timestamp.",
              },
              errors: {
                description: 'A list of error messages',
                type: 'array',
                items: {
                  anyOf: [
                    { type: 'string' },
                    {
                      type: 'object',
                      properties: {
                        code: { type: 'string' },
                        message: { type: 'string' },
                      },
                    },
                  ],
                },
              },
            },
            title: 'Error',
          },
        },
      },
    },
    '401': { description: 'Missing or invalid JWT' },
    '500': { description: 'Internal server error' },
  }}
></StatusCodes>



================================================
FILE: docs/api/nildb/get-health-status.api.mdx
================================================
---
id: get-health-status
title: "Health"
description: "Returns 200 OK if the service is healthy"
sidebar_label: "Health"
hide_title: true
hide_table_of_contents: true
api: eJyVU8Fu2zAM/RVCl7VAmwTFtoNv3dqtWYFuWLLtkObAWEzMTZY8iW4bGPn3Una6ruuh2MkyH6lHvkd1xlIqIzfCwZvCfCVpo09wMpnA50vgNUhFkCjecEnACSpCJ9XWHJnQUMRcNrVauCG56KGZoLRJccFNMsXCXAVLZnlkIqUm+EQa7Izenz9PyWfPaXa7I1OTVGHPofc2KJX+jIcUDeTuKGauzrTRKVaJNKkYjz07uzq2VIeRHp2yjDzJbYi/zG6ZC8s2smxnZUX10NfPW8kf2Ta0vycT9Lj+rwgjRY0Mhw8h1qj55tOPuQafDnMKZ9OzY0WgTew3vY7ns5M3by8B3SYob1XDOkTAViEvXKKQBfK2Cewlja59Lm5w6wJaqNskwL50raXi2h8DoxQwTanVIhQQ1gkE6yZjdNcUcH7X8GDQIwgHkcpQ18pC9jCnYmsLmGNUbcGrU2Cp1G4iOk56M9vc2popwoHO05dwSgW8d6zIq/Rifm8h+3XodWVxWUh14+wdnH6ZqmzZu0Gyyej1aPJMyO+cWGBhQ5n+uKgzLA8eXP4XOQT0FhYbVbhd5cD4agCvBu+HtXisfyHxECSAU8M91CHSKI+kWxiS1OjzUB775bh42Mcn7XemDF5UlP97XPsFFLqTceOQe85+ubv9A1iY/QPQRa60mRzpuhUm+hbdbpfDv1uKW43r8QYj4yprv1j+/aQ+ns/VoHvTeGP9
sidebar_class_name: "get api-method"
info_path: api/nildb/nildb-api
custom_edit_url: null
---

import MethodEndpoint from "@theme/ApiExplorer/MethodEndpoint";
import ParamsDetails from "@theme/ParamsDetails";
import RequestSchema from "@theme/RequestSchema";
import StatusCodes from "@theme/StatusCodes";
import OperationTabs from "@theme/OperationTabs";
import TabItem from "@theme/TabItem";
import Heading from "@theme/Heading";

<Heading
  as={"h1"}
  className={"openapi__heading"}
  children={"Health"}
>
</Heading>

<MethodEndpoint
  method={"get"}
  path={"/health"}
  context={"endpoint"}
>
  
</MethodEndpoint>



Returns 200 OK if the service is healthy

<ParamsDetails
  parameters={undefined}
>
  
</ParamsDetails>

<RequestSchema
  title={"Body"}
  body={undefined}
>
  
</RequestSchema>

<StatusCodes
  id={undefined}
  label={undefined}
  responses={{"200":{"description":"Service is healthy"}}}
>
  
</StatusCodes>


      


================================================
FILE: docs/api/nildb/get-node-details.api.mdx
================================================
---
id: get-node-details
title: 'Node Details'
description: 'Returns information about the node including its DID, public key and build details'
sidebar_label: 'Node details'
hide_title: true
hide_table_of_contents: true
api: eJy1Vm1v2zYQ/iuEviwBYluS32R9S+es8DoERetuwNx8oMSTxUQiVZJq7Br+77uT7ChO2noYMCCIaR5599zd8xy98wTY1MjKSa282PsArjbKMqkybUpOu4wnunbM5cCUFoCmtKiFVGsmnWXzxfyKVXVSyJQ9wJZxJVhSy0IwAY7LwnpXnq7ANK4WAkOswd2in/mT2fG19eKVR7ve3ZVnwFZaWcDNnRf6Pn2cojzcfYEMXaVaOVCObvCqQkxN2MG9pWs7z6Y5lJxWblsBOtLJPaTOo5hfamlAEA7ruHG4vPKaRPBTSPrfZvkOtriuTUFQK0O5OdliPV7s/FtnsFB4vq0m7gjuoOdkSWhPk1riJnooK/aYg+rq/cgt6yDBBk8U5Dv0w1EvCHvBZOnP4mEU+6O+Pxv/7e2PwM/keUCR6rKUZPsKxhKUV3k1B/9bUm8aKrhjat9NIBwtw2E8nuFfA/4A6DsBT32/lY61Z1nObc60YVJg92UmwZxESv2RHwCEE0hhmE2D8TgT0yiKRlHCsyAMUyGmfohV2XdVOBue6PoLcrCS7HjneUy/j+3w9vt9S5+z7uaITTnDC/kNBFs8JcIuUGKXTGfPed6FQd+xkkXssMAKHK0LdBhArQzU3wq3WRebWbYZzYZFaCLIJkYUhtcjYYVKKeGO1mcxvu90/iM8fiiCLJhFIpvxySjLeDhNw9kwmgQJTyFKIz8RkySAYOyD70fhZJpNs9kIOMxgkg4jv8FE8voZ4WojX4H79OEPUo6BTjopVywBZoCj8E/VkztX2XgwwHqJpCeg1P1D6fpYxkdtHjxqnZOuOX5Nk6YZUPt909MSXK4P44xmA3c5fhk0Ewm/WzBECpTZrk3mXwW8o4spJue2H2lUtfK7f3wuBvJDARo7fk+Am4bu7eK3Y4l+/2v5qkTXNK57aGG1pQFOhbr5GI4n7xgv1hrj5iXDIjNeowkJiPMTyQhKVFoqZ/ufFV2u+LbQXLCytu7wHED8WfWY5C5mC2trvMRdJ3uywaaK2c2mku1T0BnZhQGSMUYBcUlHeS1ituQGS9v2UTxpw6Jn+UIbTWRrY/ZrIdGCmjx3vmktPXHtdGtbjN2Yv2HX7xfPRuFRxi8L+ae0OHVWQqf2qYuYw93FscsvLZfNw7haY4XrhDYGt63xtu19S4vu/pmDl8xpVmDDFSu1gT6lhCTU1pW8GV2KN+QgxrLupT1JYte9lv/Ps38grIONG1QFl+qZslu9rLxWL8j7HLHTxm6XcAufTLHf0/aXGgwOphUuv3IjeUKtWt2hoxy4QN6TwB5odnnXaQpV847xoqbAr34BkL6edPv2Zok0+AeZiRCM
sidebar_class_name: 'get api-method'
info_path: api/nildb/nildb-api
custom_edit_url: null
---

import MethodEndpoint from '@theme/ApiExplorer/MethodEndpoint';
import ParamsDetails from '@theme/ParamsDetails';
import RequestSchema from '@theme/RequestSchema';
import StatusCodes from '@theme/StatusCodes';
import OperationTabs from '@theme/OperationTabs';
import TabItem from '@theme/TabItem';
import Heading from '@theme/Heading';

<Heading
  as={'h1'}
  className={'openapi__heading'}
  children={'Node Details'}
></Heading>

<MethodEndpoint
  method={'get'}
  path={'/about'}
  context={'endpoint'}
></MethodEndpoint>

Returns information about the node including its DID, public key and build details

<ParamsDetails parameters={undefined}></ParamsDetails>

<RequestSchema title={'Body'} body={undefined}></RequestSchema>

<StatusCodes
  id={undefined}
  label={undefined}
  responses={{
    '200': {
      description: 'Details about the node',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['started', 'build', 'did', 'publicKey', 'url'],
            properties: {
              started: {
                type: 'string',
                format: 'date-time',
                description: 'Timestamp when the node was started',
                example: '2024-12-16T09:38:04.095Z',
              },
              build: {
                type: 'object',
                required: ['time', 'commit', 'version'],
                properties: {
                  time: {
                    type: 'string',
                    format: 'date-time',
                    description: 'Build timestamp',
                    example: '2024-12-24T23:59:59Z',
                  },
                  commit: {
                    type: 'string',
                    description: 'Git commit hash or identifier',
                    example: 'c0401ee26ece3f7155fd788848baf122cdd702ed',
                  },
                  version: {
                    type: 'string',
                    description: "Node's api version",
                    example: '0.4.0',
                  },
                },
              },
              did: {
                type: 'string',
                description: 'Decentralized Identifier (DID) of the node',
                example:
                  'did:nil:testnet:nillion1eunreuzltxglx9fx493l2r8ef6rdlrau4dsdnc',
              },
              publicKey: {
                type: 'string',
                description: 'Public key of the node',
                example:
                  '02d1f198df9a64ffa27c293861bace8c80bd6b1e150e008267f7f94eae9e6c380c',
              },
              url: {
                type: 'string',
                format: 'uri',
                description: 'URL where the node can be reached',
                example: 'https://nildb-demo.nillion.network',
              },
            },
            title: 'AboutNode',
          },
        },
      },
    },
  }}
></StatusCodes>



================================================
FILE: docs/api/nildb/get-queries.api.mdx
================================================
---
id: get-queries
title: 'Get queries'
description: 'List account queries'
sidebar_label: 'Get'
hide_title: true
hide_table_of_contents: true
api: eJy1V9ty2zYQ/RUMX2rP2JKdOplGb07tZtxLmk6c9CHReCBiJcEGAQYAbSka/XvPgqJEiUo0nbQvEglgF7tnz164yBSF3OsyamezQfa7DlHIPHeVjeJzRV5TyE6yQHnldZxng4+L7P4p4n+4HJ5kUU4CnrO/cHKeYcFTKJ0NEBossmdnZ/y3fcPtlJoLfgitK3JnI9nIArIsjc4lC/TvA0stspBPqZD8FOclQY8b3VMeM77yc6U9KbZDySjZjNK7knzUtR1pdSMpvZdzCOpIRdqXxvw5Tq7t6t7Wc6dV159LUVn9SD5Ay5yf4ZLQCq7osSYvxs6LCJ/5th5Urq4I0Ws7wTv2Cwm3s6qCeuzraPjA+/c3V9nyJLvLPclIquVAVxYe0mnUBWGxC3fSgFfBJ0KURdlLmqtSfadmI0GXWs2W8uV2WO6SZ2tPWlcPNw5fubwqANsrGQjmfTvQViaL3JMlz/ys2XGSPUqv5cggXh0WJJF94QscJbDQKgSQCTkXK/XbqCyb+/ZyWlEO4700OpBqE+Do6ubqWLhxYgEUQJVwfiKt/pKisocTNAOMCRSl1cBqM4iA1lLkZwOZc6qsp+qLibOJmb0czy5e/mie+Z9o/MIr42V1oYKyOZu8SZyuzQgX4IE99SGRO2OANVOlpq2uM3SOTJWTiadJzaNSl2S07UK0S+dlOyJ7TWjUN8EVHoUBTBIbuZMOE6RSmnVI83YrxM7SVxK5zZ20t83mDllq+W5ekK0K1rFewPsoUXDknCHJ0WRmZ8PlTr7s6uIcaaifyueHlcMHub/H/qaY/Ws/6lp42NhWtTxo2v8B5rID1yVbvsFsyAfWvOymuV0zjWZoZg2N+TRSd4w/JSRYbkWChPO19rDFv07j2IaCjRzuWJkWk/EX+5rhB5QLVecU8g2o5RQCJyR57/x/1haTEyuV3eiE72gASSlA3e4sq6v2FFvD8wWwTScEZIKc0Lcglna+ndJrRh7q1rlTe1gH61a37ktJplGLaNdsZdbE77zr0B+6Dhd80faRgyl+/fuWL3m+L9w3iKVH1RJoORgZahRSJSgoTh1ilU0oeSLjFC99Wer+43m/PYixYEiAVN7gzDTGMgz6fXQGNTpVVLjeqkn00DCenH/ImJXNBPeOCVMDlOa4NQasp+mk/D4i6etcTA+/NHxg/3aZcCnQ406xg2bKcHCnu3737PmL34Q0E4d7p0XqKLLCFup7zs1foOOWTtsYep8sC5dybpxUoqhAEm1zUykafLKnQss4EDchVJykcUM23qNZORDXs1L7nRlHHHnKXYGRQpE65qOyUgNxKz0wFhbsONCz080hDMTPBsMBT6uHzqdQajt2CdcViRCNq1fi8u0NjyeIXQ3ZWe+id9YB8oMOOoqPyuVhHUX4MDxqory7c4yKpcTHCRCuRrzQf1NvvqljX9NiI3/g4LGITqDyeisK56nHLoGNLsRC2s0Qlb2m9tfBTutYl6yvfU2sGBdpFvulkTpdkti8WDEfjanUjNc5fhpBsHgKS3h3sRhhSnzvzXLJy6m08zfJZtxIXygQIKl4YkO6PNCcqZrnVMY0KZoqVZzdqsrZsk7H19fMdqZtK1V2UqNdnVCuWrphZjpx6x7IwtSTlRGR31PPWv4DKBywKg==
sidebar_class_name: 'get api-method'
info_path: api/nildb/nildb-api
custom_edit_url: null
---

import MethodEndpoint from '@theme/ApiExplorer/MethodEndpoint';
import ParamsDetails from '@theme/ParamsDetails';
import RequestSchema from '@theme/RequestSchema';
import StatusCodes from '@theme/StatusCodes';
import OperationTabs from '@theme/OperationTabs';
import TabItem from '@theme/TabItem';
import Heading from '@theme/Heading';

<Heading
  as={'h1'}
  className={'openapi__heading'}
  children={'Get queries'}
></Heading>

<MethodEndpoint
  method={'get'}
  path={'/api/v1/queries'}
  context={'endpoint'}
></MethodEndpoint>

:::info
You may use this test Bearer token we have created for development

```
eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpc3MiOiJkaWQ6bmlsOnRlc3RuZXQ6bmlsbGlvbjF4dnRuM2FhajQ4dGY3bm5zZW16MGQ2OGVwbjZlcHU0ZjRhNG5mYSIsImF1ZCI6ImRpZDpuaWw6dGVzdG5ldDpuaWxsaW9uMXd3c3Jqbmd4dnU5dGMzMzVsajlrM213d3JybDV3M3EyZDB1ZXR6In0.yOKg-wyJdyn9jK-KNtkjbi9PS0pF9wmgVmd7pIeNGhoTjhgZhzB62atbgzE45OGGYx0gUsw_i2k3K2AdFf_tuQ
```

:::

List account queries

<ParamsDetails parameters={undefined}></ParamsDetails>

<RequestSchema title={'Body'} body={undefined}></RequestSchema>

<StatusCodes
  id={undefined}
  label={undefined}
  responses={{
    '200': {
      description: "The account's queries",
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['data'],
            properties: {
              data: {
                type: 'array',
                items: {
                  allOf: [
                    {
                      type: 'object',
                      properties: {
                        _id: {
                          description:
                            'A universally unique identifier for the item.',
                          type: 'string',
                          format: 'uuid',
                          title: 'UUID',
                        },
                        _created: {
                          type: 'string',
                          format: 'date-time',
                          description: 'The creation timestamp.',
                        },
                        _updated: {
                          type: 'string',
                          format: 'date-time',
                          description: 'The last update timestamp.',
                        },
                      },
                      required: ['_id', '_created', '_updated'],
                      title: 'DocumentBase',
                    },
                    {
                      type: 'object',
                      required: ['name', 'owner', 'schema', 'variables'],
                      properties: {
                        name: {
                          description: 'A user friendly query name',
                          type: 'string',
                        },
                        owner: {
                          description:
                            'The decentralised identifier (DID) of the owning organization',
                          type: 'string',
                          example:
                            'did:nil:testnet:nillion1eunreuzltxglx9fx493l2r8ef6rdlrau4dsdnc',
                        },
                        schema: {
                          description:
                            "The starting schema collection for this query's aggregation pipeline",
                          type: 'string',
                          format: 'uuid',
                        },
                        variables: {
                          description: "The query's required runtime variables",
                          type: 'object',
                          additionalProperties: {
                            oneOf: [
                              {
                                type: 'object',
                                required: ['type', 'description'],
                                properties: {
                                  type: {
                                    type: 'string',
                                    enum: [
                                      'string',
                                      'number',
                                      'boolean',
                                      'date',
                                    ],
                                  },
                                  description: { type: 'string' },
                                },
                                title: 'QueryVariable',
                              },
                              {
                                type: 'object',
                                required: ['type', 'description', 'items'],
                                properties: {
                                  type: { type: 'string', enum: ['array'] },
                                  description: { type: 'string' },
                                  items: {
                                    type: 'object',
                                    required: ['type'],
                                    properties: {
                                      type: {
                                        type: 'string',
                                        enum: [
                                          'string',
                                          'number',
                                          'boolean',
                                          'date',
                                        ],
                                      },
                                    },
                                  },
                                },
                                title: 'QueryArrayVariable',
                              },
                            ],
                          },
                        },
                        pipeline: {
                          description:
                            "An query's execution pipline defined as an array of objects",
                          type: 'array',
                          items: { type: 'object' },
                        },
                      },
                    },
                  ],
                  title: 'Query',
                },
              },
            },
          },
        },
      },
    },
    '400': {
      description: 'Validation or processing errors',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['ts', 'errors'],
            properties: {
              ts: {
                type: 'string',
                format: 'date-time',
                description: "The error's timestamp.",
              },
              errors: {
                description: 'A list of error messages',
                type: 'array',
                items: {
                  anyOf: [
                    { type: 'string' },
                    {
                      type: 'object',
                      properties: {
                        code: { type: 'string' },
                        message: { type: 'string' },
                      },
                    },
                  ],
                },
              },
            },
            title: 'Error',
          },
        },
      },
    },
    '401': { description: 'Missing or invalid JWT' },
    '500': { description: 'Internal server error' },
  }}
></StatusCodes>



================================================
FILE: docs/api/nildb/get-schemas.api.mdx
================================================
---
id: get-schemas
title: 'Get schemas'
description: "List accounts' schemas"
sidebar_label: 'Get'
hide_title: true
hide_table_of_contents: true
api: eJytVl1TGzcU/SsavQRmwAZKMo3fSKEZ+pF0JpA+EIaRV9e2iFbaSFqw4/F/77na9cfabnlI/eJdSffznHu0c6kpFsFUyXgnB/IPE5NQReFrl+IrEYsJlSrKIxmpqINJMzm4m8vH54T/+8X9kUxqHPEsP+WTEiuBYuVdJCzP5dnJCf91g9xMSPgwVs58V7z0Km4EKrxL5BJbqaqypshH+o+RTeeyOchPaVYRnPnhIxVJctxvtQmkORutUs6lCr6ikEyTTF5dW6oQ1AyGJlGZ95W1H0e5wG3fXT8PRu8WdSFqZ54oRHiZ8fO3moTRKMWMDAUx8kEkFM7RenDZhogpGDfGO/ZLhbJlXcM99k2yfOD29vpSLo7kQxFIJdIbBezaokI6TqYkLO72PHvAq+ATMamy6mXPdaV/0LNVoE3jpuN80YXlIVe2qmQj9P264Etf1CXa9k5FQnr/DbRTOSP/7CgwS1cs7CKWj+2DLDIywZDTAK2xFq3PbisWyyB72aypQMZBWRNJb6J+cHl9eSj8KEMPB3DVof4eItAUvcud0EYPnLGDhH46SvxsYXNKtQtUf7dpOrbTt6Pp+duf7Fn4mUZvgrZB1ec6aldwyutp2c2ZJ2pZcs1pJy+eUEEGkUdFDAnwg7EY5pB5YxzOcCWtWeGtBSadOlqYFovFBqatOiya35E83ycLn5vgHAizAgALipEbRiH48L9pQ2JPrcsdoqT4A1OQnULMuuPVhtrDPstiC27kEwI2UY0prlu5K1Bu1hWoFTlfkqzCa9qtDNm1UffsAcCM1RLDK85SLvE73S3oT9PAhVqMy0wSv/19w0Fe74P7GlgGp6wAu6CbTReyZJSUJh5YyTHlSlSa4KWvKtN/Ou1v3klsGHND6mBxZpJSFQf9PiZFD481lb7XDk0PA/Tsw1fJtFxeZpmWTYPylbbqAftZygm/D0mFLDDNw69LPnB920y4EJj5Y+xgqrgdPC9Xn85ev/ldKDv2iDsp822gamxBKApWQAEJqjwGLPa+ODau1Mx6pUVZgyTGFbbWNPjijoVRaSCuY6xhpNKabLxH02ogrqaVCVtCLw4CFb6ErmrSh3xU1XogblRAj4UDO17QsBw5xoH4xUItE1j+0vkMpXEjn/vakghoXL4TF39do22MXdOyk95572SnkZ9NNEncaV/EFYqo4f5gifL2zqFQTou7MTpcD3mh/6HZ/NBg39Bibf/CwUNWRAvAnSihgz0uCWz0MZXKrW8V+R4dXJOyU8N8LVn//mnVci7RNPUrq0wOk/k8b7l/B7kz3LHT1R2XtWuCXHh3Ph/isrwNdrHgZXx5BP5Qw+OTCkYNufX4XIMBKc13GAbmK82YrEVBFQ8Z5rXOmrOtqzwvq4F8f8V8Z+JuDMvWcGzqEwRrwzfSzCdu/FdySPWoTSLxu8xy8w/EYakr
sidebar_class_name: 'get api-method'
info_path: api/nildb/nildb-api
custom_edit_url: null
---

import MethodEndpoint from '@theme/ApiExplorer/MethodEndpoint';
import ParamsDetails from '@theme/ParamsDetails';
import RequestSchema from '@theme/RequestSchema';
import StatusCodes from '@theme/StatusCodes';
import OperationTabs from '@theme/OperationTabs';
import TabItem from '@theme/TabItem';
import Heading from '@theme/Heading';

<Heading
  as={'h1'}
  className={'openapi__heading'}
  children={'Get schemas'}
></Heading>

<MethodEndpoint
  method={'get'}
  path={'/api/v1/schemas'}
  context={'endpoint'}
></MethodEndpoint>

:::info
You may use this test Bearer token we have created for development

```
eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpc3MiOiJkaWQ6bmlsOnRlc3RuZXQ6bmlsbGlvbjF4dnRuM2FhajQ4dGY3bm5zZW16MGQ2OGVwbjZlcHU0ZjRhNG5mYSIsImF1ZCI6ImRpZDpuaWw6dGVzdG5ldDpuaWxsaW9uMXd3c3Jqbmd4dnU5dGMzMzVsajlrM213d3JybDV3M3EyZDB1ZXR6In0.yOKg-wyJdyn9jK-KNtkjbi9PS0pF9wmgVmd7pIeNGhoTjhgZhzB62atbgzE45OGGYx0gUsw_i2k3K2AdFf_tuQ
```

:::

List accounts' schemas

<ParamsDetails parameters={undefined}></ParamsDetails>

<RequestSchema title={'Body'} body={undefined}></RequestSchema>

<StatusCodes
  id={undefined}
  label={undefined}
  responses={{
    '200': {
      description: "The organization's schemas",
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['data'],
            properties: {
              data: {
                type: 'array',
                items: {
                  allOf: [
                    {
                      type: 'object',
                      properties: {
                        _id: {
                          description:
                            'A universally unique identifier for the item.',
                          type: 'string',
                          format: 'uuid',
                          title: 'UUID',
                        },
                        _created: {
                          type: 'string',
                          format: 'date-time',
                          description: 'The creation timestamp.',
                        },
                        _updated: {
                          type: 'string',
                          format: 'date-time',
                          description: 'The last update timestamp.',
                        },
                      },
                      required: ['_id', '_created', '_updated'],
                      title: 'DocumentBase',
                    },
                    {
                      type: 'object',
                      required: ['name', 'owner', 'schema'],
                      properties: {
                        name: {
                          description: 'A user friendly schema name',
                          type: 'string',
                        },
                        owner: {
                          description:
                            'The decentralised identifier (DID) of the owning organization',
                          type: 'string',
                          example:
                            'did:nil:testnet:nillion1eunreuzltxglx9fx493l2r8ef6rdlrau4dsdnc',
                        },
                        schema: {
                          description:
                            'The json schema used to validate data before insertion into the schema collection',
                          type: 'object',
                        },
                      },
                    },
                  ],
                  title: 'Schema',
                },
              },
            },
          },
        },
      },
    },
    '400': {
      description: 'Validation or processing errors',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['ts', 'errors'],
            properties: {
              ts: {
                type: 'string',
                format: 'date-time',
                description: "The error's timestamp.",
              },
              errors: {
                description: 'A list of error messages',
                type: 'array',
                items: {
                  anyOf: [
                    { type: 'string' },
                    {
                      type: 'object',
                      properties: {
                        code: { type: 'string' },
                        message: { type: 'string' },
                      },
                    },
                  ],
                },
              },
            },
            title: 'Error',
          },
        },
      },
    },
    '401': { description: 'Missing or invalid JWT' },
    '500': { description: 'Internal server error' },
  }}
></StatusCodes>



================================================
FILE: docs/api/nildb/list-new-data.api.mdx
================================================
---
id: list-new-data
title: 'List new data'
description: 'List recently added documents from a schema collection'
sidebar_label: 'List new data'
hide_title: true
hide_table_of_contents: true
api: eJy9VltPGzkU/iuWXxYkknBLups32rASe2lRge4DjZAz9iQGjz1re4Aoyn/f73gmZHLRVtpWywPx2Of+fefYCy5VyLwuo3aWD/kfOkTmVaZsNHMmpFSSSZdVBTYCy70rmGAhm6lCsMwZo7KkeMSDyiqv45wP7xf88SXid7wcH/EopgFrPhJRcHx79XelQnzvJEQXPHM2wjQtRVkanQmy13sMFM2C155oFeelQnxu8giXvLajvZJku5GC9dK7UvmoVdjU3kzyglVWPysfhEGSWCMkpiXi0LlWnuXOszjDVlRFF74a3yF6baf4xnkhEDOvKi3pXEdDAnd3VyO+TH8UYCidDXUkp8fHu2HcwoURqPdpH78RVWmVui59dCmQfQX/IZWTDSqbdUu7a03hvZhDkcqRzlG2T3kCetv2pp0HVOd/Lv4Rf8i8QjFlK4FdXWSoOlEXCpu7oCQL+GQkEaIoym6yXJXyOy0nuGszG8aXm7A8pMzeMmm5Hq8THjVceS+CQni7YIBCmnwLc92CJfpK7QttRb2fEvcaRbYGtMtuahZKVSpLeCHudjggzSqkpgmQ1fk+4n8RRsu6wgAbLjIVAurIlPfOhx9F7kiWGpM7HI/hO2BMRlGoTX40rvYw3tBUdXmtx6ATxFSFNbl3O8zONzusiXAfzJt5ZU6q3cwQXeN1z9lyOU5YrZC8pCj5Cr+T3YT+1DVcyEXbZwKT/fbXLTnp74P7Clh6IlNQHo1fVyFxvlBx5oAVL11IqYg4w1dPlLr3fNKjOdSLQpt0v5BuSDWpvIHULMYyDHs9q42cdKQqXBdLA59dq+KL80+Jn6uLKbG3rlG6nt7KQHbIQTrH90QJrzx26sWvK0pQittkuGCjq1EHJ6xKFaHBdXlz2h/8zoSZOvidFWmiiQpHGHEZdTFD/5ROY8x3v1pSLsXcOCFZUYEn2mamkmr41XaYFnHIrkKooCTimm90pl7LIbt8LbXfGlbsABe4KwrqUnlIoqKSQ3Yr/FRFZkEQ9DDd8B7QBVhuTd8D5JNUAPGQfTC6ngjfkk9oUnd+Xl/vl6+Ixah2v/KzXPzczwfnnf67k3ed8/7gtDM5y7POafbL4CwfDEQuBsQjbXOXIGooCWBH79nF9RUQIBrU1T/unnePdzD5ooOO7B7zLLwRAuUYH6wIs31yyISV7H4KsKoJbfQ+1ocfaxrVDFvrf0PwkG5tA+5YVjivulSdo8TwQqTpZUXiWXpqWfXC0nW7lUXrZfTf32QNwaN6jb3SCJ0CSc2zaFrtHuNVU01PKIA6jtRwaJwZ9SQkFosJbpg7b5ZL2ga+nl55WD4Lr8WEAMJbDwpKSDQOdeiTggj/UKfQuaU4SNxUadptT3SaarXGRZapMv6r7Lg1Nq4/3VBPTprHZJFmH/fihW4C/B9yLFwqaWr8tLfgRthplWYhr20Se6lDW1Nhawq0ZzGGcytClCdJ3LonZVGioyaVSN88jdZ/AEyj77k=
sidebar_class_name: 'post api-method'
info_path: api/nildb/nildb-api
custom_edit_url: null
---

import MethodEndpoint from '@theme/ApiExplorer/MethodEndpoint';
import ParamsDetails from '@theme/ParamsDetails';
import RequestSchema from '@theme/RequestSchema';
import StatusCodes from '@theme/StatusCodes';
import OperationTabs from '@theme/OperationTabs';
import TabItem from '@theme/TabItem';
import Heading from '@theme/Heading';

<Heading
  as={'h1'}
  className={'openapi__heading'}
  children={'List new data'}
></Heading>

<MethodEndpoint
  method={'post'}
  path={'/api/v1/data/tail'}
  context={'endpoint'}
></MethodEndpoint>

:::info
You may use this test Bearer token we have created for development

```
eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpc3MiOiJkaWQ6bmlsOnRlc3RuZXQ6bmlsbGlvbjF4dnRuM2FhajQ4dGY3bm5zZW16MGQ2OGVwbjZlcHU0ZjRhNG5mYSIsImF1ZCI6ImRpZDpuaWw6dGVzdG5ldDpuaWxsaW9uMXd3c3Jqbmd4dnU5dGMzMzVsajlrM213d3JybDV3M3EyZDB1ZXR6In0.yOKg-wyJdyn9jK-KNtkjbi9PS0pF9wmgVmd7pIeNGhoTjhgZhzB62atbgzE45OGGYx0gUsw_i2k3K2AdFf_tuQ
```

:::

List recently added documents from a schema collection

<Heading
  id={'request'}
  as={'h2'}
  className={'openapi-tabs__heading'}
  children={'Request'}
></Heading>

<ParamsDetails parameters={undefined}></ParamsDetails>

<RequestSchema
  title={'Body'}
  body={{
    content: {
      'application/json': {
        schema: {
          type: 'object',
          required: ['schema'],
          properties: {
            schema: {
              description: 'A universally unique identifier for the item.',
              type: 'string',
              format: 'uuid',
              title: 'UUID',
            },
          },
        },
      },
    },
  }}
></RequestSchema>

<StatusCodes
  id={undefined}
  label={undefined}
  responses={{
    '200': {
      description:
        'The last 25 latest documents added to the schema collection',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['data'],
            properties: {
              data: {
                type: 'array',
                items: {
                  allOf: [
                    {
                      type: 'object',
                      properties: {
                        _id: {
                          description:
                            'A universally unique identifier for the item.',
                          type: 'string',
                          format: 'uuid',
                          title: 'UUID',
                        },
                        _created: {
                          type: 'string',
                          format: 'date-time',
                          description: 'The creation timestamp.',
                        },
                        _updated: {
                          type: 'string',
                          format: 'date-time',
                          description: 'The last update timestamp.',
                        },
                      },
                      required: ['_id', '_created', '_updated'],
                      title: 'DocumentBase',
                    },
                    {
                      type: 'object',
                      additionalProperties: true,
                      description:
                        "The document's additional properties. Schema dependent.",
                    },
                  ],
                  title: 'DataDocument',
                },
              },
            },
          },
        },
      },
    },
    '400': {
      description: 'Validation or processing errors',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['ts', 'errors'],
            properties: {
              ts: {
                type: 'string',
                format: 'date-time',
                description: "The error's timestamp.",
              },
              errors: {
                description: 'A list of error messages',
                type: 'array',
                items: {
                  anyOf: [
                    { type: 'string' },
                    {
                      type: 'object',
                      properties: {
                        code: { type: 'string' },
                        message: { type: 'string' },
                      },
                    },
                  ],
                },
              },
            },
            title: 'Error',
          },
        },
      },
    },
    '401': { description: 'Missing or invalid JWT' },
    '500': { description: 'Internal server error' },
  }}
></StatusCodes>



================================================
FILE: docs/api/nildb/nildb-api.info.mdx
================================================
---
id: nildb-api
title: "nilDB API"
description: "Visit [docs.nillion.com](https://docs.nillion.com) and [github.com/NillionNetwork/nildb](https://github.com/NillionNetwork/nildb) to learn more."
sidebar_label: Introduction
sidebar_position: 0
hide_title: true
custom_edit_url: null
---

import ApiLogo from "@theme/ApiLogo";
import Heading from "@theme/Heading";
import SchemaTabs from "@theme/SchemaTabs";
import TabItem from "@theme/TabItem";
import Export from "@theme/ApiExplorer/Export";

<span
  className={"theme-doc-version-badge badge badge--secondary"}
  children={"Version: 0.4.0"}
>
</span>

<Heading
  as={"h1"}
  className={"openapi__heading"}
  children={"nilDB API"}
>
</Heading>



Visit [docs.nillion.com](https://docs.nillion.com) and [github.com/NillionNetwork/nildb](https://github.com/NillionNetwork/nildb) to learn more.


<div
  style={{"marginBottom":"2rem"}}
>
  <Heading
    id={"authentication"}
    as={"h2"}
    className={"openapi-tabs__heading"}
    children={"Authentication"}
  >
  </Heading><SchemaTabs
    className={"openapi-tabs__security-schemes"}
  >
    <TabItem
      label={"HTTP: Bearer Auth"}
      value={"jwt"}
    >
      
      
      A DID-JWT using the ES256K algorithm for authenticated endpoints.
      JWT payload must include:
      - iat: Issued at timestamp
      - exp: Expiration timestamp (recommended)
      - aud: Target node decentralised identifier (DID)
      - iss: Client's decentralised identifier (DID)
      
      
      <div>
        <table>
          <tbody>
            <tr>
              <th>
                Security Scheme Type:
              </th><td>
                http
              </td>
            </tr><tr>
              <th>
                HTTP Authorization Scheme:
              </th><td>
                bearer
              </td>
            </tr><tr>
              <th>
                Bearer format:
              </th><td>
                JWT
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </TabItem>
  </SchemaTabs>
</div>
      


================================================
FILE: docs/api/nildb/overview.md
================================================
# Overview

:::note
These API docs are setup against a demo nilDB node, **nildb-demo**. This node isn't open for registration.
:::

:::info
You may use this test Bearer token we have created for development

```
eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpc3MiOiJkaWQ6bmlsOnRlc3RuZXQ6bmlsbGlvbjF4dnRuM2FhajQ4dGY3bm5zZW16MGQ2OGVwbjZlcHU0ZjRhNG5mYSIsImF1ZCI6ImRpZDpuaWw6dGVzdG5ldDpuaWxsaW9uMXd3c3Jqbmd4dnU5dGMzMzVsajlrM213d3JybDV3M3EyZDB1ZXR6In0.yOKg-wyJdyn9jK-KNtkjbi9PS0pF9wmgVmd7pIeNGhoTjhgZhzB62atbgzE45OGGYx0gUsw_i2k3K2AdFf_tuQ
```

:::

NILDB API has several endpoints you may interface with:

- Accounts

  - [Accounts](./accounts.api.mdx)

- Node

  - [Health](./get-health-status.api.mdx)
  - [Node details](./get-node-details.api.mdx)

- Schemas

  - [Get](./get-schemas.api.mdx)
  - [Add](./add-schema.api.mdx)
  - [Delete](./delete-schema.api.mdx)

- Data

  - [Upload](./upload-data.api.mdx)
  - [Read](./read-data.api.mdx)
  - [List new data](./list-new-data.api.mdx)
  - [Update](./update-data.api.mdx)
  - [Delete](./delete-data.api.mdx)
  - [Delete all](./delete-all-data.api.mdx)

- Queries
  - [Get](./get-queries.api.mdx)
  - [Execute](./execute-query.api.mdx)
  - [Add](./add-query.api.mdx)
  - [Delete](./delete-query.api.mdx)



================================================
FILE: docs/api/nildb/read-data.api.mdx
================================================
---
id: read-data
title: 'Read data'
description: 'Retrieve data from the specified schema collection that matches the provided filter'
sidebar_label: 'Read'
hide_title: true
hide_table_of_contents: true
api: eJy9VttuGzcQ/RWCL7UBXXxVWr3ZkQOoRRLDl/TBEQxqOSvR5pIsybUtCPr3znBX0uqCJEDS+kHeXc4Mz8w5M+ScSwiZVy4qa3if30D0Cl6ASREFy70tWJwCCw4ylSuQLGRTKATLrNaQkROui8gKEXEhJGPn7YuSaJsrHcHzFg+QlV7FGe8/zPnTa8T/o8WoxaOYBHzmA9yM47uHf0oI8dJKNJ3zzJoIJtKjcE6rTNCG3adAUOe8gkJPceYAwdvxE2LiVRzlQVLs2qrFazS4DQJ04KOCsBlmsxQXrDTqBXwQWs/oGbExzMtEqoRnufUpXRWh6GD8GkTAApoJ7Wc9VgW/lKWStK6iJoP7++GAL1Z49sAvlLluQDxucSGlIlhCNxeiL6G1hfqjNRM7uGyHONPAELKfrXlYQvhQfVikPypXcNaEqhwnR0e7tSCCmLRZWWD6oUH5PsI77FpMlElkMRWYsZGF0jnrI0iq1C/hVdaa2SQzfV17Cu/FDB2Jo7SOXH7Okwy3Y2/GeUTK/ndFPGYeRATZSGDXFzOEdlQF8G3q73DrFCF1JVqEKArXSZFLJ38yshYhsirMRvDFJi2PKbNVJo2tR+uEB7WSLkUAhLdLxo/rnaAthflbYGtHtia0w26rqSXBgSG+EHcTDopmCaluCszqbF8jfBFayarCSDZukUEIWEcG3lsffpW4I0WqQ+5oPIafoDEFxUJt6qPeao/itULabV75MfQJYgJhLe7dDjOzzQ6rEe6jeTOvzErYzQzR1bvuWVssRomrJZNXhJIv+TveTeijqujCXJR5ITLZn3/f0Sbn++geIpeexBTAY+NXVUiaLyBOLXLFnQ0pFRGn+NYVTnVfjrs0h7rYAzKdfuQbUk1Kr9FqGqML/W7XKC3HbQmF7eCjxj07BuKr9c9Jn8tjM6m3qlE6PFdloDi0QVrH9zEInwZ99fBhKQlKcVsMF2wwHLRxhZWpIjS4rm5Pznt/MaEnFvedFmmiiRKXcMRl1MUM+8dZhYdA56shZydm2grJihJ1okymSwn9r6bNlIh9NgyhRCc8LVZ6ozV4c3129eaU3xpW7MBDZouCulQekqkoZZ/dCT+BiAeJxGaHDNF4pC5g5Mb0PcB8kgtS3GfvtaomwvfsE5vUnTfry8fVG2LR0OxXfpqL38/z3ln7/N3xu/bZee+kPT7Ns/ZJ9kfvNO/1RC56vHGqU1hlcpvoquWJJA8u2cX1EA1JEhUTR52zztEOP19UUJE94GwLK3FgaUYHS/FsrxwyYSR7mCBx5Zg+dD9Vi58qSVVqW/t/x/CQRcs06siwwnroUKVaSe2FSJPMiKS5GxR5ui1uZ9C4v/1H18q6CyK8xa7TQiWEqcPmdT8+4AxWVOxjQleBTF2J3TWlxkWL+XyMx9C914sFfU5XJrqgopfwSoyJObyuogM6ErXYxs+AJvx9lV/7jnCQuS7TSNwe+zT6Ko+LLAMXv2k7asyW68+31Ljj+j5cpAHJvXilNPC3z/HBpnqn6ZC+zbkWZlKmgcmrmKRFauPG6NgaFc2BjRO8gRDLkyzu7DMYLFGrTiXSO0/z919CLkCA
sidebar_class_name: 'post api-method'
info_path: api/nildb/nildb-api
custom_edit_url: null
---

import MethodEndpoint from '@theme/ApiExplorer/MethodEndpoint';
import ParamsDetails from '@theme/ParamsDetails';
import RequestSchema from '@theme/RequestSchema';
import StatusCodes from '@theme/StatusCodes';
import OperationTabs from '@theme/OperationTabs';
import TabItem from '@theme/TabItem';
import Heading from '@theme/Heading';

<Heading
  as={'h1'}
  className={'openapi__heading'}
  children={'Read data'}
></Heading>

<MethodEndpoint
  method={'post'}
  path={'/api/v1/data/read'}
  context={'endpoint'}
></MethodEndpoint>

:::info
You may use this test Bearer token we have created for development

```
eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpc3MiOiJkaWQ6bmlsOnRlc3RuZXQ6bmlsbGlvbjF4dnRuM2FhajQ4dGY3bm5zZW16MGQ2OGVwbjZlcHU0ZjRhNG5mYSIsImF1ZCI6ImRpZDpuaWw6dGVzdG5ldDpuaWxsaW9uMXd3c3Jqbmd4dnU5dGMzMzVsajlrM213d3JybDV3M3EyZDB1ZXR6In0.yOKg-wyJdyn9jK-KNtkjbi9PS0pF9wmgVmd7pIeNGhoTjhgZhzB62atbgzE45OGGYx0gUsw_i2k3K2AdFf_tuQ
```

:::

Retrieve data from the specified schema collection that matches the provided filter

<Heading
  id={'request'}
  as={'h2'}
  className={'openapi-tabs__heading'}
  children={'Request'}
></Heading>

<ParamsDetails parameters={undefined}></ParamsDetails>

<RequestSchema
  title={'Body'}
  body={{
    content: {
      'application/json': {
        schema: {
          type: 'object',
          required: ['schema', 'filter'],
          properties: {
            schema: {
              description: 'A universally unique identifier for the item.',
              type: 'string',
              format: 'uuid',
              title: 'UUID',
            },
            filter: {
              type: 'object',
              minProperties: 1,
              additionalProperties: true,
              description: 'MongoDB-style query filter',
              title: 'Filter',
            },
          },
        },
      },
    },
  }}
></RequestSchema>

<StatusCodes
  id={undefined}
  label={undefined}
  responses={{
    '200': {
      description:
        'Data documents that match the provided filter. Pagination is not supported.',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['data'],
            properties: {
              data: {
                type: 'array',
                items: {
                  allOf: [
                    {
                      type: 'object',
                      properties: {
                        _id: {
                          description:
                            'A universally unique identifier for the item.',
                          type: 'string',
                          format: 'uuid',
                          title: 'UUID',
                        },
                        _created: {
                          type: 'string',
                          format: 'date-time',
                          description: 'The creation timestamp.',
                        },
                        _updated: {
                          type: 'string',
                          format: 'date-time',
                          description: 'The last update timestamp.',
                        },
                      },
                      required: ['_id', '_created', '_updated'],
                      title: 'DocumentBase',
                    },
                    {
                      type: 'object',
                      additionalProperties: true,
                      description:
                        "The document's additional properties. Schema dependent.",
                    },
                  ],
                  title: 'DataDocument',
                },
              },
            },
          },
        },
      },
    },
    '400': {
      description: 'Validation or processing errors',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['ts', 'errors'],
            properties: {
              ts: {
                type: 'string',
                format: 'date-time',
                description: "The error's timestamp.",
              },
              errors: {
                description: 'A list of error messages',
                type: 'array',
                items: {
                  anyOf: [
                    { type: 'string' },
                    {
                      type: 'object',
                      properties: {
                        code: { type: 'string' },
                        message: { type: 'string' },
                      },
                    },
                  ],
                },
              },
            },
            title: 'Error',
          },
        },
      },
    },
    '401': { description: 'Missing or invalid JWT' },
    '500': { description: 'Internal server error' },
  }}
></StatusCodes>



================================================
FILE: docs/api/nildb/sidebar.ts
================================================
import type { SidebarsConfig } from "@docusaurus/plugin-content-docs";

const sidebar: SidebarsConfig = {
  apisidebar: [
    {
      type: "doc",
      id: "api/nildb/nildb-api",
    },
    {
      type: "category",
      label: "Accounts",
      items: [
        {
          type: "doc",
          id: "api/nildb/accounts",
          label: "Accounts",
          className: "api-method get",
        },
      ],
    },
    {
      type: "category",
      label: "Data",
      items: [
        {
          type: "doc",
          id: "api/nildb/upload-data",
          label: "Upload data",
          className: "api-method post",
        },
        {
          type: "doc",
          id: "api/nildb/read-data",
          label: "Read data",
          className: "api-method post",
        },
        {
          type: "doc",
          id: "api/nildb/update-data",
          label: "Update data",
          className: "api-method post",
        },
        {
          type: "doc",
          id: "api/nildb/list-new-data",
          label: "List new data",
          className: "api-method post",
        },
        {
          type: "doc",
          id: "api/nildb/delete-data",
          label: "Delete data",
          className: "api-method post",
        },
        {
          type: "doc",
          id: "api/nildb/delete-all-data",
          label: "Delete all data",
          className: "api-method post",
        },
      ],
    },
    {
      type: "category",
      label: "Query",
      items: [
        {
          type: "doc",
          id: "api/nildb/get-queries",
          label: "Get queries",
          className: "api-method get",
        },
        {
          type: "doc",
          id: "api/nildb/add-query",
          label: "Add query",
          className: "api-method post",
        },
        {
          type: "doc",
          id: "api/nildb/delete-query",
          label: "Delete query",
          className: "api-method delete",
        },
        {
          type: "doc",
          id: "api/nildb/execute-query",
          label: "Execute query",
          className: "api-method post",
        },
      ],
    },
    {
      type: "category",
      label: "Schema",
      items: [
        {
          type: "doc",
          id: "api/nildb/get-schemas",
          label: "Get schemas",
          className: "api-method get",
        },
        {
          type: "doc",
          id: "api/nildb/add-schema",
          label: "Add schema",
          className: "api-method post",
        },
        {
          type: "doc",
          id: "api/nildb/delete-schema",
          label: "Delete schema",
          className: "api-method delete",
        },
      ],
    },
    {
      type: "category",
      label: "Node",
      items: [
        {
          type: "doc",
          id: "api/nildb/get-health-status",
          label: "Health",
          className: "api-method get",
        },
        {
          type: "doc",
          id: "api/nildb/get-node-details",
          label: "Node Details",
          className: "api-method get",
        },
      ],
    },
  ],
};

export default sidebar.apisidebar;



================================================
FILE: docs/api/nildb/update-data.api.mdx
================================================
---
id: update-data
title: 'Update data'
description: 'Update documents within a schema collection that match the given filter'
sidebar_label: 'Update'
hide_title: true
hide_table_of_contents: true
api: eJytVk1T4zgQ/SsqXRaq4oTwkdnNDQhTld2aGWqB2QPDQbbaiUCWvJJMSKXy37dbdhITp5YLHIIstdSvu18/acUl+MypMihr+Jg/lFIEYNJmVQEmeLZQYa4ME8xncygEy6zWkJE1C3MRWCFCNschsJl6BcNypQM43uMessqpsOTjxxV/XgT8/7R+6vEgZh7HfCKC4Pjt4N8KfLiyEk1XPLMmoGMairLUKhPka/DsCd6K1yhoFJYlIGCbPiMcXp+jHEg6u7Hq8S2aKsZF/kpnS3BBgX9/3vs8XLLKYDzOC62XNEaQTElEpnIFjuXWxaBVgKKP5zdofHDKzMixdZgZnKkqJWldBU0GDw/TCV9vgR2Io1DmtgVx2ONCSkWwhG4vBFdBbw/1N2tmdnKV+LDUwBCyW+4KsoHwtZ5Yb5NCqT7oogtuP0m5hjeVoq/agmG27AIzwIRZshdYJq9CY+JKoZzvscUcHLA45VkmDEtxYx5tyVGfr+s/KqYvrfE1iNOTk26B7jH5aFXpQEdQKepoGMGPnEG4n0Im2RD1PXHi7Ac7Y2+AvLaViZW1ksjTfHdObKxbh5qqSNuVOrS2Tdn5oSz9FFrJGDRDwqK/DLyn+oBz1vnPSlGgk5ojO3GFNpO6DUKBJUEV0KEXlTge+ptnZOCDKMo+paNxdaBrtfKRENGC4R4vZuB3DSqcE0v8pL6NByD5fuRRo94jXPe6Ib+PK7MSupEhusbrgbX1+inWatOKN4SSb+o37Ab0TdXlwliUeaVisj//uScnF4fKPcVaOmxi5sGheNVZ4OuIKcwt1oqX1sdQRJjj10CUavA6HBCbB40ckHTTbh+zUjmNdvMQSj8eDIzSMk0kFLaPQ41e+wbCwroXTtq+0fw7Yk2dpaj820TQOeQgruN3CsJFcaoHXzekoCC7ajOZThJcYVXMCfX8zd3pxegvlJ2ZRb/zIuqyqHAJhTqjlmFgZGkVXmX9X4Y2l2KprZCsqJApymS6kjD+ZRKmRBizqfcVbsKLbcs4WoO3csxu3kpVS8tukR05yGyBd6UEeUymopJjdi/cDAIzSBEmIUM0Dovn8eTWHXKE8cQtWOQxu9YKV5DqH9nHelJ//r27OW/eEIuGdsfys1z8fpGPzpOLL8MvyfnF6DRJz/IsOc3+GJ3lo5HIxYi3biI6VpncxnI1BMUiT67Y5e0UDYkSdSVO+uf9k059fiqvAnvEp4PfkgNT83S0Ic/+yjEqv2SPMyxcldLE4Hu9+L2mVM223f4PDI9ZsEwjjwwrrIM+ZaoX+V6IqGVGRM5tnjgk4HsxtJ4fn/gSargf4C0MSi1UxBX7atX04SNqr6IUDwlRDWz3YplTy6LNapUKDw9Or9c0Ha93elXhPuGUSKli+MbCDSAklRTbF+9gdH1dR5XcExIyxxuYxHBf8En06h2XWQZl+F/bp5aq3P64o4ZNm0dcEaWRO7GgiwJ/xxwHNmY5qkKcW3EtzKyKUsnrM4mD1L4tydiTiLZUo3a3EGJ6osW9fQGDKeo1oQT65lF5/wOWE8oM
sidebar_class_name: 'post api-method'
info_path: api/nildb/nildb-api
custom_edit_url: null
---

import MethodEndpoint from '@theme/ApiExplorer/MethodEndpoint';
import ParamsDetails from '@theme/ParamsDetails';
import RequestSchema from '@theme/RequestSchema';
import StatusCodes from '@theme/StatusCodes';
import OperationTabs from '@theme/OperationTabs';
import TabItem from '@theme/TabItem';
import Heading from '@theme/Heading';

<Heading
  as={'h1'}
  className={'openapi__heading'}
  children={'Update data'}
></Heading>

<MethodEndpoint
  method={'post'}
  path={'/api/v1/data/update'}
  context={'endpoint'}
></MethodEndpoint>

:::info
You may use this test Bearer token we have created for development

```
eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpc3MiOiJkaWQ6bmlsOnRlc3RuZXQ6bmlsbGlvbjF4dnRuM2FhajQ4dGY3bm5zZW16MGQ2OGVwbjZlcHU0ZjRhNG5mYSIsImF1ZCI6ImRpZDpuaWw6dGVzdG5ldDpuaWxsaW9uMXd3c3Jqbmd4dnU5dGMzMzVsajlrM213d3JybDV3M3EyZDB1ZXR6In0.yOKg-wyJdyn9jK-KNtkjbi9PS0pF9wmgVmd7pIeNGhoTjhgZhzB62atbgzE45OGGYx0gUsw_i2k3K2AdFf_tuQ
```

:::

Update documents within a schema collection that match the given `filter`.

Supply fields under `update` using `$set` to update their value. Example:
```JSON
{
    "schema": "c48dcfb6-dd97-4ee6-b227-1f6c334685f8",
    "filter": {
        "_id": "f7bca333-b0b9-472a-9649-e17d23f7ccc0"
    },
    "update": {
        "$set": {
            "steps": 100
        }
    }
}
```
You can find more options on [field update operators](https://www.mongodb.com/docs/manual/reference/operator/update-field/#field-update-operators) other than `$set`, but take care to not alter the schema by removing required fields.

<Heading
  id={'request'}
  as={'h2'}
  className={'openapi-tabs__heading'}
  children={'Request'}
></Heading>

<ParamsDetails parameters={undefined}></ParamsDetails>

<RequestSchema
  title={'Body'}
  body={{
    content: {
      'application/json': {
        schema: {
          type: 'object',
          required: ['schema', 'filter', 'update'],
          properties: {
            schema: {
              description: 'A universally unique identifier for the item.',
              type: 'string',
              format: 'uuid',
              title: 'UUID',
            },
            filter: {
              type: 'object',
              minProperties: 1,
              additionalProperties: true,
              description: 'MongoDB-style query filter',
              title: 'Filter',
            },
            update: {
              additionalProperties: {
                type: 'object',
                description:
                  'A flexible object allowing any key-value pairs, where values can be of any type.',
              },
            },
          },
        },
      },
    },
  }}
></RequestSchema>

<StatusCodes
  id={undefined}
  label={undefined}
  responses={{
    '200': {
      description: 'The result of the update operation',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['data'],
            properties: {
              data: {
                type: 'object',
                required: ['matchedCount', 'modifiedCount'],
                properties: {
                  matched: { type: 'number' },
                  updated: { type: 'number' },
                },
              },
            },
          },
        },
      },
    },
    '400': {
      description: 'Validation or processing errors',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['ts', 'errors'],
            properties: {
              ts: {
                type: 'string',
                format: 'date-time',
                description: "The error's timestamp.",
              },
              errors: {
                description: 'A list of error messages',
                type: 'array',
                items: {
                  anyOf: [
                    { type: 'string' },
                    {
                      type: 'object',
                      properties: {
                        code: { type: 'string' },
                        message: { type: 'string' },
                      },
                    },
                  ],
                },
              },
            },
            title: 'Error',
          },
        },
      },
    },
    '401': { description: 'Missing or invalid JWT' },
    '500': { description: 'Internal server error' },
  }}
></StatusCodes>



================================================
FILE: docs/api/nildb/upload-data.api.mdx
================================================
---
id: upload-data
title: 'Upload data'
description: 'Upload data to the specified schema collection'
sidebar_label: 'Upload'
hide_title: true
hide_table_of_contents: true
api: eJytVttSIzcQ/RWVXgJVvnD1Jn5jF1JFUtmlAmweWB7kUY8t0EiKpAFcLv97unvGeLCdpbZqecCaUatv5/TRLKSGVEQTsvFOjuVtsF5poVVWInuRZyBSgMKUBrRIxQwqJQpvLRR8oCcTFHU0eS7Hdwv58Jzx935535NZTROu5Tl6kvgc4d8aUv7oNZouZOFdBpdpqUKwplDkb/iQKIuFbCLRKs8DYF5+8oAhZePHRNDku7XqSd0GCdEHiNlAeuvkbY03VBTv/ZJEXRst6oTVYblPyhr0BVw/+m2DpxyNm+Jz6WOlMGlJp+SyDbzOUsWo5mhnMlRpV/ZKa0NZKHv1JtW3CZ450ZwQzzOfMNmZCiAwMiadGJOs4hTyKySDda5tqGX7Rw1LwbvUxDk6ONjdD1/nwlf4W7J/xr9uuEB5MjoDwZarR1EoJyYggsIylLVzkeqigJTK2lJCPwXiIgLiofEtxOhj2kZ5ZbGzLMIpiTL6qpMcZtoeEtoXdYVJpnUDtzDcwEbUzjxBTFwxrpHWwmj0QTMSBVKEO0jHB+9SCPdNtmRwe3t5Lgmvts4fIFW3X3yaJqItbLtfjcXaTZvZsnNmK8ZyTaeTXQz62swNkQLLx3jUafQq2mJ+EhkYpv/jQU7bRXXaTWPdz6YCas4WT9gpqgEZpKyqMJBvoNjkgDUp06ywhcAzSU3heyRSbv6lZI3cbPt2yRv89hp2wtVG3bG3XN4zVituXTDkK/wOtwv6yzRwYS3GsQiKP/65oSCnu+C+RCwjaphIEHEUmi4weSvIM49YyeATl6LyDJ+GKpjh0+GQZGXYzB5fHXQ6cVfqaNFulnNI4+HQGasnfQ2VH+DSkvY4yM8+Pkq6W1Z3zjWxpukS3zyvjSA/FID38XkCKgKNRbP4fUUKKnKTDmfi/PK8jzt4K1BPaJgvro9OR38KZace484qnnJV4xaOfcFKAk4Hb1BJBt8cHQ5qzupZ1cgU4wpbaxh/c31hVB6Ly5RqPKTymnG0By9hLC5egmkV9nVT7EVAfcbp1KD3yVTVeixu+BoQDikiNBSYTUTw6DLrKNIe1sNHEOSx+GQN7iDV37NnPGk+/17f3BcvmIuF7sTK41L9elqOTvqnHw4/9E9OR0f9yXFZ9I+K30bH5WikSjVaXdGINFITx8KVnuFqCYogn38UZ1eXaEiUaJA4GJwMDrbw+WqSyeIOxSq9kgNbc7+3Is/mzr5QTou7KQJXT+jF8HOz+bmhVMO29fl3DPfpQ8Eij5yofIQBdarHfK8Ua5lTzLnOl9RmDZ3Pnx//4GopnuElD4NVhsPz+CzacbtDiTXUycNV33vtLUmqOaPJRJvFYqIS3Ea7XNJrxDjSRxwun1Q0akLA3BFYM1Aah4em9BHQRH5qku/fUCZkbmvWvE1dJ21rTpzh1Rvyd23vO+Jx9eWa5nLSfitWrIAyqme6D/D/WOLCczN5+PndQlrlpjUromx8EoNpSjvKsKEEXUVGie5kiO1hixv/CA5b1GtLyfQsWWD/Axk84uw=
sidebar_class_name: 'post api-method'
info_path: api/nildb/nildb-api
custom_edit_url: null
---

import MethodEndpoint from '@theme/ApiExplorer/MethodEndpoint';
import ParamsDetails from '@theme/ParamsDetails';
import RequestSchema from '@theme/RequestSchema';
import StatusCodes from '@theme/StatusCodes';
import OperationTabs from '@theme/OperationTabs';
import TabItem from '@theme/TabItem';
import Heading from '@theme/Heading';

<Heading
  as={'h1'}
  className={'openapi__heading'}
  children={'Upload data'}
></Heading>

<MethodEndpoint
  method={'post'}
  path={'/api/v1/data/create'}
  context={'endpoint'}
></MethodEndpoint>

:::info
You may use this test Bearer token we have created for development

```
eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpc3MiOiJkaWQ6bmlsOnRlc3RuZXQ6bmlsbGlvbjF4dnRuM2FhajQ4dGY3bm5zZW16MGQ2OGVwbjZlcHU0ZjRhNG5mYSIsImF1ZCI6ImRpZDpuaWw6dGVzdG5ldDpuaWxsaW9uMXd3c3Jqbmd4dnU5dGMzMzVsajlrM213d3JybDV3M3EyZDB1ZXR6In0.yOKg-wyJdyn9jK-KNtkjbi9PS0pF9wmgVmd7pIeNGhoTjhgZhzB62atbgzE45OGGYx0gUsw_i2k3K2AdFf_tuQ
```

:::

Upload data to the specified schema collection

<Heading
  id={'request'}
  as={'h2'}
  className={'openapi-tabs__heading'}
  children={'Request'}
></Heading>

<ParamsDetails parameters={undefined}></ParamsDetails>

<RequestSchema
  title={'Body'}
  body={{
    content: {
      'application/json': {
        schema: {
          type: 'object',
          required: ['schema', 'data'],
          properties: {
            schema: {
              description: "The schema's uuid used to validate data",
              type: 'string',
              format: 'uuid',
            },
            data: {
              type: 'array',
              items: {
                type: 'object',
                additionalProperties: {
                  description:
                    'An object whose shape matches the targeted schema.',
                  type: 'object',
                },
              },
            },
          },
        },
      },
    },
  }}
></RequestSchema>

<StatusCodes
  id={undefined}
  label={undefined}
  responses={{
    '200': {
      description:
        'The outcome of the data upload operation. The operation can be partially successful.',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['created', 'errors'],
            properties: {
              created: {
                description: 'The uuids from successfully created documents',
                type: 'array',
                items: {
                  description: 'A universally unique identifier for the item.',
                  type: 'string',
                  format: 'uuid',
                  title: 'UUID',
                },
              },
              errors: {
                type: 'array',
                items: {
                  type: 'object',
                  required: ['error', 'document'],
                  properties: {
                    error: { type: 'string' },
                    document: { type: 'object' },
                  },
                },
              },
            },
          },
        },
      },
    },
    '400': {
      description: 'Validation or processing errors',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            required: ['ts', 'errors'],
            properties: {
              ts: {
                type: 'string',
                format: 'date-time',
                description: "The error's timestamp.",
              },
              errors: {
                description: 'A list of error messages',
                type: 'array',
                items: {
                  anyOf: [
                    { type: 'string' },
                    {
                      type: 'object',
                      properties: {
                        code: { type: 'string' },
                        message: { type: 'string' },
                      },
                    },
                  ],
                },
              },
            },
            title: 'Error',
          },
        },
      },
    },
    '401': { description: 'Missing or invalid JWT' },
    '500': { description: 'Internal server error' },
  }}
></StatusCodes>



================================================
FILE: docs/community/community-and-support.md
================================================
# Community and Support

### Join Our Community

- Join our [Discord](https://discord.com/invite/nillionnetwork)
- Telegram groups
  - Subscribe to [Nillion Official Announcements](https://t.me/nillionofficialannouncements) to stay up to date with the latest Nillion news
  - Join [MPC 👀](https://t.me/Multipartycomputation), a broader community group for discussing MPC developments, papers, and implementation examples.

### Support

If you'd like to open a ticket, you can do so via our [Discord ticket link](https://discord.com/channels/905926225120338000/927874817355563018)

---

# Developers

### Technical Discussions and Questions

Nillion's [Github Discussions](https://github.com/orgs/NillionNetwork/discussions?discussions_q=) forum is our central developer hub for technical discussions related to Nillion. Builders can use Github discussions to share ideas, ask questions, showcase their projects, and stay updated on the latest news and announcements from the Nillion team.

### Improve the Docs

Got a suggestion for improving the docs? Let us know by [creating a Github Issue](https://github.com/NillionNetwork/nillion-docs/issues/new?assignees=&labels=documentation&projects=&template=improve-documentation.md&title=%5BDOCS%5D).

### Grants

Are you building a startup using Nillion technology? Apply to the [Nucleus Builders Program](https://nucleus.nillion.com/).

### Status Page

We have a [Status page](https://status.nillion.com/) that illustrates the uptime of our Nillion Services.



================================================
FILE: docs/community/guides/nillion-wallet.md
================================================
import IframeVideo from '@site/src/components/IframeVideo/index';
import SupportedWallets from '../../\_testnet_supported_wallets.mdx';

# Creating a Nillion Wallet

Create a Nillion wallet to connect to the Nillion Network and access your NIL.

## Supported Wallets

<SupportedWallets/>

## How to Create a Nillion Wallet

This guide walks you through downloading a wallet, setting up your wallet, and adding the Nillion Network.


### 1. Download Keplr

Visit the [Keplr download page](https://www.keplr.app/download) and select your browser to download the Keplr browser extension. We recommend Chrome.

![Download Keplr](/img/download-wallet.png)

### 2. Install the Keplr browser extension

Click "Add to Chrome" to install the Keplr Chrome extension.

![Add extension](/img/add-extension.png)

### 3. Create a new wallet

After Keplr is installed, it will pop open in a new tab. Click "Create a new wallet."

![Create wallet](/img/create-wallet.png)

### 4. Create a recovery phrase

:::info
**If you are a developer, make sure to use the "Sign-up with Google" registration.** This is the only Keplr option that lets you "View private key" for the new wallet, which you will need to do during development.
:::

Create a wallet using one of the options:

![Create a wallet with a new recovery phrase](/img/recovery-phrase.png)

### 5. Secure your recovery phrase

Follow the steps to show your recovery phrase. Make sure to store your secret recovery phrase securely.
![Secure phrase](/img/secure-phrase.png)

### 6. Set a wallet password

Verify your recovery phrase by filling in ordered words. Then name your wallet and set a password. You'll use this password to log into Keplr on this device. To import this wallet for use on another device, you'll need the recovery phrase.
![Verify](/img/verify-wallet.png)

### 7. Add Nillion Network

:::info
When adding the Nillion Network to Keplr, you’ll see “Nillion Testnet” rather than Mainnet. This is expected. The same wallet address you create now will be usable when Mainnet launches.
:::

    1. Toggle open the "Extensions" button in your browser and pin the Keplr extension so that the browser has access to it.

    2. Open the [Keplr Chains page](https://chains.keplr.app/) and search for "Nillion Testnet" Click "Add to Keplr."

    3. "Approve" adding the Nillion within Keplr.

    4. In the Keplr extension, click the hamburger menu and click "Manage Chain Visibility." This opens the Select Chains page in a new tab. Search for "NIL" and click the checkmark to make the Nillion Network visible from within Keplr. Click "Save."

    5. Verify setup by toggling Keplr back open. Scroll down to the bottom of the "Home" tab, where you should see a new NIL token balance of 0 NIL.

![Keplr Config](/img/keplr_config.png)

### 8. Find your new Nillion wallet address

    1. From your Keplr extension, click the "Copy address" button.

    2. Now you'll see addresses for all enabled chains. Filter for "NIL"

    3. Click to copy your Nillion wallet address to your clipboard. Your Nillion wallet address is safe to share with others; they'll need your wallet address to send you NIL.

<IframeVideo videoSrc="https://www.loom.com/embed/3b243bee264d4ca992381ef131e5a625?sid=17c8f87a-a468-41e3-88f1-7ca287063d29"/>



================================================
FILE: docs/community/guides/sending-nil.md
================================================
import IframeVideo from '@site/src/components/IframeVideo/index';
import BlockExplorers from '../../\_testnet_block_explorers.mdx';

# Sending NIL Tokens

Send a transaction on the Nillion Network and find the onchain record of the transaction on a block explorer.

## How to send NIL

This guide walks you through how to send NIL tokens from one Nillion wallet to another Nillion wallet and find the transaction on a block explorer.

### 0. Set up a wallet and get NIL

Follow the [Creating a Nillion Wallet](/community/guides/nillion-wallet) guide to set up a connected wallet.

### 1. Open Keplr and check your NIL balance

    1. Open Keplr and find the "Search for asset or chain" search bar on the Home tab.

    2. Type in "NIL" to filter for your available balance of NIL.

    3. Click "NIL" to open the NIL on Nillion Network view.

### 2. Send NIL to another Nillion wallet

    1. Click "Send"

    2. Under "Wallet address" paste in a valid Nillion wallet address - this address should start with `nillion`

    3. Under "Amount" type in the amount of NIL to send or click "Max" to send all your NIL minus the transaction fee (Tx Fee) shown at the bottom of Keplr.

    4. Under "Memo", optionally add a note to be sent with the transaction.

    5. Click "Next."

    6. Confirm the transaction by reviewing details to make sure the recipient's wallet address, amount, and memo are correct.

    7. Click "Approve" to send the transaction, and wait for a success message to appear.

    <IframeVideo videoSrc="https://www.loom.com/embed/bb37a3c363424e4385636a4b9cbf779e?sid=32c65c3e-247f-441a-af95-b879c4dbff1c"/>

### 3. Look for the transaction on a Nillion block explorer

There are multiple nilChain block explorers you can use to see your transaction.

<BlockExplorers/>

Use an explorer to find your transaction:

1. Open a Nillion Network block explorer and paste your Nillion wallet address into the search bar.

2. Find "Transactions" and click on the latest transaction.

3. Look at the transaction details to see the onchain record of the NIL you just sent.

<IframeVideo videoSrc="https://www.loom.com/embed/6f9023f29ad547f4b3a4f92bc852c11c?sid=cd8061b7-6ccf-4523-b0c9-094193e084d6"/>



================================================
FILE: docs/community/guides/testnet-faucet.md
================================================
import IframeVideo from '@site/src/components/IframeVideo/index';

# Testnet Faucet Guide

The [Nillion Testnet Faucet](https://faucet.testnet.nillion.com/) distributes nilChain Testnet NIL tokens. You can use the faucet to request Testnet NIL tokens once every 24 hours.

## How to use the Nillion Testnet Faucet

This guide walks you through how to get NIL from the Nillion Testnet Faucet.

### 0. Set up a wallet

Follow the [Creating a Nillion Wallet](/community/guides/nillion-wallet) guide to set up a connected wallet. After creating a wallet, you should have a Nillion wallet address similar to this example address:

```
nillion1jat3ecr8pmd48uxsahyh5nf9qea3gezqtk0sfq
```

### 1. Go to the [Nillion Faucet](https://faucet.testnet.nillion.com/) page.

Click the "Start" button.

![faucet](/img/faucet-start.png)

### 2. Add your Nillion Testnet wallet address.

    1. Open the Keplr extension and click "Copy address."

    2. Search for "Nillion Testnet"

    3. Click the copy icon next to "Nillion Testnet" to copy your Nillion Testnet wallet address.

    4. Paste your Nillion Testnet wallet address into the faucet.

    5. Click "Continue."

<IframeVideo videoSrc="https://www.loom.com/embed/d47a393e87544095a4bbf5531aac79f2?sid=3d0b8ee1-7c74-4c71-82f8-41ecb463e838"/>

### 3. Complete the verification challenge.

Complete the verification challenge and then click "Continue." The faucet will send testnet NIL to your Nillion Testnet wallet address.

### 4. Check your wallet for a NIL balance

Open your wallet to see the NIL in your Nillion Testnet wallet.

<IframeVideo videoSrc="https://www.loom.com/embed/93703c126ae74c8a9ff55e5d33063395?sid=aa08c50f-0aff-4d4f-9eca-70cb774736b4"/>



================================================
FILE: docs/community/guides/testnet.md
================================================
import DocCardList from '@theme/DocCardList';

# Testnet Guides

<DocCardList/>



================================================
FILE: docs/learn/architecture.md
================================================
# Architecture

![Nillion's network architecture diagram](/img/network_diagram.png)

The Nillion Network architecture consists of two main components: the nilChain and the Petnet. The nilChain enables payments and incentivizes participation in the Nillion Network. The Petnet allows builders to leverage privacy-enhancing technologies (PETs) to store and compute over data while it remains encrypted.

## nilChain

The nilChain is a blockchain that manages shared resources for the whole Nillion Network. It's built on top of the Cosmos SDK stack and supports rewards, cryptoeconomic stake, and governance, as well as enabling inter-cluster coordination. Since its main purpose is to enable coordination, the chain does not have an open execution environment for running smart contracts.

## Petnet

The Petnet consists of a network of nodes that can be recruited into clusters by builders (depending on which PET they employ). Developers have the power to pick their own point on the secure computation trade-off space and to decide what matters to them.

The Petnet nodes support secure storage and computation over data, and these capabilities can be leveraged using the variety of SDKs that can be used to interact with the nodes. Each node supports the use of PETs by operating one or more [Blind Modules](/learn/blind-modules).



================================================
FILE: docs/learn/blind-modules.md
================================================
# Blind Modules

Blind Modules are the core technical components of the Nillion Network. Developers and end users of Nillion's technology mainly interact with Blind Modules via SDKs, but also have the option of interacting with them directly via their [APIs](/api/overview).

## nilDB

nilDB is Nillion's secure [NoSQL](https://en.wikipedia.org/wiki/NoSQL) database solution, enabling data to be stored in an encrypted (via symmetric cryptography or HE) and/or decentralized (via MPC) way. Developers are free to treat any combination of one or more nilDB nodes as a cluster. Documents containing a mix of encrypted and plaintext values can be stored in such a cluster. The diagram below illustrates typical storage and query flows involving a cluster of three nodes.

```mermaid
graph TD

    subgraph CLIENT [" "]
    A
    NILQL0
    end

    subgraph NET [" "]
    X
    Y
    Z
    end

    subgraph SERVICE [" "]
    NILQL1
    R
    end

    A[Application] -->|data| NILQL0[<b>blindfold</b>]
    NILQL0 -->|data secret share| X[<b>nilDB Node</b>]
    NILQL0 -->|data secret share| Y[<b>nilDB Node</b>]
    NILQL0 -->|data secret share| Z[<b>nilDB Node</b>]
    X <-->|query secret share<br/>reply secret share| NILQL1[<b>blindfold</b>]
    Y <-->|query secret share<br/>reply secret share| NILQL1
    Z <-->|query secret share<br/>reply secret share| NILQL1
    NILQL1 <-->|query<br/>reply| R[Service Provider]
    style A fill:#EEEEEE,stroke:#000000
    style NILQL0 fill:#0000FF,color:#FFFFFF
    style NILQL1 fill:#0000FF,color:#FFFFFF
    style X fill:#0000FF,color:#FFFFFF
    style Y fill:#0000FF,color:#FFFFFF
    style Z fill:#0000FF,color:#FFFFFF
    style CLIENT fill:#FFFFFF,stroke:#000000
    style NET fill:#CCCCFF,stroke:#000000
    style R fill:#EEEEEE,stroke:#000000
    style SERVICE fill:#FFFFFF,stroke:#000000
```

nilDB is the Blind Module that underpins Nillion's [Private Storage](/build/private-storage/overview) solutions. When using nilDB directly, data is accessed via an easy-to-use RESTful API with endpoints to create/upload, retrieve, and query data. Developers can use the [blindfold library](/build/private-storage/blindfold) to encrypt and/or secret share data on the client side before using the [RESTful API](/api/nildb/overview) to send the ciphertexts and/or secret shares to the nodes.

## nilAI

nilAI is Nillion's secure AI offering, which runs LLMs securely inside TEEs. nilAI is the Blind Module that underpins Nillion's [Private LLMs](/build/private-llms/overview) solutions.

```mermaid
graph LR
    linkStyle default interpolate basis

    subgraph NILAI ["nilAI node<br/>"]
    TEE
    end

    subgraph TEE
    L
    end

    U[User] -->|encrypted prompt| L[<b>LLM</b>]
    L  -->|encrypted reply| U
    NILDB[nilDB Cluster] -->|encrypted data| L
    style U fill:#EEEEEE,stroke:#000000
    style NILAI fill:#0000FF,color:#FFFFFF
    style TEE fill:#DDDDDD,stroke:#FFFFFF,color:#000000
    style L fill:#FFFFFF,stroke:#000000,color:#000000
    style NILDB fill:#0000FF,color:#FFFFFF

```

The nilAI Blind Module can be accessed via an [easy-to-use RESTful API](/api/nilai/overview) that allows users to run inference using supported models.



================================================
FILE: docs/learn/protocols.md
================================================
# Protocols

The Nillion Network [Blind Modules](/learn/blind-modules) -- and the available SDKs that can be used to interoperate with them -- make it possible to leverage a number of secure data storage and computation protocols. These include what are broadly known as privacy-enhancing technologies (PETs).

## Trust Assumptions

The Nillion Network consists of a collection of independent nodes, and builders have the option to rely on any subset of one or more of these nodes (*i.e.*, a *cluster* of nodes that is determined entirely by the builder) to securely store and compute over data.

* When working with a single node in conjunction with a PET such as homomorphic encryption, it is up to the builder to determine how secret and public keys are generated, maintained, and used.
* When working with a cluster of two or more nodes, builders can choose to rely on the non-collusion of network nodes (and need not inform any individual node of the identities of other nodes in the cluster).

## Privacy-Enhancing Technologies

The [Blind Modules](/learn/blind-modules) leverage a number of PETs to enable secure data storage and processing.

### Secure Multi-Party Computation (MPC)

nilDB supports the use of [additive secret sharing](https://en.wikipedia.org/wiki/Secret_sharing) and [Shamir's secret sharing](https://en.wikipedia.org/wiki/Shamir%27s_secret_sharing) (including threshold secret sharing) to store data and to compute over that data. Builders can choose two or more nodes across which data would be stored using this approach.

### Homomorphic Encryption (HE)

nilDB supports of the use of the [Paillier cryptosystem](https://en.wikipedia.org/wiki/Paillier_cryptosystem) to store data, compute over that data, and retrieve results while relying on a single-node cluster. This makes it possible to perform aggregation queries over encrypted data even when using a single-node cluster.

### Trusted Execution Environments (TEEs)

[Private LLM inference](/build/private-llms/overview) and the use of [private RAG](/build/private-llms/nilRAG) is supported via TEEs.



================================================
FILE: docs/learn/use-cases.md
================================================
# Use Cases

The Nillion Network enables a variety of use cases in which sensitive data is leveraged and processed while remaining protected using cryptographic techniques.

## Secure Storage and Retrieval

With [Private Storage](/build/private-storage/overview), users can store and retrieve secrets on the Nillion Network via a RESTful API. It is up to the developer which privacy-enhancing technology (PET) they want to use and on which node or cluster of nodes they want to rely. Querying and secure computation of these secrets is available for large scale database operations. Homomorphic encryption offers data protection and supports computation over data even if only one node is being used. Secure multi-party computation makes it possible to go one step further, making it possible to store in a decentralized way while relying on the strongest form of encryption possible (*i.e.*, [information-theoretic security](https://en.wikipedia.org/wiki/Information-theoretic_security)).

## Private Inference

[Private LLMs](/build/private-llms/overview) can be incorporated into any application via a RESTful API. These are compatible with OpenAI standards and any AI-powered application can be built. Common sectors from which developers build apps that require private inference through the prompts and answers include (but are not limited to) health and finance.

## Retrieval-Augmented Generation (RAG)

Combining *retrieval-augmented generation* (RAG) with PETs makes it possible to leverage the powerful features of contemporary AI solutions while storing data in an encrypted form at all times. This can unlock new use cases by reducing the amount of data that must be decrypted to accomplish a given task.



================================================
FILE: docs/learn/what-is-nillion.md
================================================
# What is Nillion

Nillion is a secure computation network that decentralizes trust for high-value, sensitive, and private data in the same way that blockchains decentralize transactions.

## Intro to Nillion

Nillion is a decentralized data storage and computation network and an accompanying a suite of tools that together allow builders to build novel, powerful applications that leverage sensitive and/or high-value data in a safer way. Its modular and flexible architecture makes it possible to leverage cutting-edge cryptographic techniques to accomplish this, enabling both more secure versions of existing workflows and unlocking new opportunities. Early builders in the Nillion community are creating tooling in [application areas](/learn/use-cases) like private predictive AI, secure storage and compute solutions for healthcare, storage solutions for secure data such as credentials, and secure workflows for trade data.

## What is Blind Computation?

When sensitive data is encrypted and stored, the traditional approaches to doing useful work with that data involve decrypting it in order to perform any necessary computations (and then potentially re-encrypting the results). This decrypt-compute-re-encrypt cycle not only exposes the data to the operators of the computing infrastructure. *Blind computation* makes it possible to perform useful work on data *while it remains encrypted*, even if the operator of the computing infrastructure does not possess the ability to decrypt it.

## What are Blind Modules?

Nillion makes blind computation possible by leveraging a number of *privacy-enhancing technologies* (PETs) such as [secure multi-party computation (MPC)](https://en.wikipedia.org/wiki/Secure_multi-party_computation), [homomorphic encryption (HE)](https://en.wikipedia.org/wiki/Homomorphic_encryption), and [trusted execution environments (TEEs)](https://en.wikipedia.org/wiki/Trusted_execution_environment). Each of the [Blind Modules](/learn/blind-modules) packages and combines one or more PETs in a developer-friendly way, bringing these capabilities to a broader audience.



================================================
FILE: src/components/Features/FeatureSection/index.js
================================================
import styles from './index.module.css';
import Link from '@docusaurus/Link';

function FeatureItem({ title, description, href, icon, disabled }) {
  if (disabled) {
    return (
      <div className={styles.featureItem}>
        <div className={styles.featureIcon}>{icon}</div>
        <h3>{title}</h3>
        <p>{description}</p>
      </div>
    );
  }
  return (
    <Link to={href} className={styles.featureItem}>
      <div className={styles.featureIcon}>{icon}</div>
      <h3>{title}</h3>
      <p>{description}</p>
    </Link>
  );
}

export default function FeatureSection({ data }) {
  return (
    <section className={styles.features}>
      {data.map((props, idx) => (
        <FeatureItem key={idx} {...props} />
      ))}
    </section>
  );
}



================================================
FILE: src/components/Features/FeatureSection/index.module.css
================================================
.main {
  padding: 0;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  background-color: var(--ifm-background-color);
  color: var(--ifm-font-color-base);
}

@media screen and (max-width: 768px) {
  .main {
    padding-bottom: 4em;
  }
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media screen and (max-width: 996px) {
  .heroBanner {
    flex-direction: column;
    padding: 2rem 1rem;
  }

  .heroContent {
    max-width: 100%;
  }

  .heroImageContainer {
    width: 30%;
    margin-top: 2rem;
  }

  .heroBanner {
    gap: 0rem;
  }
}

.features {
  display: flex;
  flex-wrap: wrap;
  /* justify-content: space-between; */
  padding: 1rem;
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
}

.featureItem {
  flex: 0 1 calc(33.333% - 1rem);
  display: flex;
  flex-direction: column;
  padding: 2rem;
  background-color: var(--ifm-card-primary-grey);
  border-radius: var(--ifm-card-border-radius);
  margin-bottom: 2rem;
  box-shadow: var(--ifm-global-shadow-lw);
  text-decoration: none !important;
  color: var(--ifm-font-color-base) !important;
  transition: all 0.3s ease;
  border: 2px solid transparent;
  margin-right: 1rem;
}

.featureItem:hover {
  transform: translateY(-5px);
  box-shadow: 0 4px 20px rgba(0, 0, 255, 0.1);
  border-color: rgba(0, 0, 255, 0.1);
}

.featureIcon {
  font-size: 2rem;
  margin-bottom: 1rem;
}

.featureTitle {
  margin-top: 0;
  color: var(--ifm-color-primary);
  font-size: 1.5rem;
}

.featureDescription {
  flex-grow: 1;
  margin-bottom: 0;
  color: var(--ifm-font-color-base) !important;
}

.featureItem:hover .featureTitle,
.featureItem:hover .featureDescription {
  color: var(--ifm-font-color-base) !important;
  text-decoration: none !important;
}

@media screen and (max-width: 1024px) {
  .featureItem {
    flex: 0 1 calc(50% - 1rem);
  }
}

@media screen and (max-width: 768px) {
  .features {
    padding: 1rem;
  }

  .featureItem {
    flex: 0 1 100%;
  }
}

@media screen and (max-width: 1024px) {
  .heroBanner {
    flex-direction: column;
    align-items: center;
    padding: 3rem 2rem;
  }

  .heroContent {
    max-width: 100%;
    text-align: center;
    margin-bottom: 2rem;
  }

  .heroImage {
    max-width: 70%;
  }

  .featureItem {
    flex: 0 1 calc(50% - 1rem);
  }
}

@media screen and (max-width: 768px) {
  .heroBanner {
    padding: 2rem 1rem;
  }

  .heroTitle {
    font-size: 1.75rem;
  }

  .heroSubtitle {
    font-size: 1.25rem;
  }

  .heroDescription {
    font-size: 1rem;
  }

  .features {
    padding: 1rem;
  }

  .featureItem {
    flex: 0 1 100%;
    padding: 1rem;
  }

  .heroImageContainer {
    margin: 0px;
  }

  .heroBanner {
    gap: 0rem;
  }

  .heroContent {
    margin-bottom: 0.5rem;
  }

  .getStartedButton {
    display: none;
  }
}



================================================
FILE: src/components/HomepageFeatures/index.js
================================================
import clsx from 'clsx';
import Heading from '@theme/Heading';
import styles from './styles.module.css';

const FeatureList = [
  {
    title: 'Easy to Use',
    Svg: require('@site/static/img/undraw_docusaurus_mountain.svg').default,
    description: (
      <>
        Docusaurus was designed from the ground up to be easily installed and
        used to get your website up and running quickly.
      </>
    ),
  },
  {
    title: 'Focus on What Matters',
    Svg: require('@site/static/img/undraw_docusaurus_tree.svg').default,
    description: (
      <>
        Docusaurus lets you focus on your docs, and we&apos;ll do the chores. Go
        ahead and move your docs into the <code>docs</code> directory.
      </>
    ),
  },
  {
    title: 'Powered by React',
    Svg: require('@site/static/img/undraw_docusaurus_react.svg').default,
    description: (
      <>
        Extend or customize your website layout by reusing React. Docusaurus can
        be extended while reusing the same header and footer.
      </>
    ),
  },
];

function Feature({Svg, title, description}) {
  return (
    <div className={clsx('col col--4')}>
      <div className="text--center">
        <Svg className={styles.featureSvg} role="img" />
      </div>
      <div className="text--center padding-horiz--md">
        <Heading as="h3">{title}</Heading>
        <p>{description}</p>
      </div>
    </div>
  );
}

export default function HomepageFeatures() {
  return (
    <section className={styles.features}>
      <div className="container">
        <div className="row">
          {FeatureList.map((props, idx) => (
            <Feature key={idx} {...props} />
          ))}
        </div>
      </div>
    </section>
  );
}



================================================
FILE: src/components/HomepageFeatures/styles.module.css
================================================
.features {
  display: flex;
  align-items: center;
  padding: 2rem 0;
  width: 100%;
}

.featureSvg {
  height: 200px;
  width: 200px;
}



================================================
FILE: src/components/IframeVideo/index.js
================================================
import styles from './styles.module.css';

export default function IframeVideo({ videoSrc }) {
  return (
    <div className={styles.container}>
      <iframe src={videoSrc} className={styles.iframe}></iframe>
    </div>
  );
}



================================================
FILE: src/components/IframeVideo/styles.module.css
================================================
.container {
  width: 100%;
  position: relative;
  padding-bottom: 64.98194945848375%;
  height: 0;
}

.iframe {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}



================================================
FILE: src/components/LinkButton/index.js
================================================
import React from 'react';
import styles from './styles.module.css'; // Import CSS module for styling
import Link from '@docusaurus/Link';

const LinkButton = ({ text, link, small }) => {
  return (
    <Link to={link}>
      <button
        className={small ? styles.smallCustomButton : styles.customButton}
      >
        {text}
      </button>
    </Link>
  );
};

export default LinkButton;



================================================
FILE: src/components/LinkButton/styles.module.css
================================================
.customButton {
  border: none;
  text-align: center;
  text-decoration: none;
  font-size: 20px;
  box-sizing: border-box;
  cursor: pointer;
  border-radius: 8px;
  padding: 15px;
  width: 49%;
  align-items: center;
  font-weight: 600;
  background: rgb(0, 33, 245);
  color: white !important;
}

.customButton:hover {
  cursor: pointer;
  text-decoration: none;
}

.smallCustomButton {
  border: none;
  text-align: center;
  text-decoration: none;
  font-size: 20px;
  box-sizing: border-box;
  cursor: pointer;
  border-radius: 32px;
  padding: 15px;
  width: 25%;
  align-items: center;
  font-weight: 400;
  background: rgb(0, 33, 245);
  color: white !important;
}

@media screen and (max-width: 768px) {
  .smallCustomButton {
    width: 50%;
  }
}

.smallCustomButton:hover {
  cursor: pointer;
  text-decoration: none;
}



================================================
FILE: src/css/custom.css
================================================
/**
 * Any CSS included here will be global. The classic template
 * bundles Infima by default. Infima is a CSS framework designed to
 * work well for content-centric websites.
 */

@font-face {
  font-family: 'TWKEverett';
  src: url('../../static/fonts/TWKEverett-Medium-web.woff') format('woff');
}

/* You can override the default Infima variables here. */
:root {
  --ifm-color-primary: blue;
  --ifm-color-primary-dark: #0000b3;
  --ifm-color-primary-darker: #000080;
  --ifm-color-primary-darkest: #000033;
  --ifm-color-primary-light: #3333ff;
  --ifm-color-primary-lighter: #4d4dff;
  --ifm-color-primary-lightest: #ccccff;
  --ifm-code-font-size: 95%;
  --ifm-card-primary-grey: #f7f7f7;
  --docusaurus-highlighted-code-line-bg: rgba(0, 0, 0, 0.1);
  --feedback-primary-color: blue;
  --feedback-font-family: 'TWKEverett';
}

/* For readability concerns, you should choose a lighter palette in dark mode. */
[data-theme='dark'] {
  --ifm-color-primary: #b7d8f7;
  --ifm-color-primary-dark: #21af90;
  --ifm-color-primary-darker: #1fa588;
  --ifm-color-primary-darkest: #1a8870;
  --ifm-color-primary-light: #29d5b0;
  --ifm-color-primary-lighter: #32d8b4;
  --ifm-color-primary-lightest: #4fddbf;
  --ifm-card-primary-grey: #646464;
  --docusaurus-highlighted-code-line-bg: rgba(0, 0, 0, 0.3);
}

.sidebar-title {
  font-weight: bold;
}

/* css fix for scrolling to the right section in reference docs - leave space for navbar */
html {
  scroll-padding-top: 55px;
}

.ag-cell-value {
  line-height: 20px;
  font-size: 14px;
}

.sidebar-title,
.navbar__title,
button,
.pagination-nav__label,
.navbar__item,
h1,
h2,
h3,
h4 {
  font-family: 'TWKEverett';
}

.navbar .clean-btn svg,
.navbar .navbar__title,
.navbar .navbar__item {
  color: white !important;
}
[data-theme='light'] .navbar .navbar__item {
  color: white !important;
  filter: invert(0.8);
}

[data-theme='light'] .navbar .clean-btn svg {
  filter: invert(0.8);
}

.navbar__title {
  font-size: 30px;
}

.header-github:hover {
  opacity: 0.6;
}

.header-github:before {
  content: '';
  width: 24px;
  height: 24px;
  display: flex;
  background: url("data:image/svg+xml,%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill='white' d='M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12'/%3E%3C/svg%3E")
    no-repeat;
}

/* Dark mode css */

[data-theme='dark'] .header-github:hover {
  filter: invert(1);
}

[data-theme='dark'] .sidebar-title {
  border-bottom: solid rgb(96, 103, 112) 1px;
}

@media (min-width: 768px) {
  .main-wrapper .container {
    padding-left: 2em;
  }
}

.divider {
  width: 100%;
  height: 1px;
  background-color: #ccc;
  margin: 20px 0;
}

.theme-doc-sidebar-menu.menu__list {
  padding-top: 1em !important;
  padding-bottom: 3em !important;
}

.theme-doc-sidebar-menu .menu__list {
  padding-top: 0 !important;
  padding-bottom: 0 !important;
}

/* MERMAID CSS for blind module diagrams */
.docusaurus-mermaid-container {
  align-items: center;
  flex: auto;
}

.docusaurus-mermaid-container svg {
  align-items: center;
  display: block;
  margin: 0 auto;
}



================================================
FILE: src/pages/index.js
================================================
import React from 'react';
import Layout from '@theme/Layout';
import useDocusaurusContext from '@docusaurus/useDocusaurusContext';
import styles from './index.module.css';
import Link from '@docusaurus/Link';
import LinkButton from '../components/LinkButton';

function HeroSection() {
  const { siteConfig } = useDocusaurusContext();

  return (
    <header className={styles.heroBanner}>
      <div className={styles.heroContent}>
        <h1 className={styles.heroTitle}>{siteConfig.title}</h1>
        <h2 className={styles.heroSubtitle}>
          Humanity's first blind computer.
        </h2>
        <p className={styles.heroDescription}>
          Nillion is a secure computation network that decentralizes trust for
          high value data in the same way that blockchains decentralized
          transactions.
        </p>
        <div className={styles.getStartedButton}>
          <LinkButton text='Get Started' link='/build/quickstart' small={true} />
        </div>
      </div>
      <div className={styles.heroImageContainer}>
        <img
          src='https://nillion.com/wp-content/themes/nillion/assets/images/index/web-summit.svg'
          alt='Nillion Network Illustration'
          className={styles.spinningImage}
        />
      </div>
    </header>
  );
}

function FeatureItem({ title, description, href, icon }) {
  return (
    <Link to={href} className={styles.featureItem}>
      <div className={styles.featureIcon}>{icon}</div>
      <h3>{title}</h3>
      <p>{description}</p>
    </Link>
  );
}

function FeaturesSection() {
  const features = [
    {
      title: 'Learn',
      description:
        'Nillion is a secure computation network that decentralizes trust for high value data in the same way that blockchains decentralized transactions.',
      icon: '🎓',
      href: './learn/what-is-nillion',
    },
    {
      title: 'Build',
      description: 'Start building on Nillion with one of our developer SDKs.',
      icon: '👷',
      href: './build/quickstart',
    },
    {
      title: 'Community',
      description:
        'Join the Nillion community to connect, collaborate, and contribute to the future of blind computation.',
      icon: '🌐',
      href: './community/community-and-support',
    },
  ];

  return (
    <section className={styles.features}>
      {features.map((props, idx) => (
        <FeatureItem key={idx} {...props} />
      ))}
    </section>
  );
}

export default function Home() {
  return (
    <Layout
      title='Home'
      description="Nillion Builder Docs - Humanity's first blind computer"
      noFooter={true}
      wrapperClassName='homepage'
    >
      <main className={styles.main}>
        <HeroSection />
        <FeaturesSection />
      </main>
    </Layout>
  );
}



================================================
FILE: src/pages/index.module.css
================================================
.main {
  padding: 0;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  background-color: var(--ifm-background-color);
  color: var(--ifm-font-color-base);
}

@media screen and (max-width: 768px) {
  .main {
    padding-bottom: 4em;
  }
}

.heroBanner {
  padding: 4rem 2rem;
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 2rem;
}

.heroContent {
  flex: 1;
  max-width: 60%;
}

.heroTitle {
  font-size: 3rem;
  color: #0000ff;
  margin-bottom: 0.5rem;
}

.heroSubtitle {
  font-size: 2.5rem;
  margin-top: 0.5rem;
  margin-bottom: 1rem;
}

.heroDescription {
  font-size: 1.2rem;
  margin-top: 1rem;
  line-height: 1.6;
}

.heroButtons {
  margin-top: 2rem;
  border-radius: 20px;
}

.heroImageContainer {
  flex: 0 0 auto;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 30%;
}

.spinningImage {
  max-width: 100%;
  height: auto;
  animation: spin 20s linear infinite;
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media screen and (max-width: 996px) {
  .heroBanner {
    flex-direction: column;
    padding: 2rem 1rem;
  }

  .heroContent {
    max-width: 100%;
  }

  .heroImageContainer {
    width: 30%;
    margin-top: 2rem;
  }

  .heroBanner {
    gap: 0rem;
  }

}

.features {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  padding: 2rem;
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
}

.featureItem {
  flex: 0 1 calc(33.333% - 1rem);
  display: flex;
  flex-direction: column;
  padding: 2rem;
  background-color: var(--ifm-card-primary-grey);
  border-radius: var(--ifm-card-border-radius);
  margin-bottom: 2rem;
  box-shadow: var(--ifm-global-shadow-lw);
  text-decoration: none !important;
  color: var(--ifm-font-color-base) !important;
  transition: all 0.3s ease;
  border: 2px solid transparent;
}

.featureItem:hover {
  transform: translateY(-5px);
  box-shadow: 0 4px 20px rgba(0, 0, 255, 0.1);
  border-color: rgba(0, 0, 255, 0.1);
}

.featureIcon {
  font-size: 2rem;
  margin-bottom: 1rem;
}

.featureTitle {
  margin-top: 0;
  color: var(--ifm-color-primary);
  font-size: 1.5rem;
}

.featureDescription {
  flex-grow: 1;
  margin-bottom: 0;
  color: var(--ifm-font-color-base) !important;
}

.featureItem:hover .featureTitle,
.featureItem:hover .featureDescription {
  color: var(--ifm-font-color-base) !important;
  text-decoration: none !important;
}

@media screen and (max-width: 1024px) {
  .featureItem {
    flex: 0 1 calc(50% - 1rem);
  }
}

@media screen and (max-width: 768px) {
  .features {
    padding: 1rem;
  }

  .featureItem {
    flex: 0 1 100%;
  }
}

@media screen and (max-width: 1024px) {
  .heroBanner {
    flex-direction: column;
    align-items: center;
    padding: 3rem 2rem;
  }

  .heroContent {
    max-width: 100%;
    text-align: center;
    margin-bottom: 2rem;
  }

  .heroImage {
    max-width: 70%;
  }

  .featureItem {
    flex: 0 1 calc(50% - 1rem);
  }
}

@media screen and (max-width: 768px) {
  .heroBanner {
    padding: 2rem 1rem;
  }

  .heroTitle {
    font-size: 1.75rem;
  }

  .heroSubtitle {
    font-size: 1.25rem;
  }

  .heroDescription {
    font-size: 1rem;
  }

  .features {
    padding: 1rem;
  }

  .featureItem {
    flex: 0 1 100%;
    padding: 1.5rem;
  }

  .heroImageContainer{
    margin: 0px;
  }

  .heroBanner {
    gap: 0rem;
  }

  .heroContent {
    margin-bottom: 0.5rem;
  }
  
  .getStartedButton {
    display: none;
  }
}



================================================
FILE: src/theme/SearchBar/index.js
================================================
import React from 'react';
import SearchBar from '@theme-original/SearchBar';
import AskCookbook from '@cookbookdev/docsbot/react'
import BrowserOnly from '@docusaurus/BrowserOnly';

/** Nillion's public cookbook API key - safe to show here */
const COOKBOOK_PUBLIC_API_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2NmIzZTA0NjU1N2UxOGI0Yjk2MTA3NjUiLCJpYXQiOjE3MjMwNjQzOTAsImV4cCI6MjAzODY0MDM5MH0.Xf2HZssthHYmIOZKLPuOtNo2tw1H6VSwbOi_76vXNIU";

export default function SearchBarWrapper(props) {
  return (
    <>
      <SearchBar {...props} />
      <BrowserOnly>{() => <AskCookbook apiKey={COOKBOOK_PUBLIC_API_KEY} /> }</BrowserOnly>
    </>
  );
}



================================================
FILE: src/utils/apiCards.js
================================================
export const apiCards = [
  {
    title: 'nilDB',
    description: `nilDB is a Nillion blind module that is used to support the SecretVault SDK`,
    icon: '🔐',
    href: './nildb/get-node-details',
  },
  {
    title: 'nilAI',
    description: `nilAI is a Nillion blind module allowing for LLMs to run securely inside TEEs`,
    icon: '💻',
    href: './nilai/overview',
  },
];



================================================
FILE: src/utils/FeatureCards.js
================================================
export const QuickStartFeatures = [
  {
    title: 'Private Storage',
    description:
      'Read and write records to an encrypted database using nilDB APIs.',
    icon: '🏛️',
    href: './private-storage/quickstart',
  },
  {
    title: 'Private LLMs',
    description:
      'Run OpenAI-compatible LLMs privately in a TEE within a nilAI node, without exposing user data.',
    icon: '💬',
    href: './private-llms/quickstart',
  },
];

export const Libraries = [
  {
    title: 'blindfold',
    description: 'Encrypt/decrypt and secret share data using the blindfold library.',
    icon: '🔐',
    href: './private-storage/blindfold',
  },
  {
    title: 'nilRAG',
    description:
      'Provide context to SecretLLM from SecretVault with nilRAG library.',
    icon: '🔍',
    href: './private-llms/nilRAG',
  },
];



================================================
FILE: static/llm.txt
================================================
# Nillion Documentation

> Nillion is a decentralized computation platform that enables privacy-preserving operations through advanced cryptography. Our technology allows developers to build applications that process sensitive data without compromising privacy or security.

Nillion combines multiple cryptographic techniques to create a platform where data can remain private while still being useful for computation. Our suite of tools includes SecretVault for secure data storage and SecretLLM for private AI.


## Learn
- [What Is Nillion](https://docs.nillion.com/what-is-nillion): Introduction to Nillion and its capabilities
- [Use Cases](https://docs.nillion.com/learn/use-cases): Example applications and industry solutions built with Nillion
- [Architecture](https://docs.nillion.com/learn/architecture): Overview of Nillion's technical architecture
- [Blind Modules](https://docs.nillion.com/build/blind-modules): How Nillion's pre-built privacy-preserving modules work
- [Protocols](https://docs.nillion.com/learn/protocols): Technical details about Nillion's cryptographic protocols

## Build

- [Start Building](https://docs.nillion.com/quickstart): Quick guide to get started with Nillion development
- [Network Configuration](https://docs.nillion.com/network): Information about connecting to the Nillion network

### SecretVault

- [Overview](https://docs.nillion.com/build/secret-vault/about): Introduction to SecretVault for secure data storage
- [API Reference](https://docs.nillion.com/api/nildb/overview): Complete SecretVault API documentation

### SecretLLM

- [Overview](https://docs.nillion.com/build/secretLLM/overview): Introduction to privacy-preserving LLM operations
- [Quickstart](https://docs.nillion.com/build/secretLLM/quickstart): Get started with SecretLLM
- [Access](https://docs.nillion.com/build/secretLLM/access): How to access SecretLLM services
- [Usage](https://docs.nillion.com/build/secretLLM/usage): How to use SecretLLM in applications
- [API Reference](https://docs.nillion.com/api/nilai/overview): Complete SecretLLM API documentation


## API Reference

- [SecretVault API](https://docs.nillion.com/api/nildb/overview): API documentation for SecretVault
- [SecretLLM API](https://docs.nillion.com/api/nilai/overview): API documentation for SecretLLM

## Community

- [Community and Support](https://docs.nillion.com/community-and-support): How to get help and connect with the community
- [Nucleus Builders Program](https://nucleus.nillion.com): Information about the developer program for grants and support
- [nilChain Guides](https://docs.nillion.com/guide-nillion-wallet): Guides for interacting with nilChain
- [Status Page](https://status.nillion.com/): Current status of Nillion services


================================================
FILE: static/.nojekyll
================================================
[Empty file]


================================================
FILE: static/fonts/TWKEverett-Medium-web.woff
================================================
[Binary file]


================================================
FILE: static/js/piwik.js
================================================
if (window.location.hostname !== 'localhost') {
  var _paq = _paq || [];
  _paq.push(['trackPageView']);
  _paq.push(['enableLinkTracking']);
  (function () {
    console.log('temporary log - piwik running');
    var u = 'https://nillion.piwik.pro/';
    _paq.push(['setTrackerUrl', u + 'ppms.php']);
    _paq.push(['setSiteId', '423a0a7c-c574-4a4a-9753-7cfbcac1b45d']);
    var d = document,
      g = d.createElement('script'),
      s = d.getElementsByTagName('script')[0];
    g.type = 'text/javascript';
    g.async = true;
    g.defer = true;
    g.src = u + 'ppms.js';
    s.parentNode.insertBefore(g, s);
  })();
}



================================================
FILE: .github/ISSUE_TEMPLATE/document-a-new-feature.md
================================================
---
name: Document a new feature
about: Request documentation for new features in a Nillion Secret SDK
title: ''
labels: documentation, enhancement
assignees: ''
---

**Feature Description**
A clear and concise description of the new feature that needs to be documented.

**Why is this feature important?**
Explain why this feature is relevant or valuable for users.

**How do developers use the feature?**
Describe how developers interact with or implement the feature. List any specific information, usage examples, parameters, or diagrams that should be documented.

**Usage or commands**
List relevant commands, code snippets, or usage scenarios that show how to use the feature.

**Additional context**
Link to all relevant PRs. Add any other context, links, screenshots, or resources about the feature here.



================================================
FILE: .github/ISSUE_TEMPLATE/request-a-documentation-update.md
================================================
---
name: Request a documentation update
about: Request updates or corrections for Nillion docs due to bugs or API changes
title: ''
labels: ''
assignees: ''

---

**Location of the Issue**
Include each link and section where the outdated or incorrect information is found in the docs.

**Description of the Issue**
Add a clear and concise description of what needs to be updated or corrected in the documentation.

**Suggested Update**
Provide the correct information or describe what changes should be made (e.g., if an API has been updated).

**Additional Context**
Add any other context, screenshots, or links to support the requested update.



================================================
FILE: .github/workflows/sync-main-to-release.yaml
================================================
name: sync 'main' branch to 'release'
on:
  push:
    branches:
      - main

permissions: write-all

jobs:
  sync-branches:
    runs-on: ubuntu-latest
    name: sync main to release
    steps:

      - name: checkout 'release'
        uses: actions/checkout@v4
        with:
          ref: release

      - name: rebase onto 'main'
        id: rebase
        continue-on-error: true
        run: |
          git fetch origin main
          git rebase origin/main

      - name: push changes to 'release'
        if: success() && steps.rebase.outcome == 'success'
        run: |
          git push origin release --force-with-lease

      - name: open pr on rebase failure
        id: pull
        if: steps.rebase.outcome == 'failure'
        uses: TreTuna/sync-branches@1.4.0
        with:
          FROM_BRANCH: "main"
          TO_BRANCH: "release"
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          PULL_REQUEST_TITLE: "chore: sync main -> release"


